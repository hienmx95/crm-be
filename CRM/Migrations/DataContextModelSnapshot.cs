// <auto-generated />
using System;
using CRM.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CRM.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("CRM.Models.ActionDAO", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<long>("MenuId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(500) CHARACTER SET utf8mb4")
                        .HasMaxLength(500);

                    b.HasKey("Id");

                    b.HasIndex("MenuId");

                    b.ToTable("Action","PER");
                });

            modelBuilder.Entity("CRM.Models.ActionPageMappingDAO", b =>
                {
                    b.Property<long>("ActionId")
                        .HasColumnType("bigint");

                    b.Property<long>("PageId")
                        .HasColumnType("bigint");

                    b.HasKey("ActionId", "PageId");

                    b.HasIndex("PageId");

                    b.ToTable("ActionPageMapping","PER");
                });

            modelBuilder.Entity("CRM.Models.ActivityPriorityDAO", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.ToTable("ActivityPriority","ENUM");
                });

            modelBuilder.Entity("CRM.Models.ActivityStatusDAO", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.ToTable("ActivityStatus","ENUM");
                });

            modelBuilder.Entity("CRM.Models.ActivityTypeDAO", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.ToTable("ActivityType","ENUM");
                });

            modelBuilder.Entity("CRM.Models.AppUserDAO", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasComment("Id");

                    b.Property<string>("Address")
                        .HasColumnType("varchar(500) CHARACTER SET utf8mb4")
                        .HasComment("Địa chỉ nhà")
                        .HasMaxLength(500);

                    b.Property<string>("Avatar")
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .HasComment("Ảnh đại diện")
                        .HasMaxLength(4000);

                    b.Property<DateTime?>("Birthday")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasComment("Ngày tạo");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime")
                        .HasComment("Ngày xoá");

                    b.Property<string>("Department")
                        .HasColumnType("varchar(500) CHARACTER SET utf8mb4")
                        .HasComment("Phòng ban")
                        .HasMaxLength(500);

                    b.Property<string>("DisplayName")
                        .HasColumnType("varchar(500) CHARACTER SET utf8mb4")
                        .HasComment("Tên hiển thị")
                        .HasMaxLength(500);

                    b.Property<string>("Email")
                        .HasColumnType("varchar(500) CHARACTER SET utf8mb4")
                        .HasComment("Địa chỉ email")
                        .HasMaxLength(500);

                    b.Property<decimal?>("Latitude")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<decimal?>("Longitude")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<long>("OrganizationId")
                        .HasColumnType("bigint")
                        .HasComment("Đơn vị công tác");

                    b.Property<string>("Phone")
                        .HasColumnType("varchar(500) CHARACTER SET utf8mb4")
                        .HasComment("Số điện thoại liên hệ")
                        .HasMaxLength(500);

                    b.Property<Guid>("RowId")
                        .HasColumnType("char(36)")
                        .HasComment("Trường để đồng bộ");

                    b.Property<long>("SexId")
                        .HasColumnType("bigint");

                    b.Property<long>("StatusId")
                        .HasColumnType("bigint")
                        .HasComment("Trạng thái");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasComment("Ngày cập nhật");

                    b.Property<bool>("Used")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("varchar(500) CHARACTER SET utf8mb4")
                        .HasComment("Tên đăng nhập")
                        .HasMaxLength(500);

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("SexId");

                    b.HasIndex("StatusId");

                    b.ToTable("AppUser","MDM");
                });

            modelBuilder.Entity("CRM.Models.AppUserRoleMappingDAO", b =>
                {
                    b.Property<long>("AppUserId")
                        .HasColumnType("bigint")
                        .HasComment("Id nhân viên");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint")
                        .HasComment("Id nhóm quyền");

                    b.HasKey("AppUserId", "RoleId")
                        .HasName("PK_UserRoleMapping");

                    b.HasIndex("RoleId");

                    b.ToTable("AppUserRoleMapping","MDM");
                });

            modelBuilder.Entity("CRM.Models.AuditLogPropertyDAO", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("ActionName")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.Property<long?>("AppUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("ClassName")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.Property<string>("NewValue")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .HasMaxLength(4000);

                    b.Property<string>("OldValue")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .HasMaxLength(4000);

                    b.Property<string>("Property")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("Time")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.ToTable("AuditLogProperty");
                });

            modelBuilder.Entity("CRM.Models.BrandDAO", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(500) CHARACTER SET utf8mb4")
                        .HasMaxLength(500);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(2000) CHARACTER SET utf8mb4")
                        .HasMaxLength(2000);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(500) CHARACTER SET utf8mb4")
                        .HasMaxLength(500);

                    b.Property<Guid>("RowId")
                        .HasColumnType("char(36)");

                    b.Property<long>("StatusId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<bool>("Used")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.HasIndex("StatusId");

                    b.ToTable("Brand","MDM");
                });

            modelBuilder.Entity("CRM.Models.BusinessConcentrationLevelDAO", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Branch")
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<string>("Manufacturer")
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<long?>("MarketingStaff")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<decimal?>("RevenueInYear")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<long?>("StoreId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("StoreId");

                    b.ToTable("BusinessConcentrationLevel");
                });

            modelBuilder.Entity("CRM.Models.BusinessTypeDAO", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .HasColumnType("varchar(500) CHARACTER SET utf8mb4")
                        .HasMaxLength(500);

                    b.Property<string>("Name")
                        .HasColumnType("varchar(500) CHARACTER SET utf8mb4")
                        .HasMaxLength(500);

                    b.HasKey("Id");

                    b.ToTable("BusinessType","ENUM");
                });

            modelBuilder.Entity("CRM.Models.CallCategoryDAO", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("CallCategory","ENUM");
                });

            modelBuilder.Entity("CRM.Models.CallEmotionDAO", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(500) CHARACTER SET utf8mb4")
                        .HasMaxLength(500);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasComment("Ngày tạo");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime")
                        .HasComment("Ngày xoá");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(2000) CHARACTER SET utf8mb4")
                        .HasMaxLength(2000);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(500) CHARACTER SET utf8mb4")
                        .HasMaxLength(500);

                    b.Property<Guid>("RowId")
                        .HasColumnType("char(36)");

                    b.Property<long>("StatusId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasComment("Ngày cập nhật");

                    b.Property<bool>("Used")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.HasIndex("StatusId");

                    b.ToTable("CallEmotion");
                });

            modelBuilder.Entity("CRM.Models.CallLogDAO", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long>("AppUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CallCategoryId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CallEmotionId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CallStatusId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CallTime")
                        .HasColumnType("datetime");

                    b.Property<long>("CallTypeId")
                        .HasColumnType("bigint");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .HasMaxLength(4000);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<long>("CreatorId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<long>("EntityId")
                        .HasColumnType("bigint");

                    b.Property<long>("EntityReferenceId")
                        .HasColumnType("bigint");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("char(20) CHARACTER SET utf8mb4")
                        .IsFixedLength(true)
                        .HasMaxLength(20);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("varchar(500) CHARACTER SET utf8mb4")
                        .HasMaxLength(500);

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("CallCategoryId");

                    b.HasIndex("CallEmotionId");

                    b.HasIndex("CallStatusId");

                    b.HasIndex("CallTypeId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("EntityReferenceId");

                    b.ToTable("CallLog");
                });

            modelBuilder.Entity("CRM.Models.CallStatusDAO", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("CallStatus","ENUM");
                });

            modelBuilder.Entity("CRM.Models.CallTypeDAO", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.Property<string>("ColorCode")
                        .IsRequired()
                        .HasColumnType("varchar(20) CHARACTER SET utf8mb4")
                        .HasMaxLength(20);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.Property<long>("StatusId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<bool>("Used")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.HasIndex("StatusId");

                    b.ToTable("CallType");
                });

            modelBuilder.Entity("CRM.Models.CategoryDAO", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(500) CHARACTER SET utf8mb4")
                        .HasMaxLength(500);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<long?>("ImageId")
                        .HasColumnType("bigint");

                    b.Property<long>("Level")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(500) CHARACTER SET utf8mb4")
                        .HasMaxLength(500);

                    b.Property<long?>("ParentId")
                        .HasColumnType("bigint");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("varchar(500) CHARACTER SET utf8mb4")
                        .HasMaxLength(500);

                    b.Property<Guid>("RowId")
                        .HasColumnType("char(36)");

                    b.Property<long>("StatusId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<bool>("Used")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.HasIndex("ImageId");

                    b.HasIndex("ParentId");

                    b.HasIndex("StatusId");

                    b.ToTable("Category","MDM");
                });

            modelBuilder.Entity("CRM.Models.ColorDAO", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Color","ENUM");
                });

            modelBuilder.Entity("CRM.Models.CompanyActivityDAO", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long?>("ActivityPriorityId")
                        .HasColumnType("bigint");

                    b.Property<long>("ActivityStatusId")
                        .HasColumnType("bigint");

                    b.Property<long>("ActivityTypeId")
                        .HasColumnType("bigint");

                    b.Property<string>("Address")
                        .HasColumnType("varchar(500) CHARACTER SET utf8mb4")
                        .HasMaxLength(500);

                    b.Property<long>("AppUserId")
                        .HasColumnType("bigint");

                    b.Property<long>("CompanyId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .HasMaxLength(4000);

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("ToDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("ActivityPriorityId");

                    b.HasIndex("ActivityStatusId");

                    b.HasIndex("ActivityTypeId");

                    b.HasIndex("AppUserId");

                    b.HasIndex("CompanyId");

                    b.ToTable("CompanyActivity","OPP");
                });

            modelBuilder.Entity("CRM.Models.CompanyCallLogMappingDAO", b =>
                {
                    b.Property<long>("CompanyId")
                        .HasColumnType("bigint");

                    b.Property<long>("CallLogId")
                        .HasColumnType("bigint");

                    b.HasKey("CompanyId", "CallLogId")
                        .HasName("PK_AccountCallLogMapping");

                    b.HasIndex("CallLogId");

                    b.ToTable("CompanyCallLogMapping","OPP");
                });

            modelBuilder.Entity("CRM.Models.CompanyDAO", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Address")
                        .HasColumnType("varchar(1000) CHARACTER SET utf8mb4")
                        .HasMaxLength(1000);

                    b.Property<long?>("AppUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CompanyStatusId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasComment("Ngày tạo");

                    b.Property<long>("CreatorId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CurrencyId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CustomerLeadId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime")
                        .HasComment("Ngày xoá");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .HasMaxLength(4000);

                    b.Property<long?>("DistrictId")
                        .HasColumnType("bigint");

                    b.Property<string>("Email")
                        .HasColumnType("varchar(500) CHARACTER SET utf8mb4")
                        .HasMaxLength(500);

                    b.Property<string>("EmailOther")
                        .HasColumnType("varchar(500) CHARACTER SET utf8mb4")
                        .HasMaxLength(500);

                    b.Property<string>("FAX")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<long?>("Level")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(500) CHARACTER SET utf8mb4")
                        .HasMaxLength(500);

                    b.Property<long?>("NationId")
                        .HasColumnType("bigint");

                    b.Property<long?>("NumberOfEmployee")
                        .HasColumnType("bigint");

                    b.Property<long?>("ParentId")
                        .HasColumnType("bigint");

                    b.Property<string>("Path")
                        .HasColumnType("varchar(400) CHARACTER SET utf8mb4")
                        .HasMaxLength(400);

                    b.Property<string>("Phone")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<string>("PhoneOther")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<long?>("ProfessionId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ProvinceId")
                        .HasColumnType("bigint");

                    b.Property<bool?>("RefuseReciveEmail")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("RefuseReciveSMS")
                        .HasColumnType("tinyint(1)");

                    b.Property<decimal?>("Revenue")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<Guid>("RowId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasComment("Ngày cập nhật");

                    b.Property<string>("Website")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<string>("ZIPCode")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("CompanyStatusId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("CustomerLeadId");

                    b.HasIndex("DistrictId");

                    b.HasIndex("NationId");

                    b.HasIndex("ParentId");

                    b.HasIndex("ProfessionId");

                    b.HasIndex("ProvinceId");

                    b.ToTable("Company","OPP");
                });

            modelBuilder.Entity("CRM.Models.CompanyEmailCCMappingDAO", b =>
                {
                    b.Property<long>("CompanyEmailId")
                        .HasColumnType("bigint");

                    b.Property<long>("AppUserId")
                        .HasColumnType("bigint");

                    b.HasKey("CompanyEmailId", "AppUserId");

                    b.HasIndex("AppUserId");

                    b.ToTable("CompanyEmailCCMapping","OPP");
                });

            modelBuilder.Entity("CRM.Models.CompanyEmailDAO", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long>("CompanyId")
                        .HasColumnType("bigint");

                    b.Property<string>("Content")
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .HasMaxLength(4000);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasComment("Ngày tạo");

                    b.Property<long>("CreatorId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime")
                        .HasComment("Ngày xoá");

                    b.Property<long>("EmailStatusId")
                        .HasColumnType("bigint");

                    b.Property<string>("Reciepient")
                        .IsRequired()
                        .HasColumnType("varchar(500) CHARACTER SET utf8mb4")
                        .HasMaxLength(500);

                    b.Property<string>("Title")
                        .HasColumnType("varchar(500) CHARACTER SET utf8mb4")
                        .HasMaxLength(500);

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasComment("Ngày cập nhật");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("EmailStatusId");

                    b.ToTable("CompanyEmail","OPP");
                });

            modelBuilder.Entity("CRM.Models.CompanyFileGroupingDAO", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long>("CompanyId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<long>("CreatorId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .HasMaxLength(4000);

                    b.Property<long>("FileTypeId")
                        .HasColumnType("bigint");

                    b.Property<Guid>("RowId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("varchar(500) CHARACTER SET utf8mb4")
                        .HasMaxLength(500);

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("FileTypeId");

                    b.ToTable("CompanyFileGrouping","OPP");
                });

            modelBuilder.Entity("CRM.Models.CompanyFileMappingDAO", b =>
                {
                    b.Property<long>("CompanyFileGroupingId")
                        .HasColumnType("bigint");

                    b.Property<long>("FileId")
                        .HasColumnType("bigint");

                    b.HasKey("CompanyFileGroupingId", "FileId")
                        .HasName("PK_AccountFileMapping");

                    b.HasIndex("FileId");

                    b.ToTable("CompanyFileMapping","OPP");
                });

            modelBuilder.Entity("CRM.Models.CompanyStatusDAO", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .HasColumnType("varchar(500) CHARACTER SET utf8mb4")
                        .HasComment("Mã quận huyện")
                        .HasMaxLength(500);

                    b.Property<string>("Name")
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("CompanyStatus","ENUM");
                });

            modelBuilder.Entity("CRM.Models.ConsultingServiceDAO", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("ConsultingService","ENUM");
                });

            modelBuilder.Entity("CRM.Models.ContactActivityDAO", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long?>("ActivityPriorityId")
                        .HasColumnType("bigint");

                    b.Property<long>("ActivityStatusId")
                        .HasColumnType("bigint");

                    b.Property<long>("ActivityTypeId")
                        .HasColumnType("bigint");

                    b.Property<string>("Address")
                        .HasColumnType("varchar(500) CHARACTER SET utf8mb4")
                        .HasMaxLength(500);

                    b.Property<long>("AppUserId")
                        .HasColumnType("bigint");

                    b.Property<long>("ContactId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .HasMaxLength(4000);

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("ToDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("ActivityPriorityId");

                    b.HasIndex("ActivityStatusId");

                    b.HasIndex("ActivityTypeId");

                    b.HasIndex("AppUserId");

                    b.HasIndex("ContactId");

                    b.ToTable("ContactActivity","OPP");
                });

            modelBuilder.Entity("CRM.Models.ContactCallLogMappingDAO", b =>
                {
                    b.Property<long>("ContactId")
                        .HasColumnType("bigint");

                    b.Property<long>("CallLogId")
                        .HasColumnType("bigint");

                    b.HasKey("ContactId", "CallLogId");

                    b.HasIndex("CallLogId");

                    b.ToTable("ContactCallLogMapping","OPP");
                });

            modelBuilder.Entity("CRM.Models.ContactDAO", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Address")
                        .HasColumnType("varchar(2000) CHARACTER SET utf8mb4")
                        .HasMaxLength(2000);

                    b.Property<long?>("AppUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CompanyId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ContactStatusId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasComment("Ngày tạo");

                    b.Property<long>("CreatorId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CustomerLeadId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime")
                        .HasComment("Ngày xoá");

                    b.Property<string>("Department")
                        .HasColumnType("varchar(500) CHARACTER SET utf8mb4")
                        .HasMaxLength(500);

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .HasMaxLength(4000);

                    b.Property<long?>("DistrictId")
                        .HasColumnType("bigint");

                    b.Property<string>("Email")
                        .HasColumnType("varchar(500) CHARACTER SET utf8mb4")
                        .HasMaxLength(500);

                    b.Property<string>("EmailOther")
                        .HasColumnType("varchar(500) CHARACTER SET utf8mb4")
                        .HasMaxLength(500);

                    b.Property<string>("FAX")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<long?>("ImageId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(500) CHARACTER SET utf8mb4")
                        .HasMaxLength(500);

                    b.Property<long?>("NationId")
                        .HasColumnType("bigint");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<string>("PhoneHome")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<long?>("PositionId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ProfessionId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ProvinceId")
                        .HasColumnType("bigint");

                    b.Property<bool?>("RefuseReciveEmail")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("RefuseReciveSMS")
                        .HasColumnType("tinyint(1)");

                    b.Property<long?>("SexId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasComment("Ngày cập nhật");

                    b.Property<string>("ZIPCode")
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("ContactStatusId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("CustomerLeadId");

                    b.HasIndex("DistrictId");

                    b.HasIndex("ImageId");

                    b.HasIndex("NationId");

                    b.HasIndex("PositionId");

                    b.HasIndex("ProfessionId");

                    b.HasIndex("ProvinceId");

                    b.HasIndex("SexId");

                    b.ToTable("Contact","OPP");
                });

            modelBuilder.Entity("CRM.Models.ContactEmailCCMappingDAO", b =>
                {
                    b.Property<long>("ContactEmailId")
                        .HasColumnType("bigint");

                    b.Property<long>("AppUserId")
                        .HasColumnType("bigint");

                    b.HasKey("ContactEmailId", "AppUserId");

                    b.HasIndex("AppUserId");

                    b.ToTable("ContactEmailCCMapping","OPP");
                });

            modelBuilder.Entity("CRM.Models.ContactEmailDAO", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long>("ContactId")
                        .HasColumnType("bigint");

                    b.Property<string>("Content")
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .HasMaxLength(4000);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasComment("Ngày tạo");

                    b.Property<long>("CreatorId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime")
                        .HasComment("Ngày xoá");

                    b.Property<long>("EmailStatusId")
                        .HasColumnType("bigint");

                    b.Property<string>("Reciepient")
                        .IsRequired()
                        .HasColumnType("varchar(500) CHARACTER SET utf8mb4")
                        .HasMaxLength(500);

                    b.Property<string>("Title")
                        .HasColumnType("varchar(500) CHARACTER SET utf8mb4")
                        .HasMaxLength(500);

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasComment("Ngày cập nhật");

                    b.HasKey("Id");

                    b.HasIndex("ContactId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("EmailStatusId");

                    b.ToTable("ContactEmail","OPP");
                });

            modelBuilder.Entity("CRM.Models.ContactFileGroupingDAO", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long>("ContactId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<long>("CreatorId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .HasMaxLength(4000);

                    b.Property<long>("FileTypeId")
                        .HasColumnType("bigint");

                    b.Property<Guid>("RowId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("varchar(500) CHARACTER SET utf8mb4")
                        .HasMaxLength(500);

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("ContactId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("FileTypeId");

                    b.ToTable("ContactFileGrouping","OPP");
                });

            modelBuilder.Entity("CRM.Models.ContactFileMappingDAO", b =>
                {
                    b.Property<long>("ContactFileGroupingId")
                        .HasColumnType("bigint");

                    b.Property<long>("FileId")
                        .HasColumnType("bigint");

                    b.HasKey("ContactFileGroupingId", "FileId");

                    b.HasIndex("FileId");

                    b.ToTable("ContactFileMapping","OPP");
                });

            modelBuilder.Entity("CRM.Models.ContactStatusDAO", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.ToTable("ContactStatus","ENUM");
                });

            modelBuilder.Entity("CRM.Models.ContractContactMappingDAO", b =>
                {
                    b.Property<long>("ContractId")
                        .HasColumnType("bigint");

                    b.Property<long>("ContactId")
                        .HasColumnType("bigint");

                    b.HasKey("ContractId", "ContactId");

                    b.HasIndex("ContactId");

                    b.ToTable("ContractContactMapping");
                });

            modelBuilder.Entity("CRM.Models.ContractDAO", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long>("AppUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.Property<long?>("CompanyId")
                        .HasColumnType("bigint");

                    b.Property<long>("ContractStatusId")
                        .HasColumnType("bigint");

                    b.Property<long>("ContractTypeId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<long>("CreatorId")
                        .HasColumnType("bigint");

                    b.Property<long>("CurrencyId")
                        .HasColumnType("bigint");

                    b.Property<long>("CustomerId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("DeliveryUnit")
                        .HasColumnType("varchar(500) CHARACTER SET utf8mb4")
                        .HasMaxLength(500);

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime");

                    b.Property<decimal?>("GeneralDiscountAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("GeneralDiscountPercentage")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("InvoiceAddress")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .HasMaxLength(4000);

                    b.Property<long?>("InvoiceDistrictId")
                        .HasColumnType("bigint");

                    b.Property<long?>("InvoiceNationId")
                        .HasColumnType("bigint");

                    b.Property<long?>("InvoiceProvinceId")
                        .HasColumnType("bigint");

                    b.Property<string>("InvoiceZipCode")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<string>("Name")
                        .HasColumnType("varchar(500) CHARACTER SET utf8mb4")
                        .HasMaxLength(500);

                    b.Property<long?>("OpportunityId")
                        .HasColumnType("bigint");

                    b.Property<long>("OrganizationId")
                        .HasColumnType("bigint");

                    b.Property<long>("PaymentStatusId")
                        .HasColumnType("bigint");

                    b.Property<string>("ReceiveAddress")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .HasMaxLength(4000);

                    b.Property<long?>("ReceiveDistrictId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ReceiveNationId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ReceiveProvinceId")
                        .HasColumnType("bigint");

                    b.Property<string>("ReceiveZipCode")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<decimal>("SubTotal")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("TermAndCondition")
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .HasMaxLength(4000);

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("TotalTaxAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("TotalTaxAmountOther")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("TotalValue")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("ValidityDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("ContractStatusId");

                    b.HasIndex("ContractTypeId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("InvoiceDistrictId");

                    b.HasIndex("InvoiceNationId");

                    b.HasIndex("InvoiceProvinceId");

                    b.HasIndex("OpportunityId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("PaymentStatusId");

                    b.HasIndex("ReceiveDistrictId");

                    b.HasIndex("ReceiveNationId");

                    b.HasIndex("ReceiveProvinceId");

                    b.ToTable("Contract");
                });

            modelBuilder.Entity("CRM.Models.ContractFileGroupingDAO", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long>("ContractId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<long>("CreatorId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .HasMaxLength(4000);

                    b.Property<long>("FileTypeId")
                        .HasColumnType("bigint");

                    b.Property<Guid>("RowId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("varchar(500) CHARACTER SET utf8mb4")
                        .HasMaxLength(500);

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("ContractId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("FileTypeId");

                    b.ToTable("ContractFileGrouping");
                });

            modelBuilder.Entity("CRM.Models.ContractFileMappingDAO", b =>
                {
                    b.Property<long>("ContractFileGroupingId")
                        .HasColumnType("bigint");

                    b.Property<long>("FileId")
                        .HasColumnType("bigint");

                    b.HasKey("ContractFileGroupingId", "FileId");

                    b.HasIndex("FileId");

                    b.ToTable("ContractFileMapping");
                });

            modelBuilder.Entity("CRM.Models.ContractItemDetailDAO", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long>("ContractId")
                        .HasColumnType("bigint");

                    b.Property<decimal?>("DiscountAmount")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<decimal?>("DiscountPercentage")
                        .HasColumnType("decimal(8, 2)");

                    b.Property<long?>("Factor")
                        .HasColumnType("bigint");

                    b.Property<decimal?>("GeneralDiscountAmount")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<decimal?>("GeneralDiscountPercentage")
                        .HasColumnType("decimal(8, 2)");

                    b.Property<long>("ItemId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("PrimaryPrice")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<long>("PrimaryUnitOfMeasureId")
                        .HasColumnType("bigint");

                    b.Property<long>("Quantity")
                        .HasColumnType("bigint");

                    b.Property<long>("RequestQuantity")
                        .HasColumnType("bigint");

                    b.Property<decimal>("SalePrice")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("TaxAmount")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<decimal?>("TaxAmountOther")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<decimal?>("TaxPercentage")
                        .HasColumnType("decimal(8, 2)");

                    b.Property<decimal?>("TaxPercentageOther")
                        .HasColumnType("decimal(8, 2)");

                    b.Property<long>("TaxTypeId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<long>("UnitOfMeasureId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ContractId");

                    b.HasIndex("ItemId");

                    b.HasIndex("PrimaryUnitOfMeasureId");

                    b.HasIndex("TaxTypeId");

                    b.HasIndex("UnitOfMeasureId");

                    b.ToTable("ContractItemDetail");
                });

            modelBuilder.Entity("CRM.Models.ContractPaymentHistoryDAO", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long>("ContractId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .HasMaxLength(4000);

                    b.Property<bool?>("IsPaid")
                        .HasColumnType("tinyint(1)");

                    b.Property<decimal?>("PaymentAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("PaymentMilestone")
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .HasMaxLength(4000);

                    b.Property<decimal?>("PaymentPercentage")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("ContractId");

                    b.ToTable("ContractPaymentHistory");
                });

            modelBuilder.Entity("CRM.Models.ContractStatusDAO", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.Property<string>("Name")
                        .HasColumnType("varchar(500) CHARACTER SET utf8mb4")
                        .HasMaxLength(500);

                    b.HasKey("Id");

                    b.ToTable("ContractStatus","ENUM");
                });

            modelBuilder.Entity("CRM.Models.ContractTypeDAO", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.Property<string>("Name")
                        .HasColumnType("varchar(500) CHARACTER SET utf8mb4")
                        .HasMaxLength(500);

                    b.HasKey("Id");

                    b.ToTable("ContractType","ENUM");
                });

            modelBuilder.Entity("CRM.Models.CooperativeAttitudeDAO", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("CooperativeAttitude","ENUM");
                });

            modelBuilder.Entity("CRM.Models.CurrencyDAO", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("Currency","ENUM");
                });

            modelBuilder.Entity("CRM.Models.CustomerCCEmailHistoryDAO", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("CCEmail")
                        .IsRequired()
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<long>("CustomerEmailHistoryId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CustomerEmailHistoryId");

                    b.ToTable("CustomerCCEmailHistory","CUSTOMER");
                });

            modelBuilder.Entity("CRM.Models.CustomerCallLogMappingDAO", b =>
                {
                    b.Property<long>("CustomerId")
                        .HasColumnType("bigint");

                    b.Property<long>("CallLogId")
                        .HasColumnType("bigint");

                    b.HasKey("CustomerId", "CallLogId");

                    b.HasIndex("CallLogId");

                    b.ToTable("CustomerCallLogMapping","CUSTOMER");
                });

            modelBuilder.Entity("CRM.Models.CustomerCustomerGroupingMappingDAO", b =>
                {
                    b.Property<long>("CustomerId")
                        .HasColumnType("bigint");

                    b.Property<long>("CustomerGroupingId")
                        .HasColumnType("bigint");

                    b.HasKey("CustomerId", "CustomerGroupingId");

                    b.HasIndex("CustomerGroupingId");

                    b.ToTable("CustomerCustomerGroupingMapping","CUSTOMER");
                });

            modelBuilder.Entity("CRM.Models.CustomerDAO", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Address")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<long>("AppUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("Birthday")
                        .HasColumnType("datetime");

                    b.Property<long?>("BusinessTypeId")
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .HasColumnType("varchar(500) CHARACTER SET utf8mb4")
                        .HasMaxLength(500);

                    b.Property<long?>("CompanyId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasComment("Ngày tạo");

                    b.Property<long>("CreatorId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CustomerResourceId")
                        .HasColumnType("bigint");

                    b.Property<long>("CustomerTypeId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime")
                        .HasComment("Ngày xoá");

                    b.Property<string>("Descreption")
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .HasMaxLength(4000);

                    b.Property<long?>("DistrictId")
                        .HasColumnType("bigint");

                    b.Property<string>("Email")
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<string>("Fax")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<decimal?>("Investment")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<bool?>("IsSupplier")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(400) CHARACTER SET utf8mb4")
                        .HasMaxLength(400);

                    b.Property<long?>("NationId")
                        .HasColumnType("bigint");

                    b.Property<long?>("NumberOfEmployee")
                        .HasColumnType("bigint");

                    b.Property<long?>("ParentCompanyId")
                        .HasColumnType("bigint");

                    b.Property<string>("Phone")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<long?>("ProfessionId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ProvinceId")
                        .HasColumnType("bigint");

                    b.Property<decimal?>("RevenueAnnual")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<Guid>("RowId")
                        .HasColumnType("char(36)");

                    b.Property<long?>("SexId")
                        .HasColumnType("bigint");

                    b.Property<long>("StatusId")
                        .HasColumnType("bigint");

                    b.Property<string>("TaxCode")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasComment("Ngày cập nhật");

                    b.Property<bool>("Used")
                        .HasColumnType("tinyint(1)");

                    b.Property<long?>("WardId")
                        .HasColumnType("bigint");

                    b.Property<string>("Website")
                        .HasColumnType("varchar(500) CHARACTER SET utf8mb4")
                        .HasMaxLength(500);

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("BusinessTypeId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("CustomerResourceId");

                    b.HasIndex("CustomerTypeId");

                    b.HasIndex("DistrictId");

                    b.HasIndex("NationId");

                    b.HasIndex("ParentCompanyId");

                    b.HasIndex("ProfessionId");

                    b.HasIndex("ProvinceId");

                    b.HasIndex("SexId");

                    b.HasIndex("StatusId");

                    b.HasIndex("WardId");

                    b.ToTable("Customer","CUSTOMER");
                });

            modelBuilder.Entity("CRM.Models.CustomerEmailDAO", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long>("CustomerId")
                        .HasColumnType("bigint");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<long>("EmailTypeId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("EmailTypeId");

                    b.ToTable("CustomerEmail","CUSTOMER");
                });

            modelBuilder.Entity("CRM.Models.CustomerEmailHistoryDAO", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Content")
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .HasMaxLength(4000);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasComment("Ngày tạo");

                    b.Property<long>("CreatorId")
                        .HasColumnType("bigint");

                    b.Property<long>("CustomerId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime")
                        .HasComment("Ngày xoá");

                    b.Property<long>("EmailStatusId")
                        .HasColumnType("bigint");

                    b.Property<string>("Reciepient")
                        .IsRequired()
                        .HasColumnType("varchar(500) CHARACTER SET utf8mb4")
                        .HasMaxLength(500);

                    b.Property<string>("Title")
                        .HasColumnType("varchar(500) CHARACTER SET utf8mb4")
                        .HasMaxLength(500);

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasComment("Ngày cập nhật");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("EmailStatusId");

                    b.ToTable("CustomerEmailHistory","CUSTOMER");
                });

            modelBuilder.Entity("CRM.Models.CustomerFeedbackDAO", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Content")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasComment("Ngày tạo");

                    b.Property<long?>("CustomerFeedbackTypeId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CustomerId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime")
                        .HasComment("Ngày xoá");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(500) CHARACTER SET utf8mb4")
                        .HasMaxLength(500);

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("varchar(500) CHARACTER SET utf8mb4")
                        .HasMaxLength(500);

                    b.Property<bool>("IsSystemCustomer")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("SendDate")
                        .HasColumnType("datetime");

                    b.Property<long?>("StatusId")
                        .HasColumnType("bigint");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasComment("Ngày cập nhật");

                    b.HasKey("Id");

                    b.HasIndex("CustomerFeedbackTypeId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("StatusId");

                    b.ToTable("CustomerFeedback","CUSTOMER");
                });

            modelBuilder.Entity("CRM.Models.CustomerFeedbackTypeDAO", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(500) CHARACTER SET utf8mb4")
                        .HasMaxLength(500);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(500) CHARACTER SET utf8mb4")
                        .HasMaxLength(500);

                    b.HasKey("Id");

                    b.ToTable("CustomerFeedbackType","ENUM");
                });

            modelBuilder.Entity("CRM.Models.CustomerGroupingDAO", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(500) CHARACTER SET utf8mb4")
                        .HasMaxLength(500);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasComment("Ngày tạo");

                    b.Property<long>("CustomerTypeId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime")
                        .HasComment("Ngày xoá");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(2000) CHARACTER SET utf8mb4")
                        .HasMaxLength(2000);

                    b.Property<long>("Level")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(500) CHARACTER SET utf8mb4")
                        .HasMaxLength(500);

                    b.Property<long?>("ParentId")
                        .HasColumnType("bigint");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("varchar(400) CHARACTER SET utf8mb4")
                        .HasMaxLength(400);

                    b.Property<long>("StatusId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasComment("Ngày cập nhật");

                    b.HasKey("Id");

                    b.HasIndex("CustomerTypeId");

                    b.HasIndex("ParentId");

                    b.HasIndex("StatusId");

                    b.ToTable("CustomerGrouping","MDM");
                });

            modelBuilder.Entity("CRM.Models.CustomerLeadActivityDAO", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long?>("ActivityPriorityId")
                        .HasColumnType("bigint");

                    b.Property<long>("ActivityStatusId")
                        .HasColumnType("bigint");

                    b.Property<long>("ActivityTypeId")
                        .HasColumnType("bigint");

                    b.Property<string>("Address")
                        .HasColumnType("varchar(500) CHARACTER SET utf8mb4")
                        .HasMaxLength(500);

                    b.Property<long>("AppUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<long>("CustomerLeadId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .HasMaxLength(4000);

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("ToDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("ActivityPriorityId");

                    b.HasIndex("ActivityStatusId");

                    b.HasIndex("ActivityTypeId");

                    b.HasIndex("AppUserId");

                    b.HasIndex("CustomerLeadId");

                    b.ToTable("CustomerLeadActivity","OPP");
                });

            modelBuilder.Entity("CRM.Models.CustomerLeadCallLogMappingDAO", b =>
                {
                    b.Property<long>("CustomerLeadId")
                        .HasColumnType("bigint");

                    b.Property<long>("CallLogId")
                        .HasColumnType("bigint");

                    b.HasKey("CustomerLeadId", "CallLogId");

                    b.HasIndex("CallLogId");

                    b.ToTable("CustomerLeadCallLogMapping","OPP");
                });

            modelBuilder.Entity("CRM.Models.CustomerLeadDAO", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Address")
                        .HasColumnType("varchar(400) CHARACTER SET utf8mb4")
                        .HasMaxLength(400);

                    b.Property<long?>("AppUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("BusinessRegistrationCode")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<long?>("CampaignId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CompanyId")
                        .HasColumnType("bigint");

                    b.Property<string>("CompanyName")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<long>("CreatorId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CurrencyId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CustomerLeadLevelId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CustomerLeadSourceId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CustomerLeadStatusId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .HasMaxLength(4000);

                    b.Property<long?>("DistrictId")
                        .HasColumnType("bigint");

                    b.Property<string>("Email")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.Property<long?>("EmployeeQuantity")
                        .HasColumnType("bigint");

                    b.Property<string>("Fax")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.Property<long?>("NationId")
                        .HasColumnType("bigint");

                    b.Property<string>("Phone")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.Property<long?>("ProfessionId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ProvinceId")
                        .HasColumnType("bigint");

                    b.Property<bool?>("RefuseReciveEmail")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("RefuseReciveSMS")
                        .HasColumnType("tinyint(1)");

                    b.Property<decimal?>("Revenue")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<Guid>("RowId")
                        .HasColumnType("char(36)");

                    b.Property<string>("SecondEmail")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.Property<long?>("SexId")
                        .HasColumnType("bigint");

                    b.Property<string>("TelePhone")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Website")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.Property<string>("ZipCode")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("CustomerLeadLevelId");

                    b.HasIndex("CustomerLeadSourceId");

                    b.HasIndex("CustomerLeadStatusId");

                    b.HasIndex("DistrictId");

                    b.HasIndex("NationId");

                    b.HasIndex("ProfessionId");

                    b.HasIndex("ProvinceId");

                    b.HasIndex("SexId");

                    b.ToTable("CustomerLead","OPP");
                });

            modelBuilder.Entity("CRM.Models.CustomerLeadEmailCCMappingDAO", b =>
                {
                    b.Property<long>("CustomerLeadEmailId")
                        .HasColumnType("bigint");

                    b.Property<long>("AppUserId")
                        .HasColumnType("bigint");

                    b.HasKey("CustomerLeadEmailId", "AppUserId")
                        .HasName("PK_CustomerEmailCCMapping");

                    b.HasIndex("AppUserId");

                    b.ToTable("CustomerLeadEmailCCMapping","OPP");
                });

            modelBuilder.Entity("CRM.Models.CustomerLeadEmailDAO", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Content")
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .HasMaxLength(4000);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasComment("Ngày tạo");

                    b.Property<long>("CreatorId")
                        .HasColumnType("bigint");

                    b.Property<long>("CustomerLeadId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime")
                        .HasComment("Ngày xoá");

                    b.Property<long>("EmailStatusId")
                        .HasColumnType("bigint");

                    b.Property<string>("Reciepient")
                        .IsRequired()
                        .HasColumnType("varchar(500) CHARACTER SET utf8mb4")
                        .HasMaxLength(500);

                    b.Property<string>("Title")
                        .HasColumnType("varchar(500) CHARACTER SET utf8mb4")
                        .HasMaxLength(500);

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasComment("Ngày cập nhật");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("CustomerLeadId");

                    b.HasIndex("EmailStatusId");

                    b.ToTable("CustomerLeadEmail","OPP");
                });

            modelBuilder.Entity("CRM.Models.CustomerLeadFileGroupDAO", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasComment("Id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasComment("Ngày tạo");

                    b.Property<long>("CreatorId")
                        .HasColumnType("bigint");

                    b.Property<long>("CustomerLeadId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime")
                        .HasComment("Ngày xoá");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .HasComment("Tên")
                        .HasMaxLength(4000);

                    b.Property<long>("FileTypeId")
                        .HasColumnType("bigint");

                    b.Property<Guid>("RowId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .HasComment("Tên")
                        .HasMaxLength(4000);

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasComment("Ngày cập nhật");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("CustomerLeadId");

                    b.HasIndex("FileTypeId");

                    b.ToTable("CustomerLeadFileGroup","OPP");
                });

            modelBuilder.Entity("CRM.Models.CustomerLeadFileMappingDAO", b =>
                {
                    b.Property<long>("CustomerLeadFileGroupId")
                        .HasColumnType("bigint");

                    b.Property<long>("FileId")
                        .HasColumnType("bigint");

                    b.HasKey("CustomerLeadFileGroupId", "FileId");

                    b.HasIndex("FileId");

                    b.ToTable("CustomerLeadFileMapping","OPP");
                });

            modelBuilder.Entity("CRM.Models.CustomerLeadItemMappingDAO", b =>
                {
                    b.Property<long>("CustomerLeadId")
                        .HasColumnType("bigint");

                    b.Property<long>("ItemId")
                        .HasColumnType("bigint");

                    b.Property<decimal?>("Discount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("DiscountPercentage")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<long?>("Factor")
                        .HasColumnType("bigint");

                    b.Property<decimal>("PrimaryPrice")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<long>("Quantity")
                        .HasColumnType("bigint");

                    b.Property<decimal>("RequestQuantity")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("SalePrice")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<long>("UnitOfMeasureId")
                        .HasColumnType("bigint");

                    b.Property<decimal?>("VAT")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("VATOther")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("CustomerLeadId", "ItemId");

                    b.HasIndex("ItemId");

                    b.HasIndex("UnitOfMeasureId");

                    b.ToTable("CustomerLeadItemMapping","OPP");
                });

            modelBuilder.Entity("CRM.Models.CustomerLeadLevelDAO", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.ToTable("CustomerLeadLevel","ENUM");
                });

            modelBuilder.Entity("CRM.Models.CustomerLeadSourceDAO", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.ToTable("CustomerLeadSource","ENUM");
                });

            modelBuilder.Entity("CRM.Models.CustomerLeadStatusDAO", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.ToTable("CustomerLeadStatus","ENUM");
                });

            modelBuilder.Entity("CRM.Models.CustomerLevelDAO", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(500) CHARACTER SET utf8mb4")
                        .HasMaxLength(500);

                    b.Property<string>("Color")
                        .HasColumnType("varchar(500) CHARACTER SET utf8mb4")
                        .HasMaxLength(500);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasComment("Ngày tạo");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime")
                        .HasComment("Ngày xoá");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(2000) CHARACTER SET utf8mb4")
                        .HasMaxLength(2000);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(500) CHARACTER SET utf8mb4")
                        .HasMaxLength(500);

                    b.Property<long>("PointFrom")
                        .HasColumnType("bigint");

                    b.Property<long>("PointTo")
                        .HasColumnType("bigint");

                    b.Property<Guid>("RowId")
                        .HasColumnType("char(36)");

                    b.Property<long>("StatusId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasComment("Ngày cập nhật");

                    b.Property<bool>("Used")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.HasIndex("StatusId");

                    b.ToTable("CustomerLevel","MDM");
                });

            modelBuilder.Entity("CRM.Models.CustomerPhoneDAO", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long>("CustomerId")
                        .HasColumnType("bigint");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<long>("PhoneTypeId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("PhoneTypeId");

                    b.ToTable("CustomerPhone","CUSTOMER");
                });

            modelBuilder.Entity("CRM.Models.CustomerPointHistoryDAO", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long>("ChangePoint")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<long>("CurrentPoint")
                        .HasColumnType("bigint");

                    b.Property<long>("CustomerId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(2000) CHARACTER SET utf8mb4")
                        .HasMaxLength(2000);

                    b.Property<bool>("IsIncrease")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("ReduceTotal")
                        .HasColumnType("tinyint(1)");

                    b.Property<long>("TotalPoint")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("CustomerPointHistory","CUSTOMER");
                });

            modelBuilder.Entity("CRM.Models.CustomerResourceDAO", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(500) CHARACTER SET utf8mb4")
                        .HasMaxLength(500);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasComment("Ngày tạo");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime")
                        .HasComment("Ngày xoá");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(2000) CHARACTER SET utf8mb4")
                        .HasMaxLength(2000);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(500) CHARACTER SET utf8mb4")
                        .HasMaxLength(500);

                    b.Property<Guid>("RowId")
                        .HasColumnType("char(36)");

                    b.Property<long>("StatusId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasComment("Ngày cập nhật");

                    b.Property<bool>("Used")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.HasIndex("StatusId");

                    b.ToTable("CustomerResource","MDM");
                });

            modelBuilder.Entity("CRM.Models.CustomerSalesOrderContentDAO", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<long>("CustomerSalesOrderId")
                        .HasColumnType("bigint");

                    b.Property<decimal?>("DiscountAmount")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<decimal?>("DiscountPercentage")
                        .HasColumnType("decimal(8, 2)");

                    b.Property<long>("EditedPriceStatusId")
                        .HasColumnType("bigint");

                    b.Property<long?>("Factor")
                        .HasColumnType("bigint");

                    b.Property<decimal?>("GeneralDiscountAmount")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<decimal?>("GeneralDiscountPercentage")
                        .HasColumnType("decimal(8, 2)");

                    b.Property<long>("ItemId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("PrimaryPrice")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<long>("PrimaryUnitOfMeasureId")
                        .HasColumnType("bigint");

                    b.Property<long>("Quantity")
                        .HasColumnType("bigint");

                    b.Property<long>("RequestedQuantity")
                        .HasColumnType("bigint");

                    b.Property<decimal>("SalePrice")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<decimal?>("TaxAmount")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<decimal?>("TaxAmountOther")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<decimal?>("TaxPercentage")
                        .HasColumnType("decimal(8, 2)");

                    b.Property<decimal?>("TaxPercentageOther")
                        .HasColumnType("decimal(8, 2)");

                    b.Property<long>("TaxTypeId")
                        .HasColumnType("bigint");

                    b.Property<long>("UnitOfMeasureId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CustomerSalesOrderId");

                    b.HasIndex("EditedPriceStatusId");

                    b.HasIndex("ItemId");

                    b.HasIndex("PrimaryUnitOfMeasureId");

                    b.HasIndex("TaxTypeId");

                    b.HasIndex("UnitOfMeasureId");

                    b.ToTable("CustomerSalesOrderContent","ORDER");
                });

            modelBuilder.Entity("CRM.Models.CustomerSalesOrderDAO", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<long?>("ContractId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<long>("CreatorId")
                        .HasColumnType("bigint");

                    b.Property<long>("CustomerId")
                        .HasColumnType("bigint");

                    b.Property<long>("CustomerTypeId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("DeliveryAddress")
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .HasMaxLength(4000);

                    b.Property<DateTime?>("DeliveryDate")
                        .HasColumnType("datetime");

                    b.Property<long?>("DeliveryDistrictId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeliveryNationId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeliveryProvinceId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeliveryWardId")
                        .HasColumnType("bigint");

                    b.Property<string>("DeliveryZIPCode")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<long>("EditedPriceStatusId")
                        .HasColumnType("bigint");

                    b.Property<decimal?>("GeneralDiscountAmount")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<decimal?>("GeneralDiscountPercentage")
                        .HasColumnType("decimal(8, 2)");

                    b.Property<string>("InvoiceAddress")
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .HasMaxLength(4000);

                    b.Property<long?>("InvoiceDistrictId")
                        .HasColumnType("bigint");

                    b.Property<long?>("InvoiceNationId")
                        .HasColumnType("bigint");

                    b.Property<long?>("InvoiceProvinceId")
                        .HasColumnType("bigint");

                    b.Property<long?>("InvoiceWardId")
                        .HasColumnType("bigint");

                    b.Property<string>("InvoiceZIPCode")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<string>("Note")
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .HasMaxLength(4000);

                    b.Property<long?>("OpportunityId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime");

                    b.Property<long?>("OrderPaymentStatusId")
                        .HasColumnType("bigint");

                    b.Property<long>("OrganizationId")
                        .HasColumnType("bigint");

                    b.Property<long?>("RequestStateId")
                        .HasColumnType("bigint");

                    b.Property<Guid>("RowId")
                        .HasColumnType("char(36)");

                    b.Property<long>("SalesEmployeeId")
                        .HasColumnType("bigint");

                    b.Property<string>("ShippingName")
                        .HasColumnType("varchar(500) CHARACTER SET utf8mb4")
                        .HasMaxLength(500);

                    b.Property<decimal>("SubTotal")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<decimal>("TotalTax")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<decimal>("TotalTaxOther")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("ContractId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("CustomerTypeId");

                    b.HasIndex("DeliveryDistrictId");

                    b.HasIndex("DeliveryNationId");

                    b.HasIndex("DeliveryProvinceId");

                    b.HasIndex("DeliveryWardId");

                    b.HasIndex("EditedPriceStatusId");

                    b.HasIndex("InvoiceDistrictId");

                    b.HasIndex("InvoiceNationId");

                    b.HasIndex("InvoiceProvinceId");

                    b.HasIndex("InvoiceWardId");

                    b.HasIndex("OpportunityId");

                    b.HasIndex("OrderPaymentStatusId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("RequestStateId");

                    b.HasIndex("SalesEmployeeId");

                    b.ToTable("CustomerSalesOrder","ORDER");
                });

            modelBuilder.Entity("CRM.Models.CustomerSalesOrderPaymentHistoryDAO", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<long>("CustomerSalesOrderId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .HasMaxLength(4000);

                    b.Property<bool?>("IsPaid")
                        .HasColumnType("tinyint(1)");

                    b.Property<decimal?>("PaymentAmount")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<string>("PaymentMilestone")
                        .HasColumnType("varchar(400) CHARACTER SET utf8mb4")
                        .HasMaxLength(400);

                    b.Property<decimal?>("PaymentPercentage")
                        .HasColumnType("decimal(8, 2)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("CustomerSalesOrderId");

                    b.ToTable("CustomerSalesOrderPaymentHistory","ORDER");
                });

            modelBuilder.Entity("CRM.Models.CustomerSalesOrderPromotionDAO", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long>("CustomerSalesOrderId")
                        .HasColumnType("bigint");

                    b.Property<long?>("Factor")
                        .HasColumnType("bigint");

                    b.Property<long>("ItemId")
                        .HasColumnType("bigint");

                    b.Property<string>("Note")
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .HasMaxLength(4000);

                    b.Property<long>("PrimaryUnitOfMeasureId")
                        .HasColumnType("bigint");

                    b.Property<long>("Quantity")
                        .HasColumnType("bigint");

                    b.Property<long>("RequestedQuantity")
                        .HasColumnType("bigint");

                    b.Property<long>("UnitOfMeasureId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CustomerSalesOrderId");

                    b.HasIndex("ItemId");

                    b.HasIndex("PrimaryUnitOfMeasureId");

                    b.HasIndex("UnitOfMeasureId");

                    b.ToTable("CustomerSalesOrderPromotion","ORDER");
                });

            modelBuilder.Entity("CRM.Models.CustomerTypeDAO", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(500) CHARACTER SET utf8mb4")
                        .HasMaxLength(500);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(500) CHARACTER SET utf8mb4")
                        .HasMaxLength(500);

                    b.HasKey("Id");

                    b.ToTable("CustomerType","ENUM");
                });

            modelBuilder.Entity("CRM.Models.DirectSalesOrderContentDAO", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<long>("DirectSalesOrderId")
                        .HasColumnType("bigint");

                    b.Property<decimal?>("DiscountAmount")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<decimal?>("DiscountPercentage")
                        .HasColumnType("decimal(8, 2)");

                    b.Property<long>("EditedPriceStatusId")
                        .HasColumnType("bigint");

                    b.Property<long?>("Factor")
                        .HasColumnType("bigint");

                    b.Property<decimal?>("GeneralDiscountAmount")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<decimal?>("GeneralDiscountPercentage")
                        .HasColumnType("decimal(8, 2)");

                    b.Property<long>("ItemId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("PrimaryPrice")
                        .HasColumnType("decimal(18, 4)")
                        .HasComment("Giá theo đơn vị lưu kho");

                    b.Property<long>("PrimaryUnitOfMeasureId")
                        .HasColumnType("bigint");

                    b.Property<long>("Quantity")
                        .HasColumnType("bigint");

                    b.Property<long>("RequestedQuantity")
                        .HasColumnType("bigint");

                    b.Property<decimal>("SalePrice")
                        .HasColumnType("decimal(18, 4)")
                        .HasComment("Giá bán theo đơn vị xuất hàng");

                    b.Property<decimal?>("TaxAmount")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<decimal?>("TaxPercentage")
                        .HasColumnType("decimal(8, 2)");

                    b.Property<long>("UnitOfMeasureId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("DirectSalesOrderId");

                    b.HasIndex("EditedPriceStatusId");

                    b.HasIndex("ItemId");

                    b.HasIndex("PrimaryUnitOfMeasureId");

                    b.HasIndex("UnitOfMeasureId");

                    b.ToTable("DirectSalesOrderContent","ORDER");
                });

            modelBuilder.Entity("CRM.Models.DirectSalesOrderDAO", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasComment("Id");

                    b.Property<long>("BuyerStoreId")
                        .HasColumnType("bigint")
                        .HasComment("Cửa hàng mua");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasComment("Mã đơn hàng")
                        .HasMaxLength(50);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<long>("CreatorId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("DeliveryAddress")
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .HasComment("Địa chỉ giao hàng")
                        .HasMaxLength(4000);

                    b.Property<DateTime?>("DeliveryDate")
                        .HasColumnType("datetime")
                        .HasComment("Ngày giao hàng");

                    b.Property<long>("EditedPriceStatusId")
                        .HasColumnType("bigint")
                        .HasComment("Sửa giá");

                    b.Property<decimal?>("GeneralDiscountAmount")
                        .HasColumnType("decimal(18, 4)")
                        .HasComment("Số tiền chiết khấu tổng");

                    b.Property<decimal?>("GeneralDiscountPercentage")
                        .HasColumnType("decimal(8, 2)")
                        .HasComment("% chiết khấu tổng");

                    b.Property<string>("Note")
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .HasComment("Ghi chú")
                        .HasMaxLength(4000);

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime")
                        .HasComment("Ngày đặt hàng");

                    b.Property<long>("OrganizationId")
                        .HasColumnType("bigint");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasComment("Số điện thoại")
                        .HasMaxLength(50);

                    b.Property<string>("PromotionCode")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<decimal?>("PromotionValue")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<long>("RequestStateId")
                        .HasColumnType("bigint");

                    b.Property<Guid>("RowId")
                        .HasColumnType("char(36)")
                        .HasComment("Id global cho phê duyệt");

                    b.Property<long>("SaleEmployeeId")
                        .HasColumnType("bigint")
                        .HasComment("Nhân viên kinh doanh");

                    b.Property<string>("StoreAddress")
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .HasMaxLength(4000);

                    b.Property<decimal>("SubTotal")
                        .HasColumnType("decimal(18, 4)")
                        .HasComment("Tổng tiền trước thuế");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(18, 4)")
                        .HasComment("Tổng tiền sau thuế");

                    b.Property<decimal>("TotalAfterTax")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<decimal>("TotalTaxAmount")
                        .HasColumnType("decimal(18, 4)")
                        .HasComment("Tổng thuế");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("BuyerStoreId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("EditedPriceStatusId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("RequestStateId");

                    b.HasIndex("SaleEmployeeId");

                    b.ToTable("DirectSalesOrder","ORDER");
                });

            modelBuilder.Entity("CRM.Models.DirectSalesOrderPromotionDAO", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<long>("DirectSalesOrderId")
                        .HasColumnType("bigint");

                    b.Property<long?>("Factor")
                        .HasColumnType("bigint");

                    b.Property<long>("ItemId")
                        .HasColumnType("bigint");

                    b.Property<string>("Note")
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .HasMaxLength(4000);

                    b.Property<long>("PrimaryUnitOfMeasureId")
                        .HasColumnType("bigint");

                    b.Property<long>("Quantity")
                        .HasColumnType("bigint");

                    b.Property<long>("RequestedQuantity")
                        .HasColumnType("bigint");

                    b.Property<long>("UnitOfMeasureId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("DirectSalesOrderId");

                    b.HasIndex("ItemId");

                    b.HasIndex("PrimaryUnitOfMeasureId");

                    b.HasIndex("UnitOfMeasureId");

                    b.ToTable("DirectSalesOrderPromotion","ORDER");
                });

            modelBuilder.Entity("CRM.Models.DistrictDAO", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasComment("Id");

                    b.Property<string>("Code")
                        .HasColumnType("varchar(500) CHARACTER SET utf8mb4")
                        .HasComment("Mã quận huyện")
                        .HasMaxLength(500);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasComment("Ngày tạo");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime")
                        .HasComment("Ngày xoá");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(500) CHARACTER SET utf8mb4")
                        .HasComment("Tên quận huyện")
                        .HasMaxLength(500);

                    b.Property<long?>("Priority")
                        .HasColumnType("bigint")
                        .HasComment("Thứ tự ưu tiên");

                    b.Property<long>("ProvinceId")
                        .HasColumnType("bigint")
                        .HasComment("Tỉnh phụ thuộc");

                    b.Property<Guid>("RowId")
                        .HasColumnType("char(36)")
                        .HasComment("Trường để đồng bộ");

                    b.Property<long>("StatusId")
                        .HasColumnType("bigint")
                        .HasComment("Trạng thái hoạt động");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasComment("Ngày cập nhật");

                    b.Property<bool>("Used")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.HasIndex("ProvinceId");

                    b.HasIndex("StatusId");

                    b.ToTable("District","MDM");
                });

            modelBuilder.Entity("CRM.Models.EditedPriceStatusDAO", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("EditedPriceStatus","ENUM");
                });

            modelBuilder.Entity("CRM.Models.EmailStatusDAO", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(500) CHARACTER SET utf8mb4")
                        .HasMaxLength(500);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(500) CHARACTER SET utf8mb4")
                        .HasMaxLength(500);

                    b.HasKey("Id");

                    b.ToTable("EmailStatus","ENUM");
                });

            modelBuilder.Entity("CRM.Models.EmailTypeDAO", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("EmailType","ENUM");
                });

            modelBuilder.Entity("CRM.Models.EntityReferenceDAO", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(500) CHARACTER SET utf8mb4")
                        .HasMaxLength(500);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(500) CHARACTER SET utf8mb4")
                        .HasMaxLength(500);

                    b.HasKey("Id");

                    b.ToTable("EntityReference","ENUM");
                });

            modelBuilder.Entity("CRM.Models.EventMessageDAO", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("EntityName")
                        .IsRequired()
                        .HasColumnType("varchar(500) CHARACTER SET utf8mb4")
                        .HasMaxLength(500);

                    b.Property<string>("RoutingKey")
                        .IsRequired()
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<Guid>("RowId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("EventMessage","MDM");
                });

            modelBuilder.Entity("CRM.Models.F1_ResourceActionPageMappingDAO", b =>
                {
                    b.Property<string>("PageCode")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("ActionCode")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("ResourceCode")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("PageCode");

                    b.ToTable("F1_ResourceActionPageMapping");
                });

            modelBuilder.Entity("CRM.Models.FieldDAO", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long>("FieldTypeId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<long>("MenuId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(500) CHARACTER SET utf8mb4")
                        .HasMaxLength(500);

                    b.HasKey("Id");

                    b.HasIndex("FieldTypeId");

                    b.HasIndex("MenuId");

                    b.ToTable("Field","PER");
                });

            modelBuilder.Entity("CRM.Models.FieldTypeDAO", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("FieldType","PER");
                });

            modelBuilder.Entity("CRM.Models.FileDAO", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasComment("Id");

                    b.Property<long?>("AppUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasComment("Ngày tạo");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime")
                        .HasComment("Ngày xoá");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .HasComment("Tên")
                        .HasMaxLength(4000);

                    b.Property<Guid>("RowId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasComment("Ngày cập nhật");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .HasComment("Đường dẫn Url")
                        .HasMaxLength(4000);

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.ToTable("File");
                });

            modelBuilder.Entity("CRM.Models.FileTypeDAO", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasComment("Id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasComment("Tên")
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(500) CHARACTER SET utf8mb4")
                        .HasComment("Tên")
                        .HasMaxLength(500);

                    b.HasKey("Id");

                    b.ToTable("FileType","ENUM");
                });

            modelBuilder.Entity("CRM.Models.ImageDAO", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasComment("Id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasComment("Ngày tạo");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime")
                        .HasComment("Ngày xoá");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .HasComment("Tên")
                        .HasMaxLength(4000);

                    b.Property<Guid>("RowId")
                        .HasColumnType("char(36)");

                    b.Property<string>("ThumbnailUrl")
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .HasComment("Đường dẫn Url")
                        .HasMaxLength(4000);

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasComment("Ngày cập nhật");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .HasComment("Đường dẫn Url")
                        .HasMaxLength(4000);

                    b.HasKey("Id");

                    b.ToTable("Image","MDM");
                });

            modelBuilder.Entity("CRM.Models.ImproveQualityServingDAO", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Detail")
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<string>("Name")
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<long?>("StoreId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("StoreId");

                    b.ToTable("ImproveQualityServing");
                });

            modelBuilder.Entity("CRM.Models.InfulenceLevelMarketDAO", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("InfulenceLevelMarket","ENUM");
                });

            modelBuilder.Entity("CRM.Models.InventoryDAO", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long>("AccountingStock")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<long>("ItemId")
                        .HasColumnType("bigint");

                    b.Property<long>("SaleStock")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<long>("WarehouseId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("Inventory","MDM");
                });

            modelBuilder.Entity("CRM.Models.InventoryHistoryDAO", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long>("AccountingStock")
                        .HasColumnType("bigint");

                    b.Property<long>("AppUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<long>("InventoryId")
                        .HasColumnType("bigint");

                    b.Property<long>("OldAccountingStock")
                        .HasColumnType("bigint");

                    b.Property<long>("OldSaleStock")
                        .HasColumnType("bigint");

                    b.Property<long>("SaleStock")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("InventoryId");

                    b.ToTable("InventoryHistory","MDM");
                });

            modelBuilder.Entity("CRM.Models.ItemDAO", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .HasMaxLength(4000);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .HasMaxLength(4000);

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<decimal?>("RetailPrice")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<Guid>("RowId")
                        .HasColumnType("char(36)");

                    b.Property<decimal?>("SalePrice")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<string>("ScanCode")
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .HasMaxLength(4000);

                    b.Property<long>("StatusId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<bool>("Used")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("StatusId");

                    b.ToTable("Item","MDM");
                });

            modelBuilder.Entity("CRM.Models.ItemImageMappingDAO", b =>
                {
                    b.Property<long>("ItemId")
                        .HasColumnType("bigint");

                    b.Property<long>("ImageId")
                        .HasColumnType("bigint");

                    b.HasKey("ItemId", "ImageId");

                    b.HasIndex("ImageId");

                    b.ToTable("ItemImageMapping","MDM");
                });

            modelBuilder.Entity("CRM.Models.KMSStatusDAO", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("KMSStatus","ENUM");
                });

            modelBuilder.Entity("CRM.Models.KnowledgeArticleDAO", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasComment("Ngày tạo");

                    b.Property<long>("CreatorId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime")
                        .HasComment("Ngày xoá");

                    b.Property<string>("Detail")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<long>("DisplayOrder")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("FromDate")
                        .HasColumnType("datetime");

                    b.Property<long>("GroupId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ItemId")
                        .HasColumnType("bigint");

                    b.Property<long?>("KMSStatusId")
                        .HasColumnType("bigint");

                    b.Property<long>("StatusId")
                        .HasColumnType("bigint");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("varchar(2000) CHARACTER SET utf8mb4")
                        .HasMaxLength(2000);

                    b.Property<DateTime?>("ToDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasComment("Ngày cập nhật");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("GroupId");

                    b.HasIndex("ItemId");

                    b.HasIndex("KMSStatusId");

                    b.HasIndex("StatusId");

                    b.ToTable("KnowledgeArticle");
                });

            modelBuilder.Entity("CRM.Models.KnowledgeArticleKeywordDAO", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long>("KnowledgeArticleId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(500) CHARACTER SET utf8mb4")
                        .HasMaxLength(500);

                    b.HasKey("Id");

                    b.HasIndex("KnowledgeArticleId");

                    b.ToTable("KnowledgeArticleKeyword");
                });

            modelBuilder.Entity("CRM.Models.KnowledgeArticleOrganizationMappingDAO", b =>
                {
                    b.Property<long>("KnowledgeArticleId")
                        .HasColumnType("bigint");

                    b.Property<long>("OrganizationId")
                        .HasColumnType("bigint");

                    b.HasKey("KnowledgeArticleId", "OrganizationId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("KnowledgeArticleOrganizationMapping");
                });

            modelBuilder.Entity("CRM.Models.KnowledgeGroupDAO", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(500) CHARACTER SET utf8mb4")
                        .HasMaxLength(500);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasComment("Ngày tạo");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime")
                        .HasComment("Ngày xoá");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(2000) CHARACTER SET utf8mb4")
                        .HasMaxLength(2000);

                    b.Property<long?>("DisplayOrder")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(500) CHARACTER SET utf8mb4")
                        .HasMaxLength(500);

                    b.Property<long?>("StatusId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasComment("Ngày cập nhật");

                    b.HasKey("Id");

                    b.HasIndex("StatusId");

                    b.ToTable("KnowledgeGroup");
                });

            modelBuilder.Entity("CRM.Models.KpiCriteriaGeneralDAO", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(500) CHARACTER SET utf8mb4")
                        .HasMaxLength(500);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(500) CHARACTER SET utf8mb4")
                        .HasMaxLength(500);

                    b.HasKey("Id");

                    b.ToTable("KpiCriteriaGeneral","ENUM");
                });

            modelBuilder.Entity("CRM.Models.KpiCriteriaItemDAO", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(500) CHARACTER SET utf8mb4")
                        .HasMaxLength(500);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(500) CHARACTER SET utf8mb4")
                        .HasMaxLength(500);

                    b.HasKey("Id");

                    b.ToTable("KpiCriteriaItem","ENUM");
                });

            modelBuilder.Entity("CRM.Models.KpiGeneralContentDAO", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long>("KpiCriteriaGeneralId")
                        .HasColumnType("bigint");

                    b.Property<long>("KpiGeneralId")
                        .HasColumnType("bigint");

                    b.Property<Guid>("RowId")
                        .HasColumnType("char(36)");

                    b.Property<long>("StatusId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("KpiCriteriaGeneralId");

                    b.HasIndex("KpiGeneralId");

                    b.HasIndex("StatusId");

                    b.ToTable("KpiGeneralContent");
                });

            modelBuilder.Entity("CRM.Models.KpiGeneralContentKpiPeriodMappingDAO", b =>
                {
                    b.Property<long>("KpiGeneralContentId")
                        .HasColumnType("bigint");

                    b.Property<long>("KpiPeriodId")
                        .HasColumnType("bigint");

                    b.Property<decimal?>("Value")
                        .HasColumnType("decimal(18, 4)");

                    b.HasKey("KpiGeneralContentId", "KpiPeriodId");

                    b.HasIndex("KpiPeriodId");

                    b.ToTable("KpiGeneralContentKpiPeriodMapping");
                });

            modelBuilder.Entity("CRM.Models.KpiGeneralDAO", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<long>("CreatorId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<long>("EmployeeId")
                        .HasColumnType("bigint");

                    b.Property<long>("KpiYearId")
                        .HasColumnType("bigint");

                    b.Property<long>("OrganizationId")
                        .HasColumnType("bigint");

                    b.Property<Guid>("RowId")
                        .HasColumnType("char(36)");

                    b.Property<long>("StatusId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("KpiYearId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("StatusId");

                    b.ToTable("KpiGeneral");
                });

            modelBuilder.Entity("CRM.Models.KpiItemContentDAO", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long>("ItemId")
                        .HasColumnType("bigint");

                    b.Property<long>("KpiItemId")
                        .HasColumnType("bigint");

                    b.Property<Guid>("RowId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.HasIndex("KpiItemId");

                    b.ToTable("KpiItemContent");
                });

            modelBuilder.Entity("CRM.Models.KpiItemContentKpiCriteriaItemMappingDAO", b =>
                {
                    b.Property<long>("KpiItemContentId")
                        .HasColumnType("bigint");

                    b.Property<long>("KpiCriteriaItemId")
                        .HasColumnType("bigint");

                    b.Property<long?>("Value")
                        .HasColumnType("bigint");

                    b.HasKey("KpiItemContentId", "KpiCriteriaItemId");

                    b.HasIndex("KpiCriteriaItemId");

                    b.ToTable("KpiItemContentKpiCriteriaItemMapping");
                });

            modelBuilder.Entity("CRM.Models.KpiItemDAO", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<long>("CreatorId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<long>("EmployeeId")
                        .HasColumnType("bigint");

                    b.Property<long>("KpiPeriodId")
                        .HasColumnType("bigint");

                    b.Property<long>("KpiYearId")
                        .HasColumnType("bigint");

                    b.Property<long>("OrganizationId")
                        .HasColumnType("bigint");

                    b.Property<Guid>("RowId")
                        .HasColumnType("char(36)");

                    b.Property<long>("StatusId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("KpiPeriodId");

                    b.HasIndex("KpiYearId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("StatusId");

                    b.ToTable("KpiItem");
                });

            modelBuilder.Entity("CRM.Models.KpiPeriodDAO", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("KpiPeriod","ENUM");
                });

            modelBuilder.Entity("CRM.Models.KpiYearDAO", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(500) CHARACTER SET utf8mb4")
                        .HasMaxLength(500);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(500) CHARACTER SET utf8mb4")
                        .HasMaxLength(500);

                    b.HasKey("Id");

                    b.ToTable("KpiYear","ENUM");
                });

            modelBuilder.Entity("CRM.Models.MailTemplateDAO", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Content")
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .HasMaxLength(4000);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(1000) CHARACTER SET utf8mb4")
                        .HasMaxLength(1000);

                    b.Property<long?>("StatusId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("StatusId");

                    b.ToTable("MailTemplate");
                });

            modelBuilder.Entity("CRM.Models.MarketPriceDAO", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("MarketPrice","ENUM");
                });

            modelBuilder.Entity("CRM.Models.MenuDAO", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(500) CHARACTER SET utf8mb4")
                        .HasMaxLength(500);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .HasMaxLength(3000);

                    b.Property<string>("Path")
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .HasMaxLength(3000);

                    b.HasKey("Id");

                    b.ToTable("Menu","PER");
                });

            modelBuilder.Entity("CRM.Models.NationDAO", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(500) CHARACTER SET utf8mb4")
                        .HasComment("Mã quận huyện")
                        .HasMaxLength(500);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasComment("Ngày tạo");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime")
                        .HasComment("Ngày xoá");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<long?>("Priority")
                        .HasColumnType("bigint");

                    b.Property<Guid>("RowId")
                        .HasColumnType("char(36)");

                    b.Property<long>("StatusId")
                        .HasColumnType("bigint")
                        .HasComment("Trạng thái hoạt động");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasComment("Ngày cập nhật");

                    b.Property<bool>("Used")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.HasIndex("StatusId");

                    b.ToTable("Nation","MDM");
                });

            modelBuilder.Entity("CRM.Models.NotificationDAO", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Content")
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .HasMaxLength(4000);

                    b.Property<long>("NotificationStatusId")
                        .HasColumnType("bigint");

                    b.Property<long?>("OrganizationId")
                        .HasColumnType("bigint");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("varchar(500) CHARACTER SET utf8mb4")
                        .HasMaxLength(500);

                    b.HasKey("Id");

                    b.HasIndex("NotificationStatusId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("Notification");
                });

            modelBuilder.Entity("CRM.Models.NotificationStatusDAO", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("NotificationStatus","ENUM");
                });

            modelBuilder.Entity("CRM.Models.OpportunityActivityDAO", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long?>("ActivityPriorityId")
                        .HasColumnType("bigint");

                    b.Property<long>("ActivityStatusId")
                        .HasColumnType("bigint");

                    b.Property<long>("ActivityTypeId")
                        .HasColumnType("bigint");

                    b.Property<string>("Address")
                        .HasColumnType("varchar(500) CHARACTER SET utf8mb4")
                        .HasMaxLength(500);

                    b.Property<long>("AppUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .HasMaxLength(4000);

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime");

                    b.Property<long>("OpportunityId")
                        .HasColumnType("bigint");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("ToDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("ActivityPriorityId");

                    b.HasIndex("ActivityStatusId");

                    b.HasIndex("ActivityTypeId");

                    b.HasIndex("AppUserId");

                    b.HasIndex("OpportunityId");

                    b.ToTable("OpportunityActivity","OPP");
                });

            modelBuilder.Entity("CRM.Models.OpportunityCallLogMappingDAO", b =>
                {
                    b.Property<long>("OpportunityId")
                        .HasColumnType("bigint");

                    b.Property<long>("CallLogId")
                        .HasColumnType("bigint");

                    b.HasKey("OpportunityId", "CallLogId");

                    b.HasIndex("CallLogId");

                    b.ToTable("OpportunityCallLogMapping","OPP");
                });

            modelBuilder.Entity("CRM.Models.OpportunityContactMappingDAO", b =>
                {
                    b.Property<long>("ContactId")
                        .HasColumnType("bigint");

                    b.Property<long>("OpportunityId")
                        .HasColumnType("bigint");

                    b.HasKey("ContactId", "OpportunityId");

                    b.HasIndex("OpportunityId");

                    b.ToTable("OpportunityContactMapping","OPP");
                });

            modelBuilder.Entity("CRM.Models.OpportunityDAO", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<decimal?>("Amount")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<long>("AppUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("ClosingDate")
                        .HasColumnType("datetime");

                    b.Property<long?>("CompanyId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<long>("CreatorId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CurrencyId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CustomerLeadId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .HasMaxLength(4000);

                    b.Property<decimal?>("ForecastAmount")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<long?>("LeadSourceId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(500) CHARACTER SET utf8mb4")
                        .HasMaxLength(500);

                    b.Property<long?>("OpportunityResultTypeId")
                        .HasColumnType("bigint");

                    b.Property<long?>("PotentialResultId")
                        .HasColumnType("bigint");

                    b.Property<long>("ProbabilityId")
                        .HasColumnType("bigint");

                    b.Property<bool?>("RefuseReciveEmail")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("RefuseReciveSMS")
                        .HasColumnType("tinyint(1)");

                    b.Property<long?>("SaleStageId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("CustomerLeadId");

                    b.HasIndex("LeadSourceId");

                    b.HasIndex("OpportunityResultTypeId");

                    b.HasIndex("PotentialResultId");

                    b.HasIndex("ProbabilityId");

                    b.HasIndex("SaleStageId");

                    b.ToTable("Opportunity","OPP");
                });

            modelBuilder.Entity("CRM.Models.OpportunityEmailCCMappingDAO", b =>
                {
                    b.Property<long>("OpportunityEmailId")
                        .HasColumnType("bigint");

                    b.Property<long>("AppUserId")
                        .HasColumnType("bigint");

                    b.HasKey("OpportunityEmailId", "AppUserId")
                        .HasName("PK_OpporutunityEmaiCCMapping");

                    b.HasIndex("AppUserId");

                    b.ToTable("OpportunityEmailCCMapping","OPP");
                });

            modelBuilder.Entity("CRM.Models.OpportunityEmailDAO", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Content")
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .HasMaxLength(4000);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasComment("Ngày tạo");

                    b.Property<long>("CreatorId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime")
                        .HasComment("Ngày xoá");

                    b.Property<long>("EmailStatusId")
                        .HasColumnType("bigint");

                    b.Property<long>("OpportunityId")
                        .HasColumnType("bigint");

                    b.Property<string>("Reciepient")
                        .IsRequired()
                        .HasColumnType("varchar(500) CHARACTER SET utf8mb4")
                        .HasMaxLength(500);

                    b.Property<string>("Title")
                        .HasColumnType("varchar(500) CHARACTER SET utf8mb4")
                        .HasMaxLength(500);

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasComment("Ngày cập nhật");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("EmailStatusId");

                    b.HasIndex("OpportunityId");

                    b.ToTable("OpportunityEmail","OPP");
                });

            modelBuilder.Entity("CRM.Models.OpportunityFileGroupingDAO", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<long>("CreatorId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .HasMaxLength(4000);

                    b.Property<long>("FileTypeId")
                        .HasColumnType("bigint");

                    b.Property<long>("OpportunityId")
                        .HasColumnType("bigint");

                    b.Property<Guid>("RowId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("varchar(500) CHARACTER SET utf8mb4")
                        .HasMaxLength(500);

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("FileTypeId");

                    b.HasIndex("OpportunityId");

                    b.ToTable("OpportunityFileGrouping","OPP");
                });

            modelBuilder.Entity("CRM.Models.OpportunityFileMappingDAO", b =>
                {
                    b.Property<long>("OpportunityFileGroupingId")
                        .HasColumnType("bigint");

                    b.Property<long>("FileId")
                        .HasColumnType("bigint");

                    b.HasKey("OpportunityFileGroupingId", "FileId");

                    b.HasIndex("FileId");

                    b.ToTable("OpportunityFileMapping","OPP");
                });

            modelBuilder.Entity("CRM.Models.OpportunityItemMappingDAO", b =>
                {
                    b.Property<long>("OpportunityId")
                        .HasColumnType("bigint");

                    b.Property<long>("ItemId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("Discount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("DiscountPercentage")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<long?>("Factor")
                        .HasColumnType("bigint");

                    b.Property<decimal>("PrimaryPrice")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<long>("Quantity")
                        .HasColumnType("bigint");

                    b.Property<long>("RequestQuantity")
                        .HasColumnType("bigint");

                    b.Property<decimal>("SalePrice")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<long>("UnitOfMeasureId")
                        .HasColumnType("bigint");

                    b.Property<decimal?>("VAT")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("VATOther")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("OpportunityId", "ItemId");

                    b.HasIndex("ItemId");

                    b.HasIndex("UnitOfMeasureId");

                    b.ToTable("OpportunityItemMapping","OPP");
                });

            modelBuilder.Entity("CRM.Models.OpportunityResultTypeDAO", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("OpportunityResultType","ENUM");
                });

            modelBuilder.Entity("CRM.Models.OrderCategoryDAO", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("OrderCategory","ENUM");
                });

            modelBuilder.Entity("CRM.Models.OrderPaymentStatusDAO", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(500) CHARACTER SET utf8mb4")
                        .HasMaxLength(500);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(500) CHARACTER SET utf8mb4")
                        .HasMaxLength(500);

                    b.HasKey("Id");

                    b.ToTable("OrderPaymentStatus","ENUM");
                });

            modelBuilder.Entity("CRM.Models.OrderQuoteContentDAO", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<decimal?>("DiscountAmount")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<decimal?>("DiscountPercentage")
                        .HasColumnType("decimal(8, 2)");

                    b.Property<long>("EditedPriceStatusId")
                        .HasColumnType("bigint");

                    b.Property<long?>("Factor")
                        .HasColumnType("bigint");

                    b.Property<decimal?>("GeneralDiscountAmount")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<decimal?>("GeneralDiscountPercentage")
                        .HasColumnType("decimal(8, 2)");

                    b.Property<long>("ItemId")
                        .HasColumnType("bigint");

                    b.Property<long>("OrderQuoteId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("PrimaryPrice")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<long>("PrimaryUnitOfMeasureId")
                        .HasColumnType("bigint");

                    b.Property<long>("Quantity")
                        .HasColumnType("bigint");

                    b.Property<long>("RequestedQuantity")
                        .HasColumnType("bigint");

                    b.Property<decimal>("SalePrice")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<decimal?>("TaxAmount")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<decimal?>("TaxAmountOther")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<decimal?>("TaxPercentage")
                        .HasColumnType("decimal(8, 2)");

                    b.Property<decimal?>("TaxPercentageOther")
                        .HasColumnType("decimal(8, 2)");

                    b.Property<long>("TaxTypeId")
                        .HasColumnType("bigint");

                    b.Property<long>("UnitOfMeasureId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("EditedPriceStatusId");

                    b.HasIndex("ItemId");

                    b.HasIndex("OrderQuoteId");

                    b.HasIndex("PrimaryUnitOfMeasureId");

                    b.HasIndex("TaxTypeId");

                    b.HasIndex("UnitOfMeasureId");

                    b.ToTable("OrderQuoteContent","OPP");
                });

            modelBuilder.Entity("CRM.Models.OrderQuoteDAO", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Address")
                        .HasColumnType("varchar(1000) CHARACTER SET utf8mb4")
                        .HasMaxLength(1000);

                    b.Property<long>("AppUserId")
                        .HasColumnType("bigint");

                    b.Property<long>("CompanyId")
                        .HasColumnType("bigint");

                    b.Property<long>("ContactId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasComment("Ngày tạo");

                    b.Property<long>("CreatorId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<long?>("DistrictId")
                        .HasColumnType("bigint");

                    b.Property<long>("EditedPriceStatusId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("EndAt")
                        .HasColumnType("datetime");

                    b.Property<decimal>("GeneralDiscountAmount")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<decimal>("GeneralDiscountPercentage")
                        .HasColumnType("decimal(8, 2)");

                    b.Property<string>("InvoiceAddress")
                        .HasColumnType("varchar(1000) CHARACTER SET utf8mb4")
                        .HasMaxLength(1000);

                    b.Property<long?>("InvoiceDistrictId")
                        .HasColumnType("bigint");

                    b.Property<long?>("InvoiceNationId")
                        .HasColumnType("bigint");

                    b.Property<long?>("InvoiceProvinceId")
                        .HasColumnType("bigint");

                    b.Property<string>("InvoiceZIPCode")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.Property<long?>("NationId")
                        .HasColumnType("bigint");

                    b.Property<string>("Note")
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .HasMaxLength(4000);

                    b.Property<long?>("OpportunityId")
                        .HasColumnType("bigint");

                    b.Property<long>("OrderQuoteStatusId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ProvinceId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("SubTotal")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<decimal>("TotalTaxAmount")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<decimal?>("TotalTaxAmountOther")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ZIPCode")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("ContactId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("DistrictId");

                    b.HasIndex("EditedPriceStatusId");

                    b.HasIndex("InvoiceDistrictId");

                    b.HasIndex("InvoiceNationId");

                    b.HasIndex("InvoiceProvinceId");

                    b.HasIndex("NationId");

                    b.HasIndex("OpportunityId");

                    b.HasIndex("OrderQuoteStatusId");

                    b.HasIndex("ProvinceId");

                    b.ToTable("OrderQuote","OPP");
                });

            modelBuilder.Entity("CRM.Models.OrderQuoteStatusDAO", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.ToTable("OrderQuoteStatus","ENUM");
                });

            modelBuilder.Entity("CRM.Models.OrganizationDAO", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Address")
                        .HasColumnType("varchar(500) CHARACTER SET utf8mb4")
                        .HasMaxLength(500);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(500) CHARACTER SET utf8mb4")
                        .HasMaxLength(500);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Email")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<long>("Level")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(500) CHARACTER SET utf8mb4")
                        .HasMaxLength(500);

                    b.Property<long?>("ParentId")
                        .HasColumnType("bigint");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("varchar(400) CHARACTER SET utf8mb4")
                        .HasMaxLength(400);

                    b.Property<string>("Phone")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<Guid>("RowId")
                        .HasColumnType("char(36)");

                    b.Property<long>("StatusId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<bool>("Used")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.HasIndex("StatusId");

                    b.ToTable("Organization","MDM");
                });

            modelBuilder.Entity("CRM.Models.PageDAO", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(500) CHARACTER SET utf8mb4")
                        .HasMaxLength(500);

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("varchar(400) CHARACTER SET utf8mb4")
                        .HasMaxLength(400);

                    b.HasKey("Id");

                    b.ToTable("Page","PER");
                });

            modelBuilder.Entity("CRM.Models.PaymentStatusDAO", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.ToTable("PaymentStatus","ENUM");
                });

            modelBuilder.Entity("CRM.Models.PermissionActionMappingDAO", b =>
                {
                    b.Property<long>("ActionId")
                        .HasColumnType("bigint");

                    b.Property<long>("PermissionId")
                        .HasColumnType("bigint");

                    b.HasKey("ActionId", "PermissionId")
                        .HasName("PK_ActionPermissionMapping");

                    b.HasIndex("PermissionId");

                    b.ToTable("PermissionActionMapping","PER");
                });

            modelBuilder.Entity("CRM.Models.PermissionContentDAO", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long>("FieldId")
                        .HasColumnType("bigint");

                    b.Property<long>("PermissionId")
                        .HasColumnType("bigint");

                    b.Property<long>("PermissionOperatorId")
                        .HasColumnType("bigint");

                    b.Property<string>("Value")
                        .HasColumnType("varchar(500) CHARACTER SET utf8mb4")
                        .HasMaxLength(500);

                    b.HasKey("Id");

                    b.HasIndex("FieldId");

                    b.HasIndex("PermissionId");

                    b.HasIndex("PermissionOperatorId");

                    b.ToTable("PermissionContent","PER");
                });

            modelBuilder.Entity("CRM.Models.PermissionDAO", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(500) CHARACTER SET utf8mb4")
                        .HasMaxLength(500);

                    b.Property<long>("MenuId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(500) CHARACTER SET utf8mb4")
                        .HasMaxLength(500);

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.Property<long>("StatusId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("MenuId");

                    b.HasIndex("RoleId");

                    b.HasIndex("StatusId");

                    b.ToTable("Permission","PER");
                });

            modelBuilder.Entity("CRM.Models.PermissionOperatorDAO", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<long>("FieldTypeId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("FieldTypeId");

                    b.ToTable("PermissionOperator","PER");
                });

            modelBuilder.Entity("CRM.Models.PhoneTypeDAO", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<Guid>("RowId")
                        .HasColumnType("char(36)");

                    b.Property<long>("StatusId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<bool>("Used")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.HasIndex("StatusId");

                    b.ToTable("PhoneType","MDM");
                });

            modelBuilder.Entity("CRM.Models.PositionDAO", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.Property<Guid>("RowId")
                        .HasColumnType("char(36)");

                    b.Property<long>("StatusId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<bool>("Used")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.HasIndex("StatusId");

                    b.ToTable("Position","MDM");
                });

            modelBuilder.Entity("CRM.Models.PotentialResultDAO", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.ToTable("PotentialResult","ENUM");
                });

            modelBuilder.Entity("CRM.Models.ProbabilityDAO", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.ToTable("Probability","ENUM");
                });

            modelBuilder.Entity("CRM.Models.ProductDAO", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<long?>("BrandId")
                        .HasColumnType("bigint");

                    b.Property<long>("CategoryId")
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(500) CHARACTER SET utf8mb4")
                        .HasMaxLength(500);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .HasMaxLength(3000);

                    b.Property<string>("ERPCode")
                        .HasColumnType("varchar(500) CHARACTER SET utf8mb4")
                        .HasMaxLength(500);

                    b.Property<bool>("IsNew")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .HasMaxLength(3000);

                    b.Property<string>("Note")
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .HasMaxLength(3000);

                    b.Property<string>("OtherName")
                        .HasColumnType("varchar(1000) CHARACTER SET utf8mb4")
                        .HasMaxLength(1000);

                    b.Property<long>("ProductTypeId")
                        .HasColumnType("bigint");

                    b.Property<decimal?>("RetailPrice")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<Guid>("RowId")
                        .HasColumnType("char(36)");

                    b.Property<decimal?>("SalePrice")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<string>("ScanCode")
                        .HasColumnType("varchar(500) CHARACTER SET utf8mb4")
                        .HasMaxLength(500);

                    b.Property<long>("StatusId")
                        .HasColumnType("bigint");

                    b.Property<long>("TaxTypeId")
                        .HasColumnType("bigint");

                    b.Property<string>("TechnicalName")
                        .HasColumnType("varchar(1000) CHARACTER SET utf8mb4")
                        .HasMaxLength(1000);

                    b.Property<long?>("UnitOfMeasureGroupingId")
                        .HasColumnType("bigint");

                    b.Property<long>("UnitOfMeasureId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<bool>("Used")
                        .HasColumnType("tinyint(1)");

                    b.Property<long>("UsedVariationId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ProductTypeId");

                    b.HasIndex("StatusId");

                    b.HasIndex("TaxTypeId");

                    b.HasIndex("UnitOfMeasureGroupingId");

                    b.HasIndex("UnitOfMeasureId");

                    b.HasIndex("UsedVariationId");

                    b.ToTable("Product","MDM");
                });

            modelBuilder.Entity("CRM.Models.ProductGroupingDAO", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(2000) CHARACTER SET utf8mb4")
                        .HasMaxLength(2000);

                    b.Property<long>("Level")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.Property<long?>("ParentId")
                        .HasColumnType("bigint");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .HasMaxLength(3000);

                    b.Property<Guid>("RowId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("ProductGrouping","MDM");
                });

            modelBuilder.Entity("CRM.Models.ProductImageMappingDAO", b =>
                {
                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<long>("ImageId")
                        .HasColumnType("bigint");

                    b.HasKey("ProductId", "ImageId");

                    b.HasIndex("ImageId");

                    b.ToTable("ProductImageMapping","MDM");
                });

            modelBuilder.Entity("CRM.Models.ProductProductGroupingMappingDAO", b =>
                {
                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<long>("ProductGroupingId")
                        .HasColumnType("bigint");

                    b.HasKey("ProductId", "ProductGroupingId");

                    b.HasIndex("ProductGroupingId");

                    b.ToTable("ProductProductGroupingMapping","MDM");
                });

            modelBuilder.Entity("CRM.Models.ProductTypeDAO", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .HasMaxLength(3000);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.Property<Guid>("RowId")
                        .HasColumnType("char(36)");

                    b.Property<long>("StatusId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<bool>("Used")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.HasIndex("StatusId");

                    b.ToTable("ProductType","MDM");
                });

            modelBuilder.Entity("CRM.Models.ProfessionDAO", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.Property<Guid>("RowId")
                        .HasColumnType("char(36)");

                    b.Property<long>("StatusId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<bool>("Used")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.HasIndex("StatusId");

                    b.ToTable("Profession","MDM");
                });

            modelBuilder.Entity("CRM.Models.ProvinceDAO", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(500) CHARACTER SET utf8mb4")
                        .HasMaxLength(500);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(500) CHARACTER SET utf8mb4")
                        .HasMaxLength(500);

                    b.Property<long?>("Priority")
                        .HasColumnType("bigint");

                    b.Property<Guid>("RowId")
                        .HasColumnType("char(36)");

                    b.Property<long>("StatusId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<bool>("Used")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.HasIndex("StatusId");

                    b.ToTable("Province","MDM");
                });

            modelBuilder.Entity("CRM.Models.RatingStatusDAO", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(500) CHARACTER SET utf8mb4")
                        .HasMaxLength(500);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(500) CHARACTER SET utf8mb4")
                        .HasMaxLength(500);

                    b.HasKey("Id");

                    b.ToTable("RatingStatus","ENUM");
                });

            modelBuilder.Entity("CRM.Models.RelationshipCustomerTypeDAO", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("RelationshipCustomerType","ENUM");
                });

            modelBuilder.Entity("CRM.Models.RepairStatusDAO", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(20) CHARACTER SET utf8mb4")
                        .HasMaxLength(20);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.ToTable("RepairStatus","ENUM");
                });

            modelBuilder.Entity("CRM.Models.RepairTicketDAO", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<long>("CreatorId")
                        .HasColumnType("bigint");

                    b.Property<long>("CustomerId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("DeviceSerial")
                        .HasColumnType("varchar(500) CHARACTER SET utf8mb4")
                        .HasMaxLength(500);

                    b.Property<string>("DeviceState")
                        .IsRequired()
                        .HasColumnType("varchar(500) CHARACTER SET utf8mb4")
                        .HasMaxLength(500);

                    b.Property<bool?>("IsRejectRepair")
                        .HasColumnType("tinyint(1)");

                    b.Property<long?>("ItemId")
                        .HasColumnType("bigint");

                    b.Property<string>("Note")
                        .HasColumnType("varchar(1000) CHARACTER SET utf8mb4")
                        .HasMaxLength(1000);

                    b.Property<long>("OrderCategoryId")
                        .HasColumnType("bigint");

                    b.Property<long>("OrderId")
                        .HasColumnType("bigint");

                    b.Property<long?>("PaymentStatusId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ReceiveDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ReceiveUser")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.Property<string>("RejectReason")
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .HasMaxLength(4000);

                    b.Property<string>("RepairAddess")
                        .HasColumnType("varchar(500) CHARACTER SET utf8mb4")
                        .HasMaxLength(500);

                    b.Property<decimal?>("RepairCost")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<DateTime?>("RepairDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("RepairDueDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RepairSolution")
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .HasMaxLength(4000);

                    b.Property<long?>("RepairStatusId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ReturnDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ItemId");

                    b.HasIndex("OrderCategoryId");

                    b.HasIndex("PaymentStatusId");

                    b.HasIndex("RepairStatusId");

                    b.ToTable("RepairTicket");
                });

            modelBuilder.Entity("CRM.Models.RequestStateDAO", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("RequestState","WF");
                });

            modelBuilder.Entity("CRM.Models.RequestWorkflowDefinitionMappingDAO", b =>
                {
                    b.Property<Guid>("RequestId")
                        .HasColumnType("char(36)");

                    b.Property<long>("CreatorId")
                        .HasColumnType("bigint");

                    b.Property<long>("RequestStateId")
                        .HasColumnType("bigint");

                    b.Property<long>("WorkflowDefinitionId")
                        .HasColumnType("bigint");

                    b.HasKey("RequestId");

                    b.HasIndex("RequestStateId");

                    b.HasIndex("WorkflowDefinitionId");

                    b.ToTable("RequestWorkflowDefinitionMapping","WF");
                });

            modelBuilder.Entity("CRM.Models.RequestWorkflowParameterMappingDAO", b =>
                {
                    b.Property<long>("WorkflowParameterId")
                        .HasColumnType("bigint");

                    b.Property<Guid>("RequestId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Value")
                        .HasColumnType("varchar(500) CHARACTER SET utf8mb4")
                        .HasMaxLength(500);

                    b.HasKey("WorkflowParameterId", "RequestId");

                    b.ToTable("RequestWorkflowParameterMapping","WF");
                });

            modelBuilder.Entity("CRM.Models.RequestWorkflowStepMappingDAO", b =>
                {
                    b.Property<Guid>("RequestId")
                        .HasColumnType("char(36)");

                    b.Property<long>("WorkflowStepId")
                        .HasColumnType("bigint");

                    b.Property<long?>("AppUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<long>("WorkflowStateId")
                        .HasColumnType("bigint");

                    b.HasKey("RequestId", "WorkflowStepId");

                    b.HasIndex("AppUserId");

                    b.HasIndex("WorkflowStateId");

                    b.HasIndex("WorkflowStepId");

                    b.ToTable("RequestWorkflowStepMapping","WF");
                });

            modelBuilder.Entity("CRM.Models.RoleDAO", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .HasColumnType("varchar(500) CHARACTER SET utf8mb4")
                        .HasMaxLength(500);

                    b.Property<string>("Name")
                        .HasColumnType("varchar(500) CHARACTER SET utf8mb4")
                        .HasMaxLength(500);

                    b.Property<long>("StatusId")
                        .HasColumnType("bigint");

                    b.Property<bool>("Used")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.HasIndex("StatusId");

                    b.ToTable("Role","PER");
                });

            modelBuilder.Entity("CRM.Models.SLAAlertDAO", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<bool?>("IsAssignedToGroup")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("IsAssignedToUser")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("IsMail")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("IsNotification")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("IsSMS")
                        .HasColumnType("tinyint(1)");

                    b.Property<long?>("MailTemplateId")
                        .HasColumnType("bigint");

                    b.Property<Guid?>("RowId")
                        .HasColumnType("char(36)");

                    b.Property<long?>("SmsTemplateId")
                        .HasColumnType("bigint");

                    b.Property<long?>("TicketIssueLevelId")
                        .HasColumnType("bigint");

                    b.Property<long?>("Time")
                        .HasColumnType("bigint");

                    b.Property<long?>("TimeUnitId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("MailTemplateId");

                    b.HasIndex("SmsTemplateId");

                    b.HasIndex("TicketIssueLevelId");

                    b.HasIndex("TimeUnitId");

                    b.ToTable("SLAAlert");
                });

            modelBuilder.Entity("CRM.Models.SLAAlertFRTDAO", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<bool?>("IsAssignedToGroup")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("IsAssignedToUser")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("IsMail")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("IsNotification")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("IsSMS")
                        .HasColumnType("tinyint(1)");

                    b.Property<long?>("MailTemplateId")
                        .HasColumnType("bigint");

                    b.Property<Guid?>("RowId")
                        .HasColumnType("char(36)");

                    b.Property<long?>("SmsTemplateId")
                        .HasColumnType("bigint");

                    b.Property<long?>("TicketIssueLevelId")
                        .HasColumnType("bigint");

                    b.Property<long?>("Time")
                        .HasColumnType("bigint");

                    b.Property<long?>("TimeUnitId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("MailTemplateId");

                    b.HasIndex("SmsTemplateId");

                    b.HasIndex("TicketIssueLevelId");

                    b.HasIndex("TimeUnitId");

                    b.ToTable("SLAAlertFRT");
                });

            modelBuilder.Entity("CRM.Models.SLAAlertFRTMailDAO", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Mail")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.Property<long?>("SLAAlertFRTId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("SLAAlertFRTId");

                    b.ToTable("SLAAlertFRTMail");
                });

            modelBuilder.Entity("CRM.Models.SLAAlertFRTPhoneDAO", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Phone")
                        .HasColumnType("varchar(20) CHARACTER SET utf8mb4")
                        .HasMaxLength(20);

                    b.Property<long?>("SLAAlertFRTId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("SLAAlertFRTId");

                    b.ToTable("SLAAlertFRTPhone");
                });

            modelBuilder.Entity("CRM.Models.SLAAlertFRTUserDAO", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long?>("AppUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<long?>("SLAAlertFRTId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("SLAAlertFRTId");

                    b.ToTable("SLAAlertFRTUser");
                });

            modelBuilder.Entity("CRM.Models.SLAAlertMailDAO", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Mail")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.Property<long?>("SLAAlertId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("SLAAlertId");

                    b.ToTable("SLAAlertMail");
                });

            modelBuilder.Entity("CRM.Models.SLAAlertPhoneDAO", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Phone")
                        .HasColumnType("varchar(20) CHARACTER SET utf8mb4")
                        .HasMaxLength(20);

                    b.Property<long?>("SLAAlertId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("SLAAlertId");

                    b.ToTable("SLAAlertPhone");
                });

            modelBuilder.Entity("CRM.Models.SLAAlertUserDAO", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long?>("AppUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<long?>("SLAAlertId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("SLAAlertId");

                    b.ToTable("SLAAlertUser");
                });

            modelBuilder.Entity("CRM.Models.SLAEscalationDAO", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<bool?>("IsAssignedToGroup")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("IsAssignedToUser")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("IsMail")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("IsNotification")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("IsSMS")
                        .HasColumnType("tinyint(1)");

                    b.Property<long?>("MailTemplateId")
                        .HasColumnType("bigint");

                    b.Property<Guid?>("RowId")
                        .HasColumnType("char(36)");

                    b.Property<long?>("SmsTemplateId")
                        .HasColumnType("bigint");

                    b.Property<long?>("TicketIssueLevelId")
                        .HasColumnType("bigint");

                    b.Property<long?>("Time")
                        .HasColumnType("bigint");

                    b.Property<long?>("TimeUnitId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("MailTemplateId");

                    b.HasIndex("SmsTemplateId");

                    b.HasIndex("TicketIssueLevelId");

                    b.HasIndex("TimeUnitId");

                    b.ToTable("SLAEscalation");
                });

            modelBuilder.Entity("CRM.Models.SLAEscalationFRTDAO", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<bool?>("IsAssignedToGroup")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("IsAssignedToUser")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("IsMail")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("IsNotification")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("IsSMS")
                        .HasColumnType("tinyint(1)");

                    b.Property<long?>("MailTemplateId")
                        .HasColumnType("bigint");

                    b.Property<Guid?>("RowId")
                        .HasColumnType("char(36)");

                    b.Property<long?>("SmsTemplateId")
                        .HasColumnType("bigint");

                    b.Property<long?>("TicketIssueLevelId")
                        .HasColumnType("bigint");

                    b.Property<long?>("Time")
                        .HasColumnType("bigint");

                    b.Property<long?>("TimeUnitId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("MailTemplateId");

                    b.HasIndex("SmsTemplateId");

                    b.HasIndex("TicketIssueLevelId");

                    b.HasIndex("TimeUnitId");

                    b.ToTable("SLAEscalationFRT");
                });

            modelBuilder.Entity("CRM.Models.SLAEscalationFRTMailDAO", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Mail")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.Property<long?>("SLAEscalationFRTId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("SLAEscalationFRTId");

                    b.ToTable("SLAEscalationFRTMail");
                });

            modelBuilder.Entity("CRM.Models.SLAEscalationFRTPhoneDAO", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Phone")
                        .HasColumnType("varchar(20) CHARACTER SET utf8mb4")
                        .HasMaxLength(20);

                    b.Property<long?>("SLAEscalationFRTId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("SLAEscalationFRTId");

                    b.ToTable("SLAEscalationFRTPhone");
                });

            modelBuilder.Entity("CRM.Models.SLAEscalationFRTUserDAO", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long?>("AppUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<long?>("SLAEscalationFRTId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("SLAEscalationFRTId");

                    b.ToTable("SLAEscalationFRTUser");
                });

            modelBuilder.Entity("CRM.Models.SLAEscalationMailDAO", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Mail")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.Property<long?>("SLAEscalationId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("SLAEscalationId");

                    b.ToTable("SLAEscalationMail");
                });

            modelBuilder.Entity("CRM.Models.SLAEscalationPhoneDAO", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Phone")
                        .HasColumnType("varchar(20) CHARACTER SET utf8mb4")
                        .HasMaxLength(20);

                    b.Property<long?>("SLAEscalationId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("SLAEscalationPhone");
                });

            modelBuilder.Entity("CRM.Models.SLAEscalationUserDAO", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long?>("AppUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<long?>("SLAEscalationId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("SLAEscalationId");

                    b.ToTable("SLAEscalationUser");
                });

            modelBuilder.Entity("CRM.Models.SLAPolicyDAO", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<long?>("FirstResponseTime")
                        .HasColumnType("bigint");

                    b.Property<long?>("FirstResponseUnitId")
                        .HasColumnType("bigint");

                    b.Property<bool?>("IsAlert")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("IsAlertFRT")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("IsEscalation")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("IsEscalationFRT")
                        .HasColumnType("tinyint(1)");

                    b.Property<long?>("ResolveTime")
                        .HasColumnType("bigint");

                    b.Property<long?>("ResolveUnitId")
                        .HasColumnType("bigint");

                    b.Property<long?>("TicketIssueLevelId")
                        .HasColumnType("bigint");

                    b.Property<long?>("TicketPriorityId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("FirstResponseUnitId");

                    b.HasIndex("ResolveUnitId");

                    b.HasIndex("TicketIssueLevelId");

                    b.HasIndex("TicketPriorityId");

                    b.ToTable("SLAPolicy");
                });

            modelBuilder.Entity("CRM.Models.SLAStatusDAO", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<string>("ColorCode")
                        .IsRequired()
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("SLAStatus","ENUM");
                });

            modelBuilder.Entity("CRM.Models.SLATimeUnitDAO", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("SLATimeUnit","ENUM");
                });

            modelBuilder.Entity("CRM.Models.SaleStageDAO", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.ToTable("SaleStage","ENUM");
                });

            modelBuilder.Entity("CRM.Models.ScheduleMasterDAO", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .HasColumnType("varchar(500) CHARACTER SET utf8mb4")
                        .HasMaxLength(500);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasComment("Ngày tạo");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime")
                        .HasComment("Ngày xoá");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(2000) CHARACTER SET utf8mb4")
                        .HasMaxLength(2000);

                    b.Property<long?>("DisplayOrder")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<long?>("ManagerId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(500) CHARACTER SET utf8mb4")
                        .HasMaxLength(500);

                    b.Property<bool?>("NoEndDate")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("RecurDays")
                        .HasColumnType("datetime");

                    b.Property<long?>("SalerId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("StartDayOfWeek")
                        .HasColumnType("datetime");

                    b.Property<long?>("StatusId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasComment("Ngày cập nhật");

                    b.HasKey("Id");

                    b.HasIndex("ManagerId");

                    b.HasIndex("SalerId");

                    b.HasIndex("StatusId");

                    b.ToTable("ScheduleMaster");
                });

            modelBuilder.Entity("CRM.Models.SexDAO", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Sex","ENUM");
                });

            modelBuilder.Entity("CRM.Models.SmsQueueDAO", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasComment("Ngày tạo");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime")
                        .HasComment("Ngày xoá");

                    b.Property<long?>("EntityReferenceId")
                        .HasColumnType("bigint");

                    b.Property<string>("Phone")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<long?>("SentByAppUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("SentDate")
                        .HasColumnType("datetime");

                    b.Property<string>("SmsCode")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("SmsContent")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<long?>("SmsQueueStatusId")
                        .HasColumnType("bigint");

                    b.Property<string>("SmsTitle")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasComment("Ngày cập nhật");

                    b.HasKey("Id");

                    b.HasIndex("EntityReferenceId");

                    b.HasIndex("SentByAppUserId");

                    b.HasIndex("SmsQueueStatusId");

                    b.ToTable("SmsQueue");
                });

            modelBuilder.Entity("CRM.Models.SmsQueueStatusDAO", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .HasColumnType("varchar(500) CHARACTER SET utf8mb4")
                        .HasMaxLength(500);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasComment("Ngày tạo");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime")
                        .HasComment("Ngày xoá");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(500) CHARACTER SET utf8mb4")
                        .HasMaxLength(500);

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasComment("Ngày cập nhật");

                    b.HasKey("Id");

                    b.ToTable("SmsQueueStatus");
                });

            modelBuilder.Entity("CRM.Models.SmsTemplateDAO", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Content")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasComment("Ngày tạo");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime")
                        .HasComment("Ngày xoá");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(2000) CHARACTER SET utf8mb4")
                        .HasMaxLength(2000);

                    b.Property<long?>("StatusId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasComment("Ngày cập nhật");

                    b.HasKey("Id");

                    b.HasIndex("StatusId");

                    b.ToTable("SmsTemplate");
                });

            modelBuilder.Entity("CRM.Models.SocialChannelTypeDAO", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("SocialChannelType","ENUM");
                });

            modelBuilder.Entity("CRM.Models.StatusDAO", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(500) CHARACTER SET utf8mb4")
                        .HasMaxLength(500);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(500) CHARACTER SET utf8mb4")
                        .HasMaxLength(500);

                    b.HasKey("Id");

                    b.ToTable("Status","ENUM");
                });

            modelBuilder.Entity("CRM.Models.StoreAssetsDAO", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(500) CHARACTER SET utf8mb4")
                        .HasMaxLength(500);

                    b.Property<long?>("Owned")
                        .HasColumnType("bigint");

                    b.Property<long?>("Quantity")
                        .HasColumnType("bigint");

                    b.Property<long?>("Rent")
                        .HasColumnType("bigint");

                    b.Property<long?>("StoreId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("StoreId");

                    b.ToTable("StoreAssets");
                });

            modelBuilder.Entity("CRM.Models.StoreConsultingServiceMappingDAO", b =>
                {
                    b.Property<long>("StoreId")
                        .HasColumnType("bigint");

                    b.Property<long>("ConsultingServiceId")
                        .HasColumnType("bigint");

                    b.HasKey("StoreId", "ConsultingServiceId");

                    b.HasIndex("ConsultingServiceId");

                    b.ToTable("StoreConsultingServiceMapping");
                });

            modelBuilder.Entity("CRM.Models.StoreCooperativeAttitudeMappingDAO", b =>
                {
                    b.Property<long>("StoreId")
                        .HasColumnType("bigint");

                    b.Property<long>("CooperativeAttitudeId")
                        .HasColumnType("bigint");

                    b.HasKey("StoreId", "CooperativeAttitudeId");

                    b.HasIndex("CooperativeAttitudeId");

                    b.ToTable("StoreCooperativeAttitudeMapping");
                });

            modelBuilder.Entity("CRM.Models.StoreCoverageCapacityDAO", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Detail")
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<string>("Name")
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<long?>("StoreId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("StoreId");

                    b.ToTable("StoreCoverageCapacity");
                });

            modelBuilder.Entity("CRM.Models.StoreDAO", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Address")
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .HasMaxLength(3000);

                    b.Property<long?>("AppUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .HasColumnType("varchar(400) CHARACTER SET utf8mb4")
                        .HasMaxLength(400);

                    b.Property<string>("CodeDraft")
                        .HasColumnType("varchar(500) CHARACTER SET utf8mb4")
                        .HasMaxLength(500);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<long?>("CustomerId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("DeliveryAddress")
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .HasMaxLength(3000);

                    b.Property<decimal?>("DeliveryLatitude")
                        .HasColumnType("decimal(18, 15)");

                    b.Property<decimal?>("DeliveryLongitude")
                        .HasColumnType("decimal(18, 15)");

                    b.Property<long?>("DistrictId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("Latitude")
                        .HasColumnType("decimal(18, 15)");

                    b.Property<string>("LegalEntity")
                        .HasColumnType("varchar(500) CHARACTER SET utf8mb4")
                        .HasMaxLength(500);

                    b.Property<decimal>("Longitude")
                        .HasColumnType("decimal(18, 15)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(500) CHARACTER SET utf8mb4")
                        .HasMaxLength(500);

                    b.Property<long>("OrganizationId")
                        .HasColumnType("bigint");

                    b.Property<string>("OwnerEmail")
                        .HasColumnType("varchar(500) CHARACTER SET utf8mb4")
                        .HasMaxLength(500);

                    b.Property<string>("OwnerName")
                        .IsRequired()
                        .HasColumnType("varchar(500) CHARACTER SET utf8mb4")
                        .HasMaxLength(500);

                    b.Property<string>("OwnerPhone")
                        .IsRequired()
                        .HasColumnType("varchar(500) CHARACTER SET utf8mb4")
                        .HasMaxLength(500);

                    b.Property<long?>("ParentStoreId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ProvinceId")
                        .HasColumnType("bigint");

                    b.Property<Guid>("RowId")
                        .HasColumnType("char(36)");

                    b.Property<long>("StatusId")
                        .HasColumnType("bigint");

                    b.Property<long?>("StoreGroupingId")
                        .HasColumnType("bigint");

                    b.Property<long>("StoreStatusId")
                        .HasColumnType("bigint");

                    b.Property<long>("StoreTypeId")
                        .HasColumnType("bigint");

                    b.Property<string>("TaxCode")
                        .HasColumnType("varchar(500) CHARACTER SET utf8mb4")
                        .HasMaxLength(500);

                    b.Property<string>("Telephone")
                        .HasColumnType("varchar(500) CHARACTER SET utf8mb4")
                        .HasMaxLength(500);

                    b.Property<string>("UnsignAddress")
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .HasMaxLength(3000);

                    b.Property<string>("UnsignName")
                        .HasColumnType("varchar(500) CHARACTER SET utf8mb4")
                        .HasMaxLength(500);

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<bool>("Used")
                        .HasColumnType("tinyint(1)");

                    b.Property<long?>("WardId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("DistrictId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("ParentStoreId");

                    b.HasIndex("ProvinceId");

                    b.HasIndex("StatusId");

                    b.HasIndex("StoreGroupingId");

                    b.HasIndex("StoreStatusId");

                    b.HasIndex("StoreTypeId");

                    b.HasIndex("WardId");

                    b.ToTable("Store","MDM");
                });

            modelBuilder.Entity("CRM.Models.StoreDeliveryTimeDAO", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("StoreDeliveryTime","ENUM");
                });

            modelBuilder.Entity("CRM.Models.StoreDeliveryTimeMappingDAO", b =>
                {
                    b.Property<long>("StoreId")
                        .HasColumnType("bigint");

                    b.Property<long>("StoreDeliveryTimeId")
                        .HasColumnType("bigint");

                    b.HasKey("StoreId", "StoreDeliveryTimeId");

                    b.HasIndex("StoreDeliveryTimeId");

                    b.ToTable("StoreDeliveryTimeMapping");
                });

            modelBuilder.Entity("CRM.Models.StoreExtendDAO", b =>
                {
                    b.Property<long>("StoreId")
                        .HasColumnType("bigint");

                    b.Property<string>("AbilityLimitedCapital")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("AbilityRaisingCapital")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("AbilityToPay")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("AgentContractNumber")
                        .IsRequired()
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<string>("AnotherStrongPoint")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("BankAccountNumber")
                        .IsRequired()
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<string>("BankName")
                        .IsRequired()
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<decimal>("BusinessCapital")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<string>("BusinessLicense")
                        .IsRequired()
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<long>("BusinessTypeId")
                        .HasColumnType("bigint");

                    b.Property<long>("CurrencyId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DateOfAgentContractNumber")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateOfBusinessLicense")
                        .HasColumnType("datetime");

                    b.Property<decimal>("DistributionAcreage")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("DistributionArea")
                        .IsRequired()
                        .HasColumnType("varchar(1000) CHARACTER SET utf8mb4")
                        .HasMaxLength(1000);

                    b.Property<bool?>("DivideEachPart")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("DivideHuman")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Fax")
                        .HasColumnType("char(100) CHARACTER SET utf8mb4")
                        .IsFixedLength(true)
                        .HasMaxLength(100);

                    b.Property<string>("Invest")
                        .HasColumnType("varchar(1000) CHARACTER SET utf8mb4")
                        .HasMaxLength(1000);

                    b.Property<string>("MarketCharacteristics")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<long>("NumberOfKeyCustomer")
                        .HasColumnType("bigint");

                    b.Property<long>("NumberOfPointsOfSale")
                        .HasColumnType("bigint");

                    b.Property<string>("PhoneOther")
                        .IsRequired()
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<string>("ReadyCoordinate")
                        .HasColumnType("varchar(1000) CHARACTER SET utf8mb4")
                        .HasMaxLength(1000);

                    b.Property<long>("RegionalPopulation")
                        .HasColumnType("bigint");

                    b.Property<long?>("RewardInYear")
                        .HasColumnType("bigint");

                    b.Property<decimal>("StoreAcreage")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("UrbanizationLevel")
                        .IsRequired()
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<decimal>("WareHouseAcreage")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("StoreId");

                    b.HasIndex("BusinessTypeId");

                    b.HasIndex("CurrencyId");

                    b.ToTable("StoreExtend");
                });

            modelBuilder.Entity("CRM.Models.StoreGroupingDAO", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(500) CHARACTER SET utf8mb4")
                        .HasMaxLength(500);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<long>("Level")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(500) CHARACTER SET utf8mb4")
                        .HasMaxLength(500);

                    b.Property<long?>("ParentId")
                        .HasColumnType("bigint");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("varchar(400) CHARACTER SET utf8mb4")
                        .HasMaxLength(400);

                    b.Property<Guid>("RowId")
                        .HasColumnType("char(36)");

                    b.Property<long>("StatusId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<bool>("Used")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.HasIndex("StatusId");

                    b.ToTable("StoreGrouping","MDM");
                });

            modelBuilder.Entity("CRM.Models.StoreImageMappingDAO", b =>
                {
                    b.Property<long>("StoreId")
                        .HasColumnType("bigint");

                    b.Property<long>("ImageId")
                        .HasColumnType("bigint");

                    b.HasKey("StoreId", "ImageId");

                    b.HasIndex("ImageId");

                    b.ToTable("StoreImageMapping");
                });

            modelBuilder.Entity("CRM.Models.StoreInfulenceLevelMarketMappingDAO", b =>
                {
                    b.Property<long>("StoreId")
                        .HasColumnType("bigint");

                    b.Property<long>("InfulenceLevelMarketId")
                        .HasColumnType("bigint");

                    b.HasKey("StoreId", "InfulenceLevelMarketId");

                    b.HasIndex("InfulenceLevelMarketId");

                    b.ToTable("StoreInfulenceLevelMarketMapping");
                });

            modelBuilder.Entity("CRM.Models.StoreMarketPriceMappingDAO", b =>
                {
                    b.Property<long>("StoreId")
                        .HasColumnType("bigint");

                    b.Property<long>("MarketPriceId")
                        .HasColumnType("bigint");

                    b.HasKey("StoreId", "MarketPriceId");

                    b.HasIndex("MarketPriceId");

                    b.ToTable("StoreMarketPriceMapping");
                });

            modelBuilder.Entity("CRM.Models.StoreMeansOfDeliveryDAO", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(500) CHARACTER SET utf8mb4")
                        .HasMaxLength(500);

                    b.Property<long?>("Owned")
                        .HasColumnType("bigint");

                    b.Property<long?>("Quantity")
                        .HasColumnType("bigint");

                    b.Property<long?>("Rent")
                        .HasColumnType("bigint");

                    b.Property<long?>("StoreId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("StoreId");

                    b.ToTable("StoreMeansOfDelivery");
                });

            modelBuilder.Entity("CRM.Models.StorePersonnelDAO", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(500) CHARACTER SET utf8mb4")
                        .HasMaxLength(500);

                    b.Property<long?>("Quantity")
                        .HasColumnType("bigint");

                    b.Property<long?>("StoreId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("StoreId");

                    b.ToTable("StorePersonnel");
                });

            modelBuilder.Entity("CRM.Models.StoreRelationshipCustomerMappingDAO", b =>
                {
                    b.Property<long>("RelationshipCustomerTypeId")
                        .HasColumnType("bigint");

                    b.Property<long>("StoreId")
                        .HasColumnType("bigint");

                    b.HasKey("RelationshipCustomerTypeId", "StoreId")
                        .HasName("PK_StoreRelationshipCustomer");

                    b.HasIndex("StoreId");

                    b.ToTable("StoreRelationshipCustomerMapping");
                });

            modelBuilder.Entity("CRM.Models.StoreRepresentDAO", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime");

                    b.Property<string>("Email")
                        .HasColumnType("varchar(500) CHARACTER SET utf8mb4")
                        .HasMaxLength(500);

                    b.Property<string>("Name")
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<string>("Phone")
                        .HasColumnType("varchar(20) CHARACTER SET utf8mb4")
                        .HasMaxLength(20);

                    b.Property<long?>("PositionId")
                        .HasColumnType("bigint");

                    b.Property<long>("StoreId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("PositionId");

                    b.HasIndex("StoreId");

                    b.ToTable("StoreRepresent");
                });

            modelBuilder.Entity("CRM.Models.StoreStatusDAO", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(500) CHARACTER SET utf8mb4")
                        .HasMaxLength(500);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(500) CHARACTER SET utf8mb4")
                        .HasMaxLength(500);

                    b.HasKey("Id");

                    b.ToTable("StoreStatus","ENUM");
                });

            modelBuilder.Entity("CRM.Models.StoreTypeDAO", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(500) CHARACTER SET utf8mb4")
                        .HasMaxLength(500);

                    b.Property<long?>("ColorId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(500) CHARACTER SET utf8mb4")
                        .HasMaxLength(500);

                    b.Property<Guid>("RowId")
                        .HasColumnType("char(36)");

                    b.Property<long>("StatusId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<bool>("Used")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.HasIndex("ColorId");

                    b.HasIndex("StatusId");

                    b.ToTable("StoreType","MDM");
                });

            modelBuilder.Entity("CRM.Models.StoreWarrantyServiceDAO", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Detail")
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<string>("Name")
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<long>("StoreId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("StoreId");

                    b.ToTable("StoreWarrantyService");
                });

            modelBuilder.Entity("CRM.Models.SupplierDAO", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Address")
                        .HasColumnType("varchar(2000) CHARACTER SET utf8mb4")
                        .HasMaxLength(2000);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(500) CHARACTER SET utf8mb4")
                        .HasMaxLength(500);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .HasMaxLength(4000);

                    b.Property<long?>("DistrictId")
                        .HasColumnType("bigint");

                    b.Property<string>("Email")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(500) CHARACTER SET utf8mb4")
                        .HasMaxLength(500);

                    b.Property<long?>("NationId")
                        .HasColumnType("bigint");

                    b.Property<string>("OwnerName")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<long?>("PersonInChargeId")
                        .HasColumnType("bigint");

                    b.Property<string>("Phone")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<long?>("ProvinceId")
                        .HasColumnType("bigint");

                    b.Property<Guid>("RowId")
                        .HasColumnType("char(36)");

                    b.Property<long>("StatusId")
                        .HasColumnType("bigint");

                    b.Property<string>("TaxCode")
                        .HasColumnType("varchar(500) CHARACTER SET utf8mb4")
                        .HasMaxLength(500);

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<bool>("Used")
                        .HasColumnType("tinyint(1)");

                    b.Property<long?>("WardId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("DistrictId");

                    b.HasIndex("NationId");

                    b.HasIndex("PersonInChargeId");

                    b.HasIndex("ProvinceId");

                    b.HasIndex("StatusId");

                    b.HasIndex("WardId");

                    b.ToTable("Supplier","MDM");
                });

            modelBuilder.Entity("CRM.Models.TaxTypeDAO", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(500) CHARACTER SET utf8mb4")
                        .HasMaxLength(500);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(500) CHARACTER SET utf8mb4")
                        .HasMaxLength(500);

                    b.Property<decimal>("Percentage")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<Guid>("RowId")
                        .HasColumnType("char(36)");

                    b.Property<long>("StatusId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<bool>("Used")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.HasIndex("StatusId");

                    b.ToTable("TaxType","MDM");
                });

            modelBuilder.Entity("CRM.Models.TicketDAO", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long?>("AppUserClosedId")
                        .HasColumnType("bigint");

                    b.Property<long?>("AppUserResolvedId")
                        .HasColumnType("bigint");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .HasMaxLength(4000);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<long>("CreatorId")
                        .HasColumnType("bigint");

                    b.Property<long>("CustomerId")
                        .HasColumnType("bigint");

                    b.Property<long>("CustomerTypeId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<long?>("DepartmentId")
                        .HasColumnType("bigint");

                    b.Property<long?>("EntityReferenceId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("FinishDate")
                        .HasColumnType("datetime");

                    b.Property<long?>("FirstRespTimeRemaining")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("FirstResponeTime")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("FirstResponseAt")
                        .HasColumnType("datetime");

                    b.Property<long?>("HoldingTime")
                        .HasColumnType("bigint");

                    b.Property<bool?>("IsAlerted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("IsAlertedFRT")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("IsClose")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("IsEscalated")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("IsEscalatedFRT")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("IsOpen")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("IsWait")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("IsWork")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastHoldingAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("LastResponseAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.Property<string>("Phone")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("ProcessDate")
                        .HasColumnType("datetime");

                    b.Property<long?>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("ReceiveDate")
                        .HasColumnType("datetime");

                    b.Property<long?>("RelatedCallLogId")
                        .HasColumnType("bigint");

                    b.Property<long?>("RelatedTicketId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ReraisedTimes")
                        .HasColumnType("bigint");

                    b.Property<string>("ResolveContent")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<long?>("ResolveMinute")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ResolveTime")
                        .HasColumnType("datetime");

                    b.Property<long?>("ResolveTimeRemaining")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ResolvedAt")
                        .HasColumnType("datetime");

                    b.Property<long?>("ResponseMethodId")
                        .HasColumnType("bigint");

                    b.Property<long>("SLA")
                        .HasColumnType("bigint");

                    b.Property<long?>("SLAOverTime")
                        .HasColumnType("bigint");

                    b.Property<long?>("SLAPolicyId")
                        .HasColumnType("bigint");

                    b.Property<long?>("SLAStatusId")
                        .HasColumnType("bigint");

                    b.Property<long>("StatusId")
                        .HasColumnType("bigint");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("varchar(500) CHARACTER SET utf8mb4")
                        .HasMaxLength(500);

                    b.Property<long>("TicketIssueLevelId")
                        .HasColumnType("bigint");

                    b.Property<string>("TicketNumber")
                        .IsRequired()
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<long>("TicketPriorityId")
                        .HasColumnType("bigint");

                    b.Property<long?>("TicketResolveTypeId")
                        .HasColumnType("bigint");

                    b.Property<long>("TicketSourceId")
                        .HasColumnType("bigint");

                    b.Property<long>("TicketStatusId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<bool>("Used")
                        .HasColumnType("tinyint(1)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("closedAt")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("AppUserClosedId");

                    b.HasIndex("AppUserResolvedId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("CustomerTypeId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("EntityReferenceId");

                    b.HasIndex("ProductId");

                    b.HasIndex("RelatedCallLogId");

                    b.HasIndex("RelatedTicketId");

                    b.HasIndex("SLAPolicyId");

                    b.HasIndex("SLAStatusId");

                    b.HasIndex("StatusId");

                    b.HasIndex("TicketIssueLevelId");

                    b.HasIndex("TicketPriorityId");

                    b.HasIndex("TicketResolveTypeId");

                    b.HasIndex("TicketSourceId");

                    b.HasIndex("TicketStatusId");

                    b.HasIndex("UserId");

                    b.ToTable("Ticket");
                });

            modelBuilder.Entity("CRM.Models.TicketGeneratedIdDAO", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<bool>("Used")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.ToTable("TicketGeneratedId");
                });

            modelBuilder.Entity("CRM.Models.TicketGroupDAO", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.Property<long>("OrderNumber")
                        .HasColumnType("bigint");

                    b.Property<long>("StatusId")
                        .HasColumnType("bigint");

                    b.Property<long>("TicketTypeId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<bool>("Used")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.HasIndex("StatusId");

                    b.HasIndex("TicketTypeId");

                    b.ToTable("TicketGroup");
                });

            modelBuilder.Entity("CRM.Models.TicketIssueLevelDAO", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.Property<long>("OrderNumber")
                        .HasColumnType("bigint");

                    b.Property<long>("SLA")
                        .HasColumnType("bigint");

                    b.Property<long>("StatusId")
                        .HasColumnType("bigint");

                    b.Property<long>("TicketGroupId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<bool>("Used")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.HasIndex("StatusId");

                    b.HasIndex("TicketGroupId");

                    b.ToTable("TicketIssueLevel");
                });

            modelBuilder.Entity("CRM.Models.TicketOfDepartmentDAO", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<long>("DepartmentId")
                        .HasColumnType("bigint");

                    b.Property<string>("Notes")
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .HasMaxLength(4000);

                    b.Property<long>("TicketId")
                        .HasColumnType("bigint");

                    b.Property<long>("TicketStatusId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("TicketId");

                    b.HasIndex("TicketStatusId");

                    b.ToTable("TicketOfDepartment");
                });

            modelBuilder.Entity("CRM.Models.TicketOfUserDAO", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Notes")
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .HasMaxLength(4000);

                    b.Property<long>("TicketId")
                        .HasColumnType("bigint");

                    b.Property<long>("TicketStatusId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("TicketId");

                    b.HasIndex("TicketStatusId");

                    b.HasIndex("UserId");

                    b.ToTable("TicketOfUser");
                });

            modelBuilder.Entity("CRM.Models.TicketPriorityDAO", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("ColorCode")
                        .HasColumnType("varchar(20) CHARACTER SET utf8mb4")
                        .HasMaxLength(20);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.Property<long?>("OrderNumber")
                        .HasColumnType("bigint");

                    b.Property<long>("StatusId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<bool>("Used")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.HasIndex("StatusId");

                    b.ToTable("TicketPriority");
                });

            modelBuilder.Entity("CRM.Models.TicketResolveTypeDAO", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("TicketResolveType","ENUM");
                });

            modelBuilder.Entity("CRM.Models.TicketSourceDAO", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.Property<long>("OrderNumber")
                        .HasColumnType("bigint");

                    b.Property<long>("StatusId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<bool>("Used")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.HasIndex("StatusId");

                    b.ToTable("TicketSource");
                });

            modelBuilder.Entity("CRM.Models.TicketStatusDAO", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("ColorCode")
                        .IsRequired()
                        .HasColumnType("varchar(20) CHARACTER SET utf8mb4")
                        .HasMaxLength(20);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.Property<long>("OrderNumber")
                        .HasColumnType("bigint");

                    b.Property<long>("StatusId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<bool>("Used")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.HasIndex("StatusId");

                    b.ToTable("TicketStatus","MDM");
                });

            modelBuilder.Entity("CRM.Models.TicketTypeDAO", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.Property<string>("ColorCode")
                        .IsRequired()
                        .HasColumnType("varchar(20) CHARACTER SET utf8mb4")
                        .HasMaxLength(20);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.Property<long>("StatusId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<bool>("Used")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.HasIndex("StatusId");

                    b.ToTable("TicketType");
                });

            modelBuilder.Entity("CRM.Models.UnitOfMeasureDAO", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(500) CHARACTER SET utf8mb4")
                        .HasMaxLength(500);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .HasMaxLength(3000);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(500) CHARACTER SET utf8mb4")
                        .HasMaxLength(500);

                    b.Property<Guid>("RowId")
                        .HasColumnType("char(36)");

                    b.Property<long>("StatusId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<bool>("Used")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.HasIndex("StatusId");

                    b.ToTable("UnitOfMeasure","MDM");
                });

            modelBuilder.Entity("CRM.Models.UnitOfMeasureGroupingContentDAO", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<long?>("Factor")
                        .HasColumnType("bigint");

                    b.Property<Guid>("RowId")
                        .HasColumnType("char(36)");

                    b.Property<long>("UnitOfMeasureGroupingId")
                        .HasColumnType("bigint");

                    b.Property<long>("UnitOfMeasureId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UnitOfMeasureGroupingId");

                    b.HasIndex("UnitOfMeasureId");

                    b.ToTable("UnitOfMeasureGroupingContent","MDM");
                });

            modelBuilder.Entity("CRM.Models.UnitOfMeasureGroupingDAO", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(500) CHARACTER SET utf8mb4")
                        .HasMaxLength(500);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(500) CHARACTER SET utf8mb4")
                        .HasMaxLength(500);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(500) CHARACTER SET utf8mb4")
                        .HasMaxLength(500);

                    b.Property<Guid>("RowId")
                        .HasColumnType("char(36)");

                    b.Property<long>("StatusId")
                        .HasColumnType("bigint");

                    b.Property<long>("UnitOfMeasureId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<bool>("Used")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.HasIndex("StatusId");

                    b.HasIndex("UnitOfMeasureId");

                    b.ToTable("UnitOfMeasureGrouping","MDM");
                });

            modelBuilder.Entity("CRM.Models.UsedVariationDAO", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("UsedVariation","ENUM");
                });

            modelBuilder.Entity("CRM.Models.VariationDAO", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(500) CHARACTER SET utf8mb4")
                        .HasMaxLength(500);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(500) CHARACTER SET utf8mb4")
                        .HasMaxLength(500);

                    b.Property<Guid>("RowId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<bool>("Used")
                        .HasColumnType("tinyint(1)");

                    b.Property<long>("VariationGroupingId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("VariationGroupingId");

                    b.ToTable("Variation","MDM");
                });

            modelBuilder.Entity("CRM.Models.VariationGroupingDAO", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(500) CHARACTER SET utf8mb4")
                        .HasMaxLength(500);

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<Guid>("RowId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<bool>("Used")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("VariationGrouping","MDM");
                });

            modelBuilder.Entity("CRM.Models.WardDAO", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(500) CHARACTER SET utf8mb4")
                        .HasMaxLength(500);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<long>("DistrictId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(500) CHARACTER SET utf8mb4")
                        .HasMaxLength(500);

                    b.Property<long?>("Priority")
                        .HasColumnType("bigint");

                    b.Property<Guid>("RowId")
                        .HasColumnType("char(36)");

                    b.Property<long>("StatusId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<bool>("Used")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.HasIndex("DistrictId");

                    b.HasIndex("StatusId");

                    b.ToTable("Ward","MDM");
                });

            modelBuilder.Entity("CRM.Models.WarehouseDAO", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Address")
                        .HasColumnType("varchar(500) CHARACTER SET utf8mb4")
                        .HasMaxLength(500);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(500) CHARACTER SET utf8mb4")
                        .HasMaxLength(500);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<long?>("DistrictId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(500) CHARACTER SET utf8mb4")
                        .HasMaxLength(500);

                    b.Property<long>("OrganizationId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ProvinceId")
                        .HasColumnType("bigint");

                    b.Property<Guid>("RowId")
                        .HasColumnType("char(36)");

                    b.Property<long>("StatusId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<long?>("WardId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("DistrictId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("ProvinceId");

                    b.HasIndex("StatusId");

                    b.HasIndex("WardId");

                    b.ToTable("Warehouse","MDM");
                });

            modelBuilder.Entity("CRM.Models.WorkflowDefinitionDAO", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<long>("CreatorId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<long?>("ModifierId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(500) CHARACTER SET utf8mb4")
                        .HasMaxLength(500);

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime");

                    b.Property<long>("StatusId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<long>("WorkflowTypeId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("ModifierId");

                    b.HasIndex("StatusId");

                    b.HasIndex("WorkflowTypeId");

                    b.ToTable("WorkflowDefinition","WF");
                });

            modelBuilder.Entity("CRM.Models.WorkflowDirectionDAO", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("BodyMailForCreator")
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .HasMaxLength(4000);

                    b.Property<string>("BodyMailForNextStep")
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .HasMaxLength(4000);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<long>("FromStepId")
                        .HasColumnType("bigint");

                    b.Property<string>("SubjectMailForCreator")
                        .HasColumnType("varchar(500) CHARACTER SET utf8mb4")
                        .HasMaxLength(500);

                    b.Property<string>("SubjectMailForNextStep")
                        .HasColumnType("varchar(500) CHARACTER SET utf8mb4")
                        .HasMaxLength(500);

                    b.Property<long>("ToStepId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<long>("WorkflowDefinitionId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("FromStepId");

                    b.HasIndex("ToStepId");

                    b.HasIndex("WorkflowDefinitionId");

                    b.ToTable("WorkflowDirection","WF");
                });

            modelBuilder.Entity("CRM.Models.WorkflowParameterDAO", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<long>("WorkflowDefinitionId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("WorkflowDefinitionId");

                    b.ToTable("WorkflowParameter","WF");
                });

            modelBuilder.Entity("CRM.Models.WorkflowStateDAO", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(500) CHARACTER SET utf8mb4")
                        .HasMaxLength(500);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(500) CHARACTER SET utf8mb4")
                        .HasMaxLength(500);

                    b.HasKey("Id");

                    b.ToTable("WorkflowState","WF");
                });

            modelBuilder.Entity("CRM.Models.WorkflowStepDAO", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("BodyMailForReject")
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .HasMaxLength(4000);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(500) CHARACTER SET utf8mb4")
                        .HasMaxLength(500);

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.Property<string>("SubjectMailForReject")
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .HasMaxLength(4000);

                    b.Property<long>("WorkflowDefinitionId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("WorkflowDefinitionId");

                    b.ToTable("WorkflowStep","WF");
                });

            modelBuilder.Entity("CRM.Models.WorkflowTypeDAO", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(500) CHARACTER SET utf8mb4")
                        .HasMaxLength(500);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(500) CHARACTER SET utf8mb4")
                        .HasMaxLength(500);

                    b.HasKey("Id");

                    b.ToTable("WorkflowType","WF");
                });

            modelBuilder.Entity("CRM.Models.ActionDAO", b =>
                {
                    b.HasOne("CRM.Models.MenuDAO", "Menu")
                        .WithMany("Actions")
                        .HasForeignKey("MenuId")
                        .HasConstraintName("FK_Action_Menu")
                        .IsRequired();
                });

            modelBuilder.Entity("CRM.Models.ActionPageMappingDAO", b =>
                {
                    b.HasOne("CRM.Models.ActionDAO", "Action")
                        .WithMany("ActionPageMappings")
                        .HasForeignKey("ActionId")
                        .HasConstraintName("FK_ActionPageMapping_Action")
                        .IsRequired();

                    b.HasOne("CRM.Models.PageDAO", "Page")
                        .WithMany("ActionPageMappings")
                        .HasForeignKey("PageId")
                        .HasConstraintName("FK_ActionPageMapping_Page")
                        .IsRequired();
                });

            modelBuilder.Entity("CRM.Models.AppUserDAO", b =>
                {
                    b.HasOne("CRM.Models.OrganizationDAO", "Organization")
                        .WithMany("AppUsers")
                        .HasForeignKey("OrganizationId")
                        .HasConstraintName("FK_AppUser_Organization")
                        .IsRequired();

                    b.HasOne("CRM.Models.SexDAO", "Sex")
                        .WithMany("AppUsers")
                        .HasForeignKey("SexId")
                        .HasConstraintName("FK_AppUser_Sex")
                        .IsRequired();

                    b.HasOne("CRM.Models.StatusDAO", "Status")
                        .WithMany("AppUsers")
                        .HasForeignKey("StatusId")
                        .HasConstraintName("FK_AppUser_UserStatus")
                        .IsRequired();
                });

            modelBuilder.Entity("CRM.Models.AppUserRoleMappingDAO", b =>
                {
                    b.HasOne("CRM.Models.AppUserDAO", "AppUser")
                        .WithMany("AppUserRoleMappings")
                        .HasForeignKey("AppUserId")
                        .HasConstraintName("FK_AppUserRoleMapping_AppUser")
                        .IsRequired();

                    b.HasOne("CRM.Models.RoleDAO", "Role")
                        .WithMany("AppUserRoleMappings")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK_AppUserRoleMapping_Role")
                        .IsRequired();
                });

            modelBuilder.Entity("CRM.Models.AuditLogPropertyDAO", b =>
                {
                    b.HasOne("CRM.Models.AppUserDAO", "AppUser")
                        .WithMany("AuditLogProperties")
                        .HasForeignKey("AppUserId")
                        .HasConstraintName("FK_AuditLogProperty_AppUser");
                });

            modelBuilder.Entity("CRM.Models.BrandDAO", b =>
                {
                    b.HasOne("CRM.Models.StatusDAO", "Status")
                        .WithMany("Brands")
                        .HasForeignKey("StatusId")
                        .HasConstraintName("FK_Brand_Status")
                        .IsRequired();
                });

            modelBuilder.Entity("CRM.Models.BusinessConcentrationLevelDAO", b =>
                {
                    b.HasOne("CRM.Models.StoreDAO", "Store")
                        .WithMany("BusinessConcentrationLevels")
                        .HasForeignKey("StoreId")
                        .HasConstraintName("FK_BusinessConcentrationLevel_Store");
                });

            modelBuilder.Entity("CRM.Models.CallEmotionDAO", b =>
                {
                    b.HasOne("CRM.Models.StatusDAO", "Status")
                        .WithMany("CallEmotions")
                        .HasForeignKey("StatusId")
                        .HasConstraintName("FK_CallEmotion_Status")
                        .IsRequired();
                });

            modelBuilder.Entity("CRM.Models.CallLogDAO", b =>
                {
                    b.HasOne("CRM.Models.AppUserDAO", "AppUser")
                        .WithMany("CallLogAppUsers")
                        .HasForeignKey("AppUserId")
                        .HasConstraintName("FK_CallLog_AppUser")
                        .IsRequired();

                    b.HasOne("CRM.Models.CallCategoryDAO", "CallCategory")
                        .WithMany("CallLogs")
                        .HasForeignKey("CallCategoryId")
                        .HasConstraintName("FK_CallLog_CallCategory");

                    b.HasOne("CRM.Models.CallEmotionDAO", "CallEmotion")
                        .WithMany("CallLogs")
                        .HasForeignKey("CallEmotionId")
                        .HasConstraintName("FK_CallLog_CallEmotion");

                    b.HasOne("CRM.Models.CallStatusDAO", "CallStatus")
                        .WithMany("CallLogs")
                        .HasForeignKey("CallStatusId")
                        .HasConstraintName("FK_CallLog_CallStatus");

                    b.HasOne("CRM.Models.CallTypeDAO", "CallType")
                        .WithMany("CallLogs")
                        .HasForeignKey("CallTypeId")
                        .HasConstraintName("FK_CallLog_CallType")
                        .IsRequired();

                    b.HasOne("CRM.Models.AppUserDAO", "Creator")
                        .WithMany("CallLogCreators")
                        .HasForeignKey("CreatorId")
                        .HasConstraintName("FK_CallLog_AppUser1")
                        .IsRequired();

                    b.HasOne("CRM.Models.EntityReferenceDAO", "EntityReference")
                        .WithMany("CallLogs")
                        .HasForeignKey("EntityReferenceId")
                        .HasConstraintName("FK_CallLog_CallLogEntityType")
                        .IsRequired();
                });

            modelBuilder.Entity("CRM.Models.CallTypeDAO", b =>
                {
                    b.HasOne("CRM.Models.StatusDAO", "Status")
                        .WithMany("CallTypes")
                        .HasForeignKey("StatusId")
                        .HasConstraintName("FK_CallType_Status")
                        .IsRequired();
                });

            modelBuilder.Entity("CRM.Models.CategoryDAO", b =>
                {
                    b.HasOne("CRM.Models.ImageDAO", "Image")
                        .WithMany("Categories")
                        .HasForeignKey("ImageId")
                        .HasConstraintName("FK_Category_Image");

                    b.HasOne("CRM.Models.CategoryDAO", "Parent")
                        .WithMany("InverseParent")
                        .HasForeignKey("ParentId")
                        .HasConstraintName("FK_Category_Category");

                    b.HasOne("CRM.Models.StatusDAO", "Status")
                        .WithMany("Categories")
                        .HasForeignKey("StatusId")
                        .HasConstraintName("FK_Category_Status")
                        .IsRequired();
                });

            modelBuilder.Entity("CRM.Models.CompanyActivityDAO", b =>
                {
                    b.HasOne("CRM.Models.ActivityPriorityDAO", "ActivityPriority")
                        .WithMany("CompanyActivities")
                        .HasForeignKey("ActivityPriorityId")
                        .HasConstraintName("FK_CompanyActivity_ActivityPriority");

                    b.HasOne("CRM.Models.ActivityStatusDAO", "ActivityStatus")
                        .WithMany("CompanyActivities")
                        .HasForeignKey("ActivityStatusId")
                        .HasConstraintName("FK_CompanyActivity_ActivityStatus")
                        .IsRequired();

                    b.HasOne("CRM.Models.ActivityTypeDAO", "ActivityType")
                        .WithMany("CompanyActivities")
                        .HasForeignKey("ActivityTypeId")
                        .HasConstraintName("FK_CompanyActivity_ActivityType")
                        .IsRequired();

                    b.HasOne("CRM.Models.AppUserDAO", "AppUser")
                        .WithMany("CompanyActivities")
                        .HasForeignKey("AppUserId")
                        .HasConstraintName("FK_CompanyActivity_AppUser")
                        .IsRequired();

                    b.HasOne("CRM.Models.CompanyDAO", "Company")
                        .WithMany("CompanyActivities")
                        .HasForeignKey("CompanyId")
                        .HasConstraintName("FK_CompanyActivity_Company")
                        .IsRequired();
                });

            modelBuilder.Entity("CRM.Models.CompanyCallLogMappingDAO", b =>
                {
                    b.HasOne("CRM.Models.CallLogDAO", "CallLog")
                        .WithMany("CompanyCallLogMappings")
                        .HasForeignKey("CallLogId")
                        .HasConstraintName("FK_CompanyCallLogMapping_CallLog")
                        .IsRequired();

                    b.HasOne("CRM.Models.CompanyDAO", "Company")
                        .WithMany("CompanyCallLogMappings")
                        .HasForeignKey("CompanyId")
                        .HasConstraintName("FK_CompanyCallLogMapping_Company")
                        .IsRequired();
                });

            modelBuilder.Entity("CRM.Models.CompanyDAO", b =>
                {
                    b.HasOne("CRM.Models.AppUserDAO", "AppUser")
                        .WithMany("CompanyAppUsers")
                        .HasForeignKey("AppUserId")
                        .HasConstraintName("FK_Company_AppUser");

                    b.HasOne("CRM.Models.CompanyStatusDAO", "CompanyStatus")
                        .WithMany("Companies")
                        .HasForeignKey("CompanyStatusId")
                        .HasConstraintName("FK_Company_CompanyStatus");

                    b.HasOne("CRM.Models.AppUserDAO", "Creator")
                        .WithMany("CompanyCreators")
                        .HasForeignKey("CreatorId")
                        .HasConstraintName("FK_Company_AppUser1")
                        .IsRequired();

                    b.HasOne("CRM.Models.CurrencyDAO", "Currency")
                        .WithMany("Companies")
                        .HasForeignKey("CurrencyId")
                        .HasConstraintName("FK_Company_Currency");

                    b.HasOne("CRM.Models.CustomerLeadDAO", "CustomerLead")
                        .WithMany("Companies")
                        .HasForeignKey("CustomerLeadId")
                        .HasConstraintName("FK_Company_CustomerLead");

                    b.HasOne("CRM.Models.DistrictDAO", "District")
                        .WithMany("Companies")
                        .HasForeignKey("DistrictId")
                        .HasConstraintName("FK_Company_District2");

                    b.HasOne("CRM.Models.NationDAO", "Nation")
                        .WithMany("Companies")
                        .HasForeignKey("NationId")
                        .HasConstraintName("FK_Company_Nation2");

                    b.HasOne("CRM.Models.CompanyDAO", "Parent")
                        .WithMany("InverseParent")
                        .HasForeignKey("ParentId")
                        .HasConstraintName("FK_Company_Comapny");

                    b.HasOne("CRM.Models.ProfessionDAO", "Profession")
                        .WithMany("Companies")
                        .HasForeignKey("ProfessionId")
                        .HasConstraintName("FK_Company_Profession");

                    b.HasOne("CRM.Models.ProvinceDAO", "Province")
                        .WithMany("Companies")
                        .HasForeignKey("ProvinceId")
                        .HasConstraintName("FK_Company_Province2");
                });

            modelBuilder.Entity("CRM.Models.CompanyEmailCCMappingDAO", b =>
                {
                    b.HasOne("CRM.Models.AppUserDAO", "AppUser")
                        .WithMany("CompanyEmailCCMappings")
                        .HasForeignKey("AppUserId")
                        .HasConstraintName("FK_CompanyEmailCCMapping_AppUser")
                        .IsRequired();

                    b.HasOne("CRM.Models.CompanyEmailDAO", "CompanyEmail")
                        .WithMany("CompanyEmailCCMappings")
                        .HasForeignKey("CompanyEmailId")
                        .HasConstraintName("FK_CompanyEmailCCMapping_CompanyEmail")
                        .IsRequired();
                });

            modelBuilder.Entity("CRM.Models.CompanyEmailDAO", b =>
                {
                    b.HasOne("CRM.Models.CompanyDAO", "Company")
                        .WithMany("CompanyEmails")
                        .HasForeignKey("CompanyId")
                        .HasConstraintName("FK_CompanyEmail_Company")
                        .IsRequired();

                    b.HasOne("CRM.Models.AppUserDAO", "Creator")
                        .WithMany("CompanyEmails")
                        .HasForeignKey("CreatorId")
                        .HasConstraintName("FK_CompanyEmail_AppUser")
                        .IsRequired();

                    b.HasOne("CRM.Models.EmailStatusDAO", "EmailStatus")
                        .WithMany("CompanyEmails")
                        .HasForeignKey("EmailStatusId")
                        .HasConstraintName("FK_CompanyEmail_EmailStatus")
                        .IsRequired();
                });

            modelBuilder.Entity("CRM.Models.CompanyFileGroupingDAO", b =>
                {
                    b.HasOne("CRM.Models.CompanyDAO", "Company")
                        .WithMany("CompanyFileGroupings")
                        .HasForeignKey("CompanyId")
                        .HasConstraintName("FK_CompanyFileGroupMapping_Company1")
                        .IsRequired();

                    b.HasOne("CRM.Models.AppUserDAO", "Creator")
                        .WithMany("CompanyFileGroupings")
                        .HasForeignKey("CreatorId")
                        .HasConstraintName("FK_CompanyFileGroupMapping_AppUser")
                        .IsRequired();

                    b.HasOne("CRM.Models.FileTypeDAO", "FileType")
                        .WithMany("CompanyFileGroupings")
                        .HasForeignKey("FileTypeId")
                        .HasConstraintName("FK_CompanyFileGroupMapping_FileType")
                        .IsRequired();
                });

            modelBuilder.Entity("CRM.Models.CompanyFileMappingDAO", b =>
                {
                    b.HasOne("CRM.Models.CompanyFileGroupingDAO", "CompanyFileGrouping")
                        .WithMany("CompanyFileMappings")
                        .HasForeignKey("CompanyFileGroupingId")
                        .HasConstraintName("FK_CompanyFileMapping_Company")
                        .IsRequired();

                    b.HasOne("CRM.Models.FileDAO", "File")
                        .WithMany("CompanyFileMappings")
                        .HasForeignKey("FileId")
                        .HasConstraintName("FK_CompanyFileMapping_File")
                        .IsRequired();
                });

            modelBuilder.Entity("CRM.Models.ContactActivityDAO", b =>
                {
                    b.HasOne("CRM.Models.ActivityPriorityDAO", "ActivityPriority")
                        .WithMany("ContactActivities")
                        .HasForeignKey("ActivityPriorityId")
                        .HasConstraintName("FK_ContactActivity_ActivityPriority");

                    b.HasOne("CRM.Models.ActivityStatusDAO", "ActivityStatus")
                        .WithMany("ContactActivities")
                        .HasForeignKey("ActivityStatusId")
                        .HasConstraintName("FK_ContactActivity_ActivityStatus")
                        .IsRequired();

                    b.HasOne("CRM.Models.ActivityTypeDAO", "ActivityType")
                        .WithMany("ContactActivities")
                        .HasForeignKey("ActivityTypeId")
                        .HasConstraintName("FK_ContactActivity_ActivityType")
                        .IsRequired();

                    b.HasOne("CRM.Models.AppUserDAO", "AppUser")
                        .WithMany("ContactActivities")
                        .HasForeignKey("AppUserId")
                        .HasConstraintName("FK_ContactActivity_AppUser")
                        .IsRequired();

                    b.HasOne("CRM.Models.ContactDAO", "Contact")
                        .WithMany("ContactActivities")
                        .HasForeignKey("ContactId")
                        .HasConstraintName("FK_ContactActivity_Contact")
                        .IsRequired();
                });

            modelBuilder.Entity("CRM.Models.ContactCallLogMappingDAO", b =>
                {
                    b.HasOne("CRM.Models.CallLogDAO", "CallLog")
                        .WithMany("ContactCallLogMappings")
                        .HasForeignKey("CallLogId")
                        .HasConstraintName("FK_ContactCallLogMapping_CallLog")
                        .IsRequired();

                    b.HasOne("CRM.Models.ContactDAO", "Contact")
                        .WithMany("ContactCallLogMappings")
                        .HasForeignKey("ContactId")
                        .HasConstraintName("FK_ContactCallLogMapping_Contact")
                        .IsRequired();
                });

            modelBuilder.Entity("CRM.Models.ContactDAO", b =>
                {
                    b.HasOne("CRM.Models.AppUserDAO", "AppUser")
                        .WithMany("ContactAppUsers")
                        .HasForeignKey("AppUserId")
                        .HasConstraintName("FK_Contact_AppUser1");

                    b.HasOne("CRM.Models.CompanyDAO", "Company")
                        .WithMany("Contacts")
                        .HasForeignKey("CompanyId")
                        .HasConstraintName("FK_Contact_Company1");

                    b.HasOne("CRM.Models.ContactStatusDAO", "ContactStatus")
                        .WithMany("Contacts")
                        .HasForeignKey("ContactStatusId")
                        .HasConstraintName("FK_Contact_ContactStatus");

                    b.HasOne("CRM.Models.AppUserDAO", "Creator")
                        .WithMany("ContactCreators")
                        .HasForeignKey("CreatorId")
                        .HasConstraintName("FK_Contact_AppUser")
                        .IsRequired();

                    b.HasOne("CRM.Models.CustomerLeadDAO", "CustomerLead")
                        .WithMany("Contacts")
                        .HasForeignKey("CustomerLeadId")
                        .HasConstraintName("FK_Contact_CustomerLead");

                    b.HasOne("CRM.Models.DistrictDAO", "District")
                        .WithMany("Contacts")
                        .HasForeignKey("DistrictId")
                        .HasConstraintName("FK_Contact_District");

                    b.HasOne("CRM.Models.ImageDAO", "Image")
                        .WithMany("Contacts")
                        .HasForeignKey("ImageId")
                        .HasConstraintName("FK_Contact_Image1");

                    b.HasOne("CRM.Models.NationDAO", "Nation")
                        .WithMany("Contacts")
                        .HasForeignKey("NationId")
                        .HasConstraintName("FK_Contact_Nation");

                    b.HasOne("CRM.Models.PositionDAO", "Position")
                        .WithMany("Contacts")
                        .HasForeignKey("PositionId")
                        .HasConstraintName("FK_Contact_Position");

                    b.HasOne("CRM.Models.ProfessionDAO", "Profession")
                        .WithMany("Contacts")
                        .HasForeignKey("ProfessionId")
                        .HasConstraintName("FK_Contact_Profession");

                    b.HasOne("CRM.Models.ProvinceDAO", "Province")
                        .WithMany("Contacts")
                        .HasForeignKey("ProvinceId")
                        .HasConstraintName("FK_Contact_Province");

                    b.HasOne("CRM.Models.SexDAO", "Sex")
                        .WithMany("Contacts")
                        .HasForeignKey("SexId")
                        .HasConstraintName("FK_Contact_Sex");
                });

            modelBuilder.Entity("CRM.Models.ContactEmailCCMappingDAO", b =>
                {
                    b.HasOne("CRM.Models.AppUserDAO", "AppUser")
                        .WithMany("ContactEmailCCMappings")
                        .HasForeignKey("AppUserId")
                        .HasConstraintName("FK_ContactEmailCCMapping_AppUser")
                        .IsRequired();

                    b.HasOne("CRM.Models.ContactEmailDAO", "ContactEmail")
                        .WithMany("ContactEmailCCMappings")
                        .HasForeignKey("ContactEmailId")
                        .HasConstraintName("FK_ContactEmailCCMapping_ContactEmail")
                        .IsRequired();
                });

            modelBuilder.Entity("CRM.Models.ContactEmailDAO", b =>
                {
                    b.HasOne("CRM.Models.ContactDAO", "Contact")
                        .WithMany("ContactEmails")
                        .HasForeignKey("ContactId")
                        .HasConstraintName("FK_ContactEmail_Contact")
                        .IsRequired();

                    b.HasOne("CRM.Models.AppUserDAO", "Creator")
                        .WithMany("ContactEmails")
                        .HasForeignKey("CreatorId")
                        .HasConstraintName("FK_ContactEmail_AppUser")
                        .IsRequired();

                    b.HasOne("CRM.Models.EmailStatusDAO", "EmailStatus")
                        .WithMany("ContactEmails")
                        .HasForeignKey("EmailStatusId")
                        .HasConstraintName("FK_ContactEmail_EmailStatus")
                        .IsRequired();
                });

            modelBuilder.Entity("CRM.Models.ContactFileGroupingDAO", b =>
                {
                    b.HasOne("CRM.Models.ContactDAO", "Contact")
                        .WithMany("ContactFileGroupings")
                        .HasForeignKey("ContactId")
                        .HasConstraintName("FK_ContactFileGrouping_Contact")
                        .IsRequired();

                    b.HasOne("CRM.Models.AppUserDAO", "Creator")
                        .WithMany("ContactFileGroupings")
                        .HasForeignKey("CreatorId")
                        .HasConstraintName("FK_ContactFileGrouping_AppUser")
                        .IsRequired();

                    b.HasOne("CRM.Models.FileTypeDAO", "FileType")
                        .WithMany("ContactFileGroupings")
                        .HasForeignKey("FileTypeId")
                        .HasConstraintName("FK_ContactFileGrouping_FileType")
                        .IsRequired();
                });

            modelBuilder.Entity("CRM.Models.ContactFileMappingDAO", b =>
                {
                    b.HasOne("CRM.Models.ContactFileGroupingDAO", "ContactFileGrouping")
                        .WithMany("ContactFileMappings")
                        .HasForeignKey("ContactFileGroupingId")
                        .HasConstraintName("FK_ContactFileMapping_ContactFileGrouping")
                        .IsRequired();

                    b.HasOne("CRM.Models.FileDAO", "File")
                        .WithMany("ContactFileMappings")
                        .HasForeignKey("FileId")
                        .HasConstraintName("FK_ContactFileMapping_File")
                        .IsRequired();
                });

            modelBuilder.Entity("CRM.Models.ContractContactMappingDAO", b =>
                {
                    b.HasOne("CRM.Models.ContactDAO", "Contact")
                        .WithMany("ContractContactMappings")
                        .HasForeignKey("ContactId")
                        .HasConstraintName("FK_ContractContactMapping_Contact")
                        .IsRequired();

                    b.HasOne("CRM.Models.ContractDAO", "Contract")
                        .WithMany("ContractContactMappings")
                        .HasForeignKey("ContractId")
                        .HasConstraintName("FK_ContractContactMapping_Contract")
                        .IsRequired();
                });

            modelBuilder.Entity("CRM.Models.ContractDAO", b =>
                {
                    b.HasOne("CRM.Models.AppUserDAO", "AppUser")
                        .WithMany("ContractAppUsers")
                        .HasForeignKey("AppUserId")
                        .HasConstraintName("FK_Contract_AppUser")
                        .IsRequired();

                    b.HasOne("CRM.Models.CompanyDAO", "Company")
                        .WithMany("Contracts")
                        .HasForeignKey("CompanyId")
                        .HasConstraintName("FK_Contract_Company");

                    b.HasOne("CRM.Models.ContractStatusDAO", "ContractStatus")
                        .WithMany("Contracts")
                        .HasForeignKey("ContractStatusId")
                        .HasConstraintName("FK_Contract_ContractStatus")
                        .IsRequired();

                    b.HasOne("CRM.Models.ContractTypeDAO", "ContractType")
                        .WithMany("Contracts")
                        .HasForeignKey("ContractTypeId")
                        .HasConstraintName("FK_Contract_ContractType")
                        .IsRequired();

                    b.HasOne("CRM.Models.AppUserDAO", "Creator")
                        .WithMany("ContractCreators")
                        .HasForeignKey("CreatorId")
                        .HasConstraintName("FK_Contract_AppUser1")
                        .IsRequired();

                    b.HasOne("CRM.Models.CurrencyDAO", "Currency")
                        .WithMany("Contracts")
                        .HasForeignKey("CurrencyId")
                        .HasConstraintName("FK_Contract_Currency")
                        .IsRequired();

                    b.HasOne("CRM.Models.CustomerDAO", "Customer")
                        .WithMany("Contracts")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("FK_Contract_Customer")
                        .IsRequired();

                    b.HasOne("CRM.Models.DistrictDAO", "InvoiceDistrict")
                        .WithMany("ContractInvoiceDistricts")
                        .HasForeignKey("InvoiceDistrictId")
                        .HasConstraintName("FK_Contract_District");

                    b.HasOne("CRM.Models.NationDAO", "InvoiceNation")
                        .WithMany("ContractInvoiceNations")
                        .HasForeignKey("InvoiceNationId")
                        .HasConstraintName("FK_Contract_Nation");

                    b.HasOne("CRM.Models.ProvinceDAO", "InvoiceProvince")
                        .WithMany("ContractInvoiceProvinces")
                        .HasForeignKey("InvoiceProvinceId")
                        .HasConstraintName("FK_Contract_Province");

                    b.HasOne("CRM.Models.OpportunityDAO", "Opportunity")
                        .WithMany("Contracts")
                        .HasForeignKey("OpportunityId")
                        .HasConstraintName("FK_Contract_Opportunity");

                    b.HasOne("CRM.Models.OrganizationDAO", "Organization")
                        .WithMany("Contracts")
                        .HasForeignKey("OrganizationId")
                        .HasConstraintName("FK_Contract_Organization")
                        .IsRequired();

                    b.HasOne("CRM.Models.PaymentStatusDAO", "PaymentStatus")
                        .WithMany("Contracts")
                        .HasForeignKey("PaymentStatusId")
                        .HasConstraintName("FK_Contract_PaymentStatus")
                        .IsRequired();

                    b.HasOne("CRM.Models.DistrictDAO", "ReceiveDistrict")
                        .WithMany("ContractReceiveDistricts")
                        .HasForeignKey("ReceiveDistrictId")
                        .HasConstraintName("FK_Contract_District1");

                    b.HasOne("CRM.Models.NationDAO", "ReceiveNation")
                        .WithMany("ContractReceiveNations")
                        .HasForeignKey("ReceiveNationId")
                        .HasConstraintName("FK_Contract_Nation1");

                    b.HasOne("CRM.Models.ProvinceDAO", "ReceiveProvince")
                        .WithMany("ContractReceiveProvinces")
                        .HasForeignKey("ReceiveProvinceId")
                        .HasConstraintName("FK_Contract_Province1");
                });

            modelBuilder.Entity("CRM.Models.ContractFileGroupingDAO", b =>
                {
                    b.HasOne("CRM.Models.ContractDAO", "Contract")
                        .WithMany("ContractFileGroupings")
                        .HasForeignKey("ContractId")
                        .HasConstraintName("FK_ContractFileGrouping_Contract")
                        .IsRequired();

                    b.HasOne("CRM.Models.AppUserDAO", "Creator")
                        .WithMany("ContractFileGroupings")
                        .HasForeignKey("CreatorId")
                        .HasConstraintName("FK_ContractFileGrouping_AppUser")
                        .IsRequired();

                    b.HasOne("CRM.Models.FileTypeDAO", "FileType")
                        .WithMany("ContractFileGroupings")
                        .HasForeignKey("FileTypeId")
                        .HasConstraintName("FK_ContractFileGrouping_FileType")
                        .IsRequired();
                });

            modelBuilder.Entity("CRM.Models.ContractFileMappingDAO", b =>
                {
                    b.HasOne("CRM.Models.ContractFileGroupingDAO", "ContractFileGrouping")
                        .WithMany("ContractFileMappings")
                        .HasForeignKey("ContractFileGroupingId")
                        .HasConstraintName("FK_ContractFileMapping_ContractFileGrouping")
                        .IsRequired();

                    b.HasOne("CRM.Models.FileDAO", "File")
                        .WithMany("ContractFileMappings")
                        .HasForeignKey("FileId")
                        .HasConstraintName("FK_ContractFileMapping_File")
                        .IsRequired();
                });

            modelBuilder.Entity("CRM.Models.ContractItemDetailDAO", b =>
                {
                    b.HasOne("CRM.Models.ContractDAO", "Contract")
                        .WithMany("ContractItemDetails")
                        .HasForeignKey("ContractId")
                        .HasConstraintName("FK_ContractItemDetail_Contract")
                        .IsRequired();

                    b.HasOne("CRM.Models.ItemDAO", "Item")
                        .WithMany("ContractItemDetails")
                        .HasForeignKey("ItemId")
                        .HasConstraintName("FK_ContractItemDetail_Item")
                        .IsRequired();

                    b.HasOne("CRM.Models.UnitOfMeasureDAO", "PrimaryUnitOfMeasure")
                        .WithMany("ContractItemDetailPrimaryUnitOfMeasures")
                        .HasForeignKey("PrimaryUnitOfMeasureId")
                        .HasConstraintName("FK_ContractItemDetail_UnitOfMeasure1")
                        .IsRequired();

                    b.HasOne("CRM.Models.TaxTypeDAO", "TaxType")
                        .WithMany("ContractItemDetails")
                        .HasForeignKey("TaxTypeId")
                        .HasConstraintName("FK_ContractItemDetail_TaxType")
                        .IsRequired();

                    b.HasOne("CRM.Models.UnitOfMeasureDAO", "UnitOfMeasure")
                        .WithMany("ContractItemDetailUnitOfMeasures")
                        .HasForeignKey("UnitOfMeasureId")
                        .HasConstraintName("FK_ContractItemDetail_UnitOfMeasure")
                        .IsRequired();
                });

            modelBuilder.Entity("CRM.Models.ContractPaymentHistoryDAO", b =>
                {
                    b.HasOne("CRM.Models.ContractDAO", "Contract")
                        .WithMany("ContractPaymentHistories")
                        .HasForeignKey("ContractId")
                        .HasConstraintName("FK_ContractPaymentHistory_Contract")
                        .IsRequired();
                });

            modelBuilder.Entity("CRM.Models.CustomerCCEmailHistoryDAO", b =>
                {
                    b.HasOne("CRM.Models.CustomerEmailHistoryDAO", "CustomerEmailHistory")
                        .WithMany("CustomerCCEmailHistories")
                        .HasForeignKey("CustomerEmailHistoryId")
                        .HasConstraintName("FK_CustomerCCEmailHistory_CustomerEmailHistory")
                        .IsRequired();
                });

            modelBuilder.Entity("CRM.Models.CustomerCallLogMappingDAO", b =>
                {
                    b.HasOne("CRM.Models.CallLogDAO", "CallLog")
                        .WithMany("CustomerCallLogMappings")
                        .HasForeignKey("CallLogId")
                        .HasConstraintName("FK_CustomerCallLogMapping_CallLog")
                        .IsRequired();

                    b.HasOne("CRM.Models.CustomerDAO", "Customer")
                        .WithMany("CustomerCallLogMappings")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("FK_CustomerCallLogMapping_Customer")
                        .IsRequired();
                });

            modelBuilder.Entity("CRM.Models.CustomerCustomerGroupingMappingDAO", b =>
                {
                    b.HasOne("CRM.Models.CustomerGroupingDAO", "CustomerGrouping")
                        .WithMany("CustomerCustomerGroupingMappings")
                        .HasForeignKey("CustomerGroupingId")
                        .HasConstraintName("FK_CustomerCustomerGroupingMapping_CustomerGrouping")
                        .IsRequired();

                    b.HasOne("CRM.Models.CustomerDAO", "Customer")
                        .WithMany("CustomerCustomerGroupingMappings")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("FK_CustomerCustomerGroupingMapping_Customer")
                        .IsRequired();
                });

            modelBuilder.Entity("CRM.Models.CustomerDAO", b =>
                {
                    b.HasOne("CRM.Models.AppUserDAO", "AppUser")
                        .WithMany("CustomerAppUsers")
                        .HasForeignKey("AppUserId")
                        .HasConstraintName("FK_Customer_AppUser1")
                        .IsRequired();

                    b.HasOne("CRM.Models.BusinessTypeDAO", "BusinessType")
                        .WithMany("Customers")
                        .HasForeignKey("BusinessTypeId")
                        .HasConstraintName("FK_Customer_BusinessType");

                    b.HasOne("CRM.Models.CompanyDAO", "Company")
                        .WithMany("CustomerCompanies")
                        .HasForeignKey("CompanyId")
                        .HasConstraintName("FK_Customer_Company");

                    b.HasOne("CRM.Models.AppUserDAO", "Creator")
                        .WithMany("CustomerCreators")
                        .HasForeignKey("CreatorId")
                        .HasConstraintName("FK_Customer_AppUser")
                        .IsRequired();

                    b.HasOne("CRM.Models.CustomerResourceDAO", "CustomerResource")
                        .WithMany("Customers")
                        .HasForeignKey("CustomerResourceId")
                        .HasConstraintName("FK_Customer_CustomerResource");

                    b.HasOne("CRM.Models.CustomerTypeDAO", "CustomerType")
                        .WithMany("Customers")
                        .HasForeignKey("CustomerTypeId")
                        .HasConstraintName("FK_Customer_CustomerType")
                        .IsRequired();

                    b.HasOne("CRM.Models.DistrictDAO", "District")
                        .WithMany("Customers")
                        .HasForeignKey("DistrictId")
                        .HasConstraintName("FK_Customer_District");

                    b.HasOne("CRM.Models.NationDAO", "Nation")
                        .WithMany("Customers")
                        .HasForeignKey("NationId")
                        .HasConstraintName("FK_Customer_Nation");

                    b.HasOne("CRM.Models.CompanyDAO", "ParentCompany")
                        .WithMany("CustomerParentCompanies")
                        .HasForeignKey("ParentCompanyId")
                        .HasConstraintName("FK_Customer_Company1");

                    b.HasOne("CRM.Models.ProfessionDAO", "Profession")
                        .WithMany("Customers")
                        .HasForeignKey("ProfessionId")
                        .HasConstraintName("FK_Customer_Profession");

                    b.HasOne("CRM.Models.ProvinceDAO", "Province")
                        .WithMany("Customers")
                        .HasForeignKey("ProvinceId")
                        .HasConstraintName("FK_Customer_Province");

                    b.HasOne("CRM.Models.SexDAO", "Sex")
                        .WithMany("Customers")
                        .HasForeignKey("SexId")
                        .HasConstraintName("FK_Customer_Sex");

                    b.HasOne("CRM.Models.StatusDAO", "Status")
                        .WithMany("Customers")
                        .HasForeignKey("StatusId")
                        .HasConstraintName("FK_Customer_Status")
                        .IsRequired();

                    b.HasOne("CRM.Models.WardDAO", "Ward")
                        .WithMany("Customers")
                        .HasForeignKey("WardId")
                        .HasConstraintName("FK_Customer_Ward");
                });

            modelBuilder.Entity("CRM.Models.CustomerEmailDAO", b =>
                {
                    b.HasOne("CRM.Models.CustomerDAO", "Customer")
                        .WithMany("CustomerEmails")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("FK_CustomerEmail_Customer")
                        .IsRequired();

                    b.HasOne("CRM.Models.EmailTypeDAO", "EmailType")
                        .WithMany("CustomerEmails")
                        .HasForeignKey("EmailTypeId")
                        .HasConstraintName("FK_CustomerEmail_EmailType")
                        .IsRequired();
                });

            modelBuilder.Entity("CRM.Models.CustomerEmailHistoryDAO", b =>
                {
                    b.HasOne("CRM.Models.AppUserDAO", "Creator")
                        .WithMany("CustomerEmailHistories")
                        .HasForeignKey("CreatorId")
                        .HasConstraintName("FK_CustomerEmailHistory_AppUser")
                        .IsRequired();

                    b.HasOne("CRM.Models.CustomerDAO", "Customer")
                        .WithMany("CustomerEmailHistories")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("FK_CustomerEmailHistory_Customer")
                        .IsRequired();

                    b.HasOne("CRM.Models.EmailStatusDAO", "EmailStatus")
                        .WithMany("CustomerEmailHistories")
                        .HasForeignKey("EmailStatusId")
                        .HasConstraintName("FK_CustomerEmailHistory_EmailStatus")
                        .IsRequired();
                });

            modelBuilder.Entity("CRM.Models.CustomerFeedbackDAO", b =>
                {
                    b.HasOne("CRM.Models.CustomerFeedbackTypeDAO", "CustomerFeedbackType")
                        .WithMany("CustomerFeedbacks")
                        .HasForeignKey("CustomerFeedbackTypeId")
                        .HasConstraintName("FK_CustomerFeedback_CustomerFeedbackType");

                    b.HasOne("CRM.Models.CustomerDAO", "Customer")
                        .WithMany("CustomerFeedbacks")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("FK_CustomerFeedback_Customer");

                    b.HasOne("CRM.Models.StatusDAO", "Status")
                        .WithMany("CustomerFeedbacks")
                        .HasForeignKey("StatusId")
                        .HasConstraintName("FK_CustomerFeedback_Status");
                });

            modelBuilder.Entity("CRM.Models.CustomerGroupingDAO", b =>
                {
                    b.HasOne("CRM.Models.CustomerTypeDAO", "CustomerType")
                        .WithMany("CustomerGroupings")
                        .HasForeignKey("CustomerTypeId")
                        .HasConstraintName("FK_CustomerGrouping_CustomerType")
                        .IsRequired();

                    b.HasOne("CRM.Models.CustomerGroupingDAO", "Parent")
                        .WithMany("InverseParent")
                        .HasForeignKey("ParentId")
                        .HasConstraintName("FK_CustomerGrouping_CustomerGrouping");

                    b.HasOne("CRM.Models.StatusDAO", "Status")
                        .WithMany("CustomerGroupings")
                        .HasForeignKey("StatusId")
                        .HasConstraintName("FK_CustomerGrouping_Status")
                        .IsRequired();
                });

            modelBuilder.Entity("CRM.Models.CustomerLeadActivityDAO", b =>
                {
                    b.HasOne("CRM.Models.ActivityPriorityDAO", "ActivityPriority")
                        .WithMany("CustomerLeadActivities")
                        .HasForeignKey("ActivityPriorityId")
                        .HasConstraintName("FK_CustomerLeadActivity_ActivityPriority");

                    b.HasOne("CRM.Models.ActivityStatusDAO", "ActivityStatus")
                        .WithMany("CustomerLeadActivities")
                        .HasForeignKey("ActivityStatusId")
                        .HasConstraintName("FK_CustomerLeadActivity_ActivityStatus")
                        .IsRequired();

                    b.HasOne("CRM.Models.ActivityTypeDAO", "ActivityType")
                        .WithMany("CustomerLeadActivities")
                        .HasForeignKey("ActivityTypeId")
                        .HasConstraintName("FK_CustomerLeadActivity_ActivityType")
                        .IsRequired();

                    b.HasOne("CRM.Models.AppUserDAO", "AppUser")
                        .WithMany("CustomerLeadActivities")
                        .HasForeignKey("AppUserId")
                        .HasConstraintName("FK_CustomerLeadActivity_AppUser")
                        .IsRequired();

                    b.HasOne("CRM.Models.CustomerLeadDAO", "CustomerLead")
                        .WithMany("CustomerLeadActivities")
                        .HasForeignKey("CustomerLeadId")
                        .HasConstraintName("FK_CustomerLeadActivity_CustomerLead")
                        .IsRequired();
                });

            modelBuilder.Entity("CRM.Models.CustomerLeadCallLogMappingDAO", b =>
                {
                    b.HasOne("CRM.Models.CallLogDAO", "CallLog")
                        .WithMany("CustomerLeadCallLogMappings")
                        .HasForeignKey("CallLogId")
                        .HasConstraintName("FK_CustomerLeadCallLogMapping_CallLog")
                        .IsRequired();

                    b.HasOne("CRM.Models.CustomerLeadDAO", "CustomerLead")
                        .WithMany("CustomerLeadCallLogMappings")
                        .HasForeignKey("CustomerLeadId")
                        .HasConstraintName("FK_CustomerLeadCallLogMapping_CustomerLead")
                        .IsRequired();
                });

            modelBuilder.Entity("CRM.Models.CustomerLeadDAO", b =>
                {
                    b.HasOne("CRM.Models.AppUserDAO", "AppUser")
                        .WithMany("CustomerLeadAppUsers")
                        .HasForeignKey("AppUserId")
                        .HasConstraintName("FK_CustomerLead_AppUser");

                    b.HasOne("CRM.Models.CompanyDAO", "Company")
                        .WithMany("CustomerLeads")
                        .HasForeignKey("CompanyId")
                        .HasConstraintName("FK_CustomerLead_Company");

                    b.HasOne("CRM.Models.AppUserDAO", "Creator")
                        .WithMany("CustomerLeadCreators")
                        .HasForeignKey("CreatorId")
                        .HasConstraintName("FK_CustomerLead_AppUser1")
                        .IsRequired();

                    b.HasOne("CRM.Models.CurrencyDAO", "Currency")
                        .WithMany("CustomerLeads")
                        .HasForeignKey("CurrencyId")
                        .HasConstraintName("FK_CustomerLead_Currency");

                    b.HasOne("CRM.Models.CustomerLeadLevelDAO", "CustomerLeadLevel")
                        .WithMany("CustomerLeads")
                        .HasForeignKey("CustomerLeadLevelId")
                        .HasConstraintName("FK_CustomerLead_CustomerLeadLevel");

                    b.HasOne("CRM.Models.CustomerLeadSourceDAO", "CustomerLeadSource")
                        .WithMany("CustomerLeads")
                        .HasForeignKey("CustomerLeadSourceId")
                        .HasConstraintName("FK_CustomerLead_CustomerLeadSource");

                    b.HasOne("CRM.Models.CustomerLeadStatusDAO", "CustomerLeadStatus")
                        .WithMany("CustomerLeads")
                        .HasForeignKey("CustomerLeadStatusId")
                        .HasConstraintName("FK_CustomerLead_CustomerLeadStatus");

                    b.HasOne("CRM.Models.DistrictDAO", "District")
                        .WithMany("CustomerLeads")
                        .HasForeignKey("DistrictId")
                        .HasConstraintName("FK_CustomerLead_District");

                    b.HasOne("CRM.Models.NationDAO", "Nation")
                        .WithMany("CustomerLeads")
                        .HasForeignKey("NationId")
                        .HasConstraintName("FK_CustomerLead_Nation");

                    b.HasOne("CRM.Models.ProfessionDAO", "Profession")
                        .WithMany("CustomerLeads")
                        .HasForeignKey("ProfessionId")
                        .HasConstraintName("FK_CustomerLead_Profession");

                    b.HasOne("CRM.Models.ProvinceDAO", "Province")
                        .WithMany("CustomerLeads")
                        .HasForeignKey("ProvinceId")
                        .HasConstraintName("FK_CustomerLead_Province");

                    b.HasOne("CRM.Models.SexDAO", "Sex")
                        .WithMany("CustomerLeads")
                        .HasForeignKey("SexId")
                        .HasConstraintName("FK_CustomerLead_Sex");
                });

            modelBuilder.Entity("CRM.Models.CustomerLeadEmailCCMappingDAO", b =>
                {
                    b.HasOne("CRM.Models.AppUserDAO", "AppUser")
                        .WithMany("CustomerLeadEmailCCMappings")
                        .HasForeignKey("AppUserId")
                        .HasConstraintName("FK_CustomerLeadEmailCCMapping_AppUser")
                        .IsRequired();

                    b.HasOne("CRM.Models.CustomerLeadEmailDAO", "CustomerLeadEmail")
                        .WithMany("CustomerLeadEmailCCMappings")
                        .HasForeignKey("CustomerLeadEmailId")
                        .HasConstraintName("FK_CustomerLeadEmailCCMapping_CustomerLeadEmail")
                        .IsRequired();
                });

            modelBuilder.Entity("CRM.Models.CustomerLeadEmailDAO", b =>
                {
                    b.HasOne("CRM.Models.AppUserDAO", "Creator")
                        .WithMany("CustomerLeadEmails")
                        .HasForeignKey("CreatorId")
                        .HasConstraintName("FK_CustomerLeadEmailMapping_AppUser")
                        .IsRequired();

                    b.HasOne("CRM.Models.CustomerLeadDAO", "CustomerLead")
                        .WithMany("CustomerLeadEmails")
                        .HasForeignKey("CustomerLeadId")
                        .HasConstraintName("FK_CustomerLeadEmail_CustomerLead")
                        .IsRequired();

                    b.HasOne("CRM.Models.EmailStatusDAO", "EmailStatus")
                        .WithMany("CustomerLeadEmails")
                        .HasForeignKey("EmailStatusId")
                        .HasConstraintName("FK_CustomerLeadEmailMapping_EmailStatus")
                        .IsRequired();
                });

            modelBuilder.Entity("CRM.Models.CustomerLeadFileGroupDAO", b =>
                {
                    b.HasOne("CRM.Models.AppUserDAO", "Creator")
                        .WithMany("CustomerLeadFileGroups")
                        .HasForeignKey("CreatorId")
                        .HasConstraintName("FK_CustomerLeadFileGroupMapping_AppUser")
                        .IsRequired();

                    b.HasOne("CRM.Models.CustomerLeadDAO", "CustomerLead")
                        .WithMany("CustomerLeadFileGroups")
                        .HasForeignKey("CustomerLeadId")
                        .HasConstraintName("FK_CustomerLeadFileGroup_CustomerLead")
                        .IsRequired();

                    b.HasOne("CRM.Models.FileTypeDAO", "FileType")
                        .WithMany("CustomerLeadFileGroups")
                        .HasForeignKey("FileTypeId")
                        .HasConstraintName("FK_CustomerLeadFileGroup_FileType")
                        .IsRequired();
                });

            modelBuilder.Entity("CRM.Models.CustomerLeadFileMappingDAO", b =>
                {
                    b.HasOne("CRM.Models.CustomerLeadFileGroupDAO", "CustomerLeadFileGroup")
                        .WithMany("CustomerLeadFileMappings")
                        .HasForeignKey("CustomerLeadFileGroupId")
                        .HasConstraintName("FK_CustomerLeadFileMapping_CustomerLead")
                        .IsRequired();

                    b.HasOne("CRM.Models.FileDAO", "File")
                        .WithMany("CustomerLeadFileMappings")
                        .HasForeignKey("FileId")
                        .HasConstraintName("FK_CustomerLeadFileMapping_File")
                        .IsRequired();
                });

            modelBuilder.Entity("CRM.Models.CustomerLeadItemMappingDAO", b =>
                {
                    b.HasOne("CRM.Models.CustomerLeadDAO", "CustomerLead")
                        .WithMany("CustomerLeadItemMappings")
                        .HasForeignKey("CustomerLeadId")
                        .HasConstraintName("FK_CustomerLeadItemMapping_CustomerLead")
                        .IsRequired();

                    b.HasOne("CRM.Models.ItemDAO", "Item")
                        .WithMany("CustomerLeadItemMappings")
                        .HasForeignKey("ItemId")
                        .HasConstraintName("FK_CustomerLeadItemMapping_Item")
                        .IsRequired();

                    b.HasOne("CRM.Models.UnitOfMeasureDAO", "UnitOfMeasure")
                        .WithMany("CustomerLeadItemMappings")
                        .HasForeignKey("UnitOfMeasureId")
                        .HasConstraintName("FK_CustomerLeadItemMapping_UnitOfMeasure")
                        .IsRequired();
                });

            modelBuilder.Entity("CRM.Models.CustomerLevelDAO", b =>
                {
                    b.HasOne("CRM.Models.StatusDAO", "Status")
                        .WithMany("CustomerLevels")
                        .HasForeignKey("StatusId")
                        .HasConstraintName("FK_CustomerLevel_Status")
                        .IsRequired();
                });

            modelBuilder.Entity("CRM.Models.CustomerPhoneDAO", b =>
                {
                    b.HasOne("CRM.Models.CustomerDAO", "Customer")
                        .WithMany("CustomerPhones")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("FK_CustomerPhone_Customer")
                        .IsRequired();

                    b.HasOne("CRM.Models.PhoneTypeDAO", "PhoneType")
                        .WithMany("CustomerPhones")
                        .HasForeignKey("PhoneTypeId")
                        .HasConstraintName("FK_CustomerPhone_PhoneType")
                        .IsRequired();
                });

            modelBuilder.Entity("CRM.Models.CustomerPointHistoryDAO", b =>
                {
                    b.HasOne("CRM.Models.CustomerDAO", "Customer")
                        .WithMany("CustomerPointHistories")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("FK_CustomerPointHistory_Customer")
                        .IsRequired();
                });

            modelBuilder.Entity("CRM.Models.CustomerResourceDAO", b =>
                {
                    b.HasOne("CRM.Models.StatusDAO", "Status")
                        .WithMany("CustomerResources")
                        .HasForeignKey("StatusId")
                        .HasConstraintName("FK_CustomerResource_Status")
                        .IsRequired();
                });

            modelBuilder.Entity("CRM.Models.CustomerSalesOrderContentDAO", b =>
                {
                    b.HasOne("CRM.Models.CustomerSalesOrderDAO", "CustomerSalesOrder")
                        .WithMany("CustomerSalesOrderContents")
                        .HasForeignKey("CustomerSalesOrderId")
                        .HasConstraintName("FK_CustomerSalesOrderContent_CustomerSalesOrder")
                        .IsRequired();

                    b.HasOne("CRM.Models.EditedPriceStatusDAO", "EditedPriceStatus")
                        .WithMany("CustomerSalesOrderContents")
                        .HasForeignKey("EditedPriceStatusId")
                        .HasConstraintName("FK_CustomerSalesOrderContent_EditedPriceStatus")
                        .IsRequired();

                    b.HasOne("CRM.Models.ItemDAO", "Item")
                        .WithMany("CustomerSalesOrderContents")
                        .HasForeignKey("ItemId")
                        .HasConstraintName("FK_CustomerSalesOrderContent_Item")
                        .IsRequired();

                    b.HasOne("CRM.Models.UnitOfMeasureDAO", "PrimaryUnitOfMeasure")
                        .WithMany("CustomerSalesOrderContentPrimaryUnitOfMeasures")
                        .HasForeignKey("PrimaryUnitOfMeasureId")
                        .HasConstraintName("FK_CustomerSalesOrderContent_UnitOfMeasure1")
                        .IsRequired();

                    b.HasOne("CRM.Models.TaxTypeDAO", "TaxType")
                        .WithMany("CustomerSalesOrderContents")
                        .HasForeignKey("TaxTypeId")
                        .HasConstraintName("FK_CustomerSalesOrderContent_TaxType")
                        .IsRequired();

                    b.HasOne("CRM.Models.UnitOfMeasureDAO", "UnitOfMeasure")
                        .WithMany("CustomerSalesOrderContentUnitOfMeasures")
                        .HasForeignKey("UnitOfMeasureId")
                        .HasConstraintName("FK_CustomerSalesOrderContent_UnitOfMeasure")
                        .IsRequired();
                });

            modelBuilder.Entity("CRM.Models.CustomerSalesOrderDAO", b =>
                {
                    b.HasOne("CRM.Models.ContractDAO", "Contract")
                        .WithMany("CustomerSalesOrders")
                        .HasForeignKey("ContractId")
                        .HasConstraintName("FK_CustomerSalesOrder_Contract");

                    b.HasOne("CRM.Models.AppUserDAO", "Creator")
                        .WithMany("CustomerSalesOrderCreators")
                        .HasForeignKey("CreatorId")
                        .HasConstraintName("FK_CustomerSalesOrder_AppUser1")
                        .IsRequired();

                    b.HasOne("CRM.Models.CustomerDAO", "Customer")
                        .WithMany("CustomerSalesOrders")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("FK_CustomerSalesOrder_Customer")
                        .IsRequired();

                    b.HasOne("CRM.Models.CustomerTypeDAO", "CustomerType")
                        .WithMany("CustomerSalesOrders")
                        .HasForeignKey("CustomerTypeId")
                        .HasConstraintName("FK_CustomerSalesOrder_CustomerType")
                        .IsRequired();

                    b.HasOne("CRM.Models.DistrictDAO", "DeliveryDistrict")
                        .WithMany("CustomerSalesOrderDeliveryDistricts")
                        .HasForeignKey("DeliveryDistrictId")
                        .HasConstraintName("FK_CustomerSalesOrder_District1");

                    b.HasOne("CRM.Models.NationDAO", "DeliveryNation")
                        .WithMany("CustomerSalesOrderDeliveryNations")
                        .HasForeignKey("DeliveryNationId")
                        .HasConstraintName("FK_CustomerSalesOrder_Nation1");

                    b.HasOne("CRM.Models.ProvinceDAO", "DeliveryProvince")
                        .WithMany("CustomerSalesOrderDeliveryProvinces")
                        .HasForeignKey("DeliveryProvinceId")
                        .HasConstraintName("FK_CustomerSalesOrder_Province1");

                    b.HasOne("CRM.Models.WardDAO", "DeliveryWard")
                        .WithMany("CustomerSalesOrderDeliveryWards")
                        .HasForeignKey("DeliveryWardId")
                        .HasConstraintName("FK_CustomerSalesOrder_Ward1");

                    b.HasOne("CRM.Models.EditedPriceStatusDAO", "EditedPriceStatus")
                        .WithMany("CustomerSalesOrders")
                        .HasForeignKey("EditedPriceStatusId")
                        .HasConstraintName("FK_CustomerSalesOrder_EditedPriceStatus")
                        .IsRequired();

                    b.HasOne("CRM.Models.DistrictDAO", "InvoiceDistrict")
                        .WithMany("CustomerSalesOrderInvoiceDistricts")
                        .HasForeignKey("InvoiceDistrictId")
                        .HasConstraintName("FK_CustomerSalesOrder_District");

                    b.HasOne("CRM.Models.NationDAO", "InvoiceNation")
                        .WithMany("CustomerSalesOrderInvoiceNations")
                        .HasForeignKey("InvoiceNationId")
                        .HasConstraintName("FK_CustomerSalesOrder_Nation");

                    b.HasOne("CRM.Models.ProvinceDAO", "InvoiceProvince")
                        .WithMany("CustomerSalesOrderInvoiceProvinces")
                        .HasForeignKey("InvoiceProvinceId")
                        .HasConstraintName("FK_CustomerSalesOrder_Province");

                    b.HasOne("CRM.Models.WardDAO", "InvoiceWard")
                        .WithMany("CustomerSalesOrderInvoiceWards")
                        .HasForeignKey("InvoiceWardId")
                        .HasConstraintName("FK_CustomerSalesOrder_Ward");

                    b.HasOne("CRM.Models.OpportunityDAO", "Opportunity")
                        .WithMany("CustomerSalesOrders")
                        .HasForeignKey("OpportunityId")
                        .HasConstraintName("FK_CustomerSalesOrder_Opportunity");

                    b.HasOne("CRM.Models.OrderPaymentStatusDAO", "OrderPaymentStatus")
                        .WithMany("CustomerSalesOrders")
                        .HasForeignKey("OrderPaymentStatusId")
                        .HasConstraintName("FK_CustomerSalesOrder_OrderPaymentStatus");

                    b.HasOne("CRM.Models.OrganizationDAO", "Organization")
                        .WithMany("CustomerSalesOrders")
                        .HasForeignKey("OrganizationId")
                        .HasConstraintName("FK_CustomerSalesOrder_Organization")
                        .IsRequired();

                    b.HasOne("CRM.Models.RequestStateDAO", "RequestState")
                        .WithMany("CustomerSalesOrders")
                        .HasForeignKey("RequestStateId")
                        .HasConstraintName("FK_CustomerSalesOrder_RequestState");

                    b.HasOne("CRM.Models.AppUserDAO", "SalesEmployee")
                        .WithMany("CustomerSalesOrderSalesEmployees")
                        .HasForeignKey("SalesEmployeeId")
                        .HasConstraintName("FK_CustomerSalesOrder_AppUser")
                        .IsRequired();
                });

            modelBuilder.Entity("CRM.Models.CustomerSalesOrderPaymentHistoryDAO", b =>
                {
                    b.HasOne("CRM.Models.CustomerSalesOrderDAO", "CustomerSalesOrder")
                        .WithMany("CustomerSalesOrderPaymentHistories")
                        .HasForeignKey("CustomerSalesOrderId")
                        .HasConstraintName("FK_CustomerSalesOrderPaymentHistory_CustomerSalesOrder")
                        .IsRequired();
                });

            modelBuilder.Entity("CRM.Models.CustomerSalesOrderPromotionDAO", b =>
                {
                    b.HasOne("CRM.Models.CustomerSalesOrderDAO", "CustomerSalesOrder")
                        .WithMany("CustomerSalesOrderPromotions")
                        .HasForeignKey("CustomerSalesOrderId")
                        .HasConstraintName("FK_CustomerSalesOrderPromotion_CustomerSalesOrder")
                        .IsRequired();

                    b.HasOne("CRM.Models.ItemDAO", "Item")
                        .WithMany("CustomerSalesOrderPromotions")
                        .HasForeignKey("ItemId")
                        .HasConstraintName("FK_CustomerSalesOrderPromotion_Item")
                        .IsRequired();

                    b.HasOne("CRM.Models.UnitOfMeasureDAO", "PrimaryUnitOfMeasure")
                        .WithMany("CustomerSalesOrderPromotionPrimaryUnitOfMeasures")
                        .HasForeignKey("PrimaryUnitOfMeasureId")
                        .HasConstraintName("FK_CustomerSalesOrderPromotion_UnitOfMeasure1")
                        .IsRequired();

                    b.HasOne("CRM.Models.UnitOfMeasureDAO", "UnitOfMeasure")
                        .WithMany("CustomerSalesOrderPromotionUnitOfMeasures")
                        .HasForeignKey("UnitOfMeasureId")
                        .HasConstraintName("FK_CustomerSalesOrderPromotion_UnitOfMeasure")
                        .IsRequired();
                });

            modelBuilder.Entity("CRM.Models.DirectSalesOrderContentDAO", b =>
                {
                    b.HasOne("CRM.Models.DirectSalesOrderDAO", "DirectSalesOrder")
                        .WithMany("DirectSalesOrderContents")
                        .HasForeignKey("DirectSalesOrderId")
                        .HasConstraintName("FK_DirectSalesOrderContent_DirectSalesOrder")
                        .IsRequired();

                    b.HasOne("CRM.Models.EditedPriceStatusDAO", "EditedPriceStatus")
                        .WithMany("DirectSalesOrderContents")
                        .HasForeignKey("EditedPriceStatusId")
                        .HasConstraintName("FK_DirectSalesOrderContent_EditedPriceStatus")
                        .IsRequired();

                    b.HasOne("CRM.Models.ItemDAO", "Item")
                        .WithMany("DirectSalesOrderContents")
                        .HasForeignKey("ItemId")
                        .HasConstraintName("FK_DirectSalesOrderContent_Item")
                        .IsRequired();

                    b.HasOne("CRM.Models.UnitOfMeasureDAO", "PrimaryUnitOfMeasure")
                        .WithMany("DirectSalesOrderContentPrimaryUnitOfMeasures")
                        .HasForeignKey("PrimaryUnitOfMeasureId")
                        .HasConstraintName("FK_DirectSalesOrderContent_UnitOfMeasure1")
                        .IsRequired();

                    b.HasOne("CRM.Models.UnitOfMeasureDAO", "UnitOfMeasure")
                        .WithMany("DirectSalesOrderContentUnitOfMeasures")
                        .HasForeignKey("UnitOfMeasureId")
                        .HasConstraintName("FK_DirectSalesOrderContent_UnitOfMeasure")
                        .IsRequired();
                });

            modelBuilder.Entity("CRM.Models.DirectSalesOrderDAO", b =>
                {
                    b.HasOne("CRM.Models.StoreDAO", "BuyerStore")
                        .WithMany("DirectSalesOrders")
                        .HasForeignKey("BuyerStoreId")
                        .HasConstraintName("FK_DirectSalesOrder_Store")
                        .IsRequired();

                    b.HasOne("CRM.Models.AppUserDAO", "Creator")
                        .WithMany("DirectSalesOrderCreators")
                        .HasForeignKey("CreatorId")
                        .HasConstraintName("FK_DirectSalesOrder_AppUser1")
                        .IsRequired();

                    b.HasOne("CRM.Models.EditedPriceStatusDAO", "EditedPriceStatus")
                        .WithMany("DirectSalesOrders")
                        .HasForeignKey("EditedPriceStatusId")
                        .HasConstraintName("FK_DirectSalesOrder_EditedPriceStatus")
                        .IsRequired();

                    b.HasOne("CRM.Models.OrganizationDAO", "Organization")
                        .WithMany("DirectSalesOrders")
                        .HasForeignKey("OrganizationId")
                        .HasConstraintName("FK_DirectSalesOrder_Organization")
                        .IsRequired();

                    b.HasOne("CRM.Models.RequestStateDAO", "RequestState")
                        .WithMany("DirectSalesOrders")
                        .HasForeignKey("RequestStateId")
                        .HasConstraintName("FK_DirectSalesOrder_RequestState")
                        .IsRequired();

                    b.HasOne("CRM.Models.AppUserDAO", "SaleEmployee")
                        .WithMany("DirectSalesOrderSaleEmployees")
                        .HasForeignKey("SaleEmployeeId")
                        .HasConstraintName("FK_DirectSalesOrder_AppUser")
                        .IsRequired();
                });

            modelBuilder.Entity("CRM.Models.DirectSalesOrderPromotionDAO", b =>
                {
                    b.HasOne("CRM.Models.DirectSalesOrderDAO", "DirectSalesOrder")
                        .WithMany("DirectSalesOrderPromotions")
                        .HasForeignKey("DirectSalesOrderId")
                        .HasConstraintName("FK_DirectSalesOrderPromotion_DirectSalesOrder")
                        .IsRequired();

                    b.HasOne("CRM.Models.ItemDAO", "Item")
                        .WithMany("DirectSalesOrderPromotions")
                        .HasForeignKey("ItemId")
                        .HasConstraintName("FK_DirectSalesOrderPromotion_Item")
                        .IsRequired();

                    b.HasOne("CRM.Models.UnitOfMeasureDAO", "PrimaryUnitOfMeasure")
                        .WithMany("DirectSalesOrderPromotionPrimaryUnitOfMeasures")
                        .HasForeignKey("PrimaryUnitOfMeasureId")
                        .HasConstraintName("FK_DirectSalesOrderPromotion_UnitOfMeasure")
                        .IsRequired();

                    b.HasOne("CRM.Models.UnitOfMeasureDAO", "UnitOfMeasure")
                        .WithMany("DirectSalesOrderPromotionUnitOfMeasures")
                        .HasForeignKey("UnitOfMeasureId")
                        .HasConstraintName("FK_DirectSalesOrderPromotion_UnitOfMeasure1")
                        .IsRequired();
                });

            modelBuilder.Entity("CRM.Models.DistrictDAO", b =>
                {
                    b.HasOne("CRM.Models.ProvinceDAO", "Province")
                        .WithMany("Districts")
                        .HasForeignKey("ProvinceId")
                        .HasConstraintName("FK_District_Province")
                        .IsRequired();

                    b.HasOne("CRM.Models.StatusDAO", "Status")
                        .WithMany("Districts")
                        .HasForeignKey("StatusId")
                        .HasConstraintName("FK_District_Status")
                        .IsRequired();
                });

            modelBuilder.Entity("CRM.Models.FieldDAO", b =>
                {
                    b.HasOne("CRM.Models.FieldTypeDAO", "FieldType")
                        .WithMany("Fields")
                        .HasForeignKey("FieldTypeId")
                        .HasConstraintName("FK_Field_FieldType")
                        .IsRequired();

                    b.HasOne("CRM.Models.MenuDAO", "Menu")
                        .WithMany("Fields")
                        .HasForeignKey("MenuId")
                        .HasConstraintName("FK_PermissionField_Menu")
                        .IsRequired();
                });

            modelBuilder.Entity("CRM.Models.FileDAO", b =>
                {
                    b.HasOne("CRM.Models.AppUserDAO", "AppUser")
                        .WithMany("Files")
                        .HasForeignKey("AppUserId")
                        .HasConstraintName("FK_File_AppUser");
                });

            modelBuilder.Entity("CRM.Models.ImproveQualityServingDAO", b =>
                {
                    b.HasOne("CRM.Models.StoreDAO", "Store")
                        .WithMany("ImproveQualityServings")
                        .HasForeignKey("StoreId")
                        .HasConstraintName("FK_ImproveQualityServing_Store");
                });

            modelBuilder.Entity("CRM.Models.InventoryDAO", b =>
                {
                    b.HasOne("CRM.Models.ItemDAO", "Item")
                        .WithMany("Inventories")
                        .HasForeignKey("ItemId")
                        .HasConstraintName("FK_Inventory_Item")
                        .IsRequired();

                    b.HasOne("CRM.Models.WarehouseDAO", "Warehouse")
                        .WithMany("Inventories")
                        .HasForeignKey("WarehouseId")
                        .HasConstraintName("FK_Inventory_Warehouse")
                        .IsRequired();
                });

            modelBuilder.Entity("CRM.Models.InventoryHistoryDAO", b =>
                {
                    b.HasOne("CRM.Models.AppUserDAO", "AppUser")
                        .WithMany("InventoryHistories")
                        .HasForeignKey("AppUserId")
                        .HasConstraintName("FK_InventoryHistory_AppUser")
                        .IsRequired();

                    b.HasOne("CRM.Models.InventoryDAO", "Inventory")
                        .WithMany("InventoryHistories")
                        .HasForeignKey("InventoryId")
                        .HasConstraintName("FK_InventoryHistory_Inventory")
                        .IsRequired();
                });

            modelBuilder.Entity("CRM.Models.ItemDAO", b =>
                {
                    b.HasOne("CRM.Models.ProductDAO", "Product")
                        .WithMany("Items")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK_Item_Product")
                        .IsRequired();

                    b.HasOne("CRM.Models.StatusDAO", "Status")
                        .WithMany("Items")
                        .HasForeignKey("StatusId")
                        .HasConstraintName("FK_Item_Status")
                        .IsRequired();
                });

            modelBuilder.Entity("CRM.Models.ItemImageMappingDAO", b =>
                {
                    b.HasOne("CRM.Models.ImageDAO", "Image")
                        .WithMany("ItemImageMappings")
                        .HasForeignKey("ImageId")
                        .HasConstraintName("FK_ItemImageMapping_Image")
                        .IsRequired();

                    b.HasOne("CRM.Models.ItemDAO", "Item")
                        .WithMany("ItemImageMappings")
                        .HasForeignKey("ItemId")
                        .HasConstraintName("FK_ItemImageMapping_Item")
                        .IsRequired();
                });

            modelBuilder.Entity("CRM.Models.KnowledgeArticleDAO", b =>
                {
                    b.HasOne("CRM.Models.AppUserDAO", "Creator")
                        .WithMany("KnowledgeArticles")
                        .HasForeignKey("CreatorId")
                        .HasConstraintName("FK_KnowledgeArticle_AppUser")
                        .IsRequired();

                    b.HasOne("CRM.Models.KnowledgeGroupDAO", "Group")
                        .WithMany("KnowledgeArticles")
                        .HasForeignKey("GroupId")
                        .HasConstraintName("FK_KnowledgeArticle_KnowledgeGroup")
                        .IsRequired();

                    b.HasOne("CRM.Models.ItemDAO", "Item")
                        .WithMany("KnowledgeArticles")
                        .HasForeignKey("ItemId")
                        .HasConstraintName("FK_KnowledgeArticle_Item");

                    b.HasOne("CRM.Models.KMSStatusDAO", "KMSStatus")
                        .WithMany("KnowledgeArticles")
                        .HasForeignKey("KMSStatusId")
                        .HasConstraintName("FK_KnowledgeArticle_KMSStatus");

                    b.HasOne("CRM.Models.StatusDAO", "Status")
                        .WithMany("KnowledgeArticles")
                        .HasForeignKey("StatusId")
                        .HasConstraintName("FK_KnowledgeArticle_Status")
                        .IsRequired();
                });

            modelBuilder.Entity("CRM.Models.KnowledgeArticleKeywordDAO", b =>
                {
                    b.HasOne("CRM.Models.KnowledgeArticleDAO", "KnowledgeArticle")
                        .WithMany("KnowledgeArticleKeywords")
                        .HasForeignKey("KnowledgeArticleId")
                        .HasConstraintName("FK_KnowledgeArticleKeyword_KnowledgeArticle")
                        .IsRequired();
                });

            modelBuilder.Entity("CRM.Models.KnowledgeArticleOrganizationMappingDAO", b =>
                {
                    b.HasOne("CRM.Models.KnowledgeArticleDAO", "KnowledgeArticle")
                        .WithMany("KnowledgeArticleOrganizationMappings")
                        .HasForeignKey("KnowledgeArticleId")
                        .HasConstraintName("FK_KnowledgeArticleOrganizationMapping_KnowledgeArticle")
                        .IsRequired();

                    b.HasOne("CRM.Models.OrganizationDAO", "Organization")
                        .WithMany("KnowledgeArticleOrganizationMappings")
                        .HasForeignKey("OrganizationId")
                        .HasConstraintName("FK_KnowledgeArticleOrganizationMapping_Organization")
                        .IsRequired();
                });

            modelBuilder.Entity("CRM.Models.KnowledgeGroupDAO", b =>
                {
                    b.HasOne("CRM.Models.StatusDAO", "Status")
                        .WithMany("KnowledgeGroups")
                        .HasForeignKey("StatusId")
                        .HasConstraintName("FK_KnowledgeGroup_Status");
                });

            modelBuilder.Entity("CRM.Models.KpiGeneralContentDAO", b =>
                {
                    b.HasOne("CRM.Models.KpiCriteriaGeneralDAO", "KpiCriteriaGeneral")
                        .WithMany("KpiGeneralContents")
                        .HasForeignKey("KpiCriteriaGeneralId")
                        .HasConstraintName("FK_KpiGeneralContent_KpiCriteriaGeneral")
                        .IsRequired();

                    b.HasOne("CRM.Models.KpiGeneralDAO", "KpiGeneral")
                        .WithMany("KpiGeneralContents")
                        .HasForeignKey("KpiGeneralId")
                        .HasConstraintName("FK_KpiGeneralContent_KpiGeneral")
                        .IsRequired();

                    b.HasOne("CRM.Models.StatusDAO", "Status")
                        .WithMany("KpiGeneralContents")
                        .HasForeignKey("StatusId")
                        .HasConstraintName("FK_KpiGeneralContent_Status")
                        .IsRequired();
                });

            modelBuilder.Entity("CRM.Models.KpiGeneralContentKpiPeriodMappingDAO", b =>
                {
                    b.HasOne("CRM.Models.KpiGeneralContentDAO", "KpiGeneralContent")
                        .WithMany("KpiGeneralContentKpiPeriodMappings")
                        .HasForeignKey("KpiGeneralContentId")
                        .HasConstraintName("FK_KpiGeneralContentKpiPeriodMapping_KpiGeneralContent")
                        .IsRequired();

                    b.HasOne("CRM.Models.KpiPeriodDAO", "KpiPeriod")
                        .WithMany("KpiGeneralContentKpiPeriodMappings")
                        .HasForeignKey("KpiPeriodId")
                        .HasConstraintName("FK_KpiGeneralContentKpiPeriodMapping_KpiPeriod")
                        .IsRequired();
                });

            modelBuilder.Entity("CRM.Models.KpiGeneralDAO", b =>
                {
                    b.HasOne("CRM.Models.AppUserDAO", "Creator")
                        .WithMany("KpiGeneralCreators")
                        .HasForeignKey("CreatorId")
                        .HasConstraintName("FK_KpiGeneral_AppUser1")
                        .IsRequired();

                    b.HasOne("CRM.Models.AppUserDAO", "Employee")
                        .WithMany("KpiGeneralEmployees")
                        .HasForeignKey("EmployeeId")
                        .HasConstraintName("FK_KpiGeneral_AppUser")
                        .IsRequired();

                    b.HasOne("CRM.Models.KpiYearDAO", "KpiYear")
                        .WithMany("KpiGenerals")
                        .HasForeignKey("KpiYearId")
                        .HasConstraintName("FK_KpiGeneral_KpiYear")
                        .IsRequired();

                    b.HasOne("CRM.Models.OrganizationDAO", "Organization")
                        .WithMany("KpiGenerals")
                        .HasForeignKey("OrganizationId")
                        .HasConstraintName("FK_KpiGeneral_Organization")
                        .IsRequired();

                    b.HasOne("CRM.Models.StatusDAO", "Status")
                        .WithMany("KpiGenerals")
                        .HasForeignKey("StatusId")
                        .HasConstraintName("FK_KpiGeneral_Status")
                        .IsRequired();
                });

            modelBuilder.Entity("CRM.Models.KpiItemContentDAO", b =>
                {
                    b.HasOne("CRM.Models.ItemDAO", "Item")
                        .WithMany("KpiItemContents")
                        .HasForeignKey("ItemId")
                        .HasConstraintName("FK_KpiItemContent_Item")
                        .IsRequired();

                    b.HasOne("CRM.Models.KpiItemDAO", "KpiItem")
                        .WithMany("KpiItemContents")
                        .HasForeignKey("KpiItemId")
                        .HasConstraintName("FK_KpiItemContent_KpiItem")
                        .IsRequired();
                });

            modelBuilder.Entity("CRM.Models.KpiItemContentKpiCriteriaItemMappingDAO", b =>
                {
                    b.HasOne("CRM.Models.KpiCriteriaItemDAO", "KpiCriteriaItem")
                        .WithMany("KpiItemContentKpiCriteriaItemMappings")
                        .HasForeignKey("KpiCriteriaItemId")
                        .HasConstraintName("FK_KpiItemContentKpiCriteriaItemMapping_KpiCriteriaItem")
                        .IsRequired();

                    b.HasOne("CRM.Models.KpiItemContentDAO", "KpiItemContent")
                        .WithMany("KpiItemContentKpiCriteriaItemMappings")
                        .HasForeignKey("KpiItemContentId")
                        .HasConstraintName("FK_KpiItemContentKpiCriteriaItemMapping_KpiItemContent")
                        .IsRequired();
                });

            modelBuilder.Entity("CRM.Models.KpiItemDAO", b =>
                {
                    b.HasOne("CRM.Models.AppUserDAO", "Creator")
                        .WithMany("KpiItemCreators")
                        .HasForeignKey("CreatorId")
                        .HasConstraintName("FK_KpiItem_AppUser1")
                        .IsRequired();

                    b.HasOne("CRM.Models.AppUserDAO", "Employee")
                        .WithMany("KpiItemEmployees")
                        .HasForeignKey("EmployeeId")
                        .HasConstraintName("FK_KpiItem_AppUser")
                        .IsRequired();

                    b.HasOne("CRM.Models.KpiPeriodDAO", "KpiPeriod")
                        .WithMany("KpiItems")
                        .HasForeignKey("KpiPeriodId")
                        .HasConstraintName("FK_KpiItem_KpiPeriod")
                        .IsRequired();

                    b.HasOne("CRM.Models.KpiYearDAO", "KpiYear")
                        .WithMany("KpiItems")
                        .HasForeignKey("KpiYearId")
                        .HasConstraintName("FK_KpiItem_KpiYear")
                        .IsRequired();

                    b.HasOne("CRM.Models.OrganizationDAO", "Organization")
                        .WithMany("KpiItems")
                        .HasForeignKey("OrganizationId")
                        .HasConstraintName("FK_KpiItem_Organization")
                        .IsRequired();

                    b.HasOne("CRM.Models.StatusDAO", "Status")
                        .WithMany("KpiItems")
                        .HasForeignKey("StatusId")
                        .HasConstraintName("FK_KpiItem_Status")
                        .IsRequired();
                });

            modelBuilder.Entity("CRM.Models.MailTemplateDAO", b =>
                {
                    b.HasOne("CRM.Models.StatusDAO", "Status")
                        .WithMany("MailTemplates")
                        .HasForeignKey("StatusId")
                        .HasConstraintName("FK_MailTemplate_Status");
                });

            modelBuilder.Entity("CRM.Models.NationDAO", b =>
                {
                    b.HasOne("CRM.Models.StatusDAO", "Status")
                        .WithMany("Nations")
                        .HasForeignKey("StatusId")
                        .HasConstraintName("FK_Nation_Status")
                        .IsRequired();
                });

            modelBuilder.Entity("CRM.Models.NotificationDAO", b =>
                {
                    b.HasOne("CRM.Models.NotificationStatusDAO", "NotificationStatus")
                        .WithMany("Notifications")
                        .HasForeignKey("NotificationStatusId")
                        .HasConstraintName("FK_Notification_NotificationStatus")
                        .IsRequired();

                    b.HasOne("CRM.Models.OrganizationDAO", "Organization")
                        .WithMany("Notifications")
                        .HasForeignKey("OrganizationId")
                        .HasConstraintName("FK_Notification_Organization");
                });

            modelBuilder.Entity("CRM.Models.OpportunityActivityDAO", b =>
                {
                    b.HasOne("CRM.Models.ActivityPriorityDAO", "ActivityPriority")
                        .WithMany("OpportunityActivities")
                        .HasForeignKey("ActivityPriorityId")
                        .HasConstraintName("FK_OpportunityActivity_ActivityPriority");

                    b.HasOne("CRM.Models.ActivityStatusDAO", "ActivityStatus")
                        .WithMany("OpportunityActivities")
                        .HasForeignKey("ActivityStatusId")
                        .HasConstraintName("FK_OpportunityActivity_ActivityStatus")
                        .IsRequired();

                    b.HasOne("CRM.Models.ActivityTypeDAO", "ActivityType")
                        .WithMany("OpportunityActivities")
                        .HasForeignKey("ActivityTypeId")
                        .HasConstraintName("FK_OpportunityActivity_ActivityType")
                        .IsRequired();

                    b.HasOne("CRM.Models.AppUserDAO", "AppUser")
                        .WithMany("OpportunityActivities")
                        .HasForeignKey("AppUserId")
                        .HasConstraintName("FK_OpportunityActivity_AppUser")
                        .IsRequired();

                    b.HasOne("CRM.Models.OpportunityDAO", "Opportunity")
                        .WithMany("OpportunityActivities")
                        .HasForeignKey("OpportunityId")
                        .HasConstraintName("FK_OpportunityActivity_Opportunity")
                        .IsRequired();
                });

            modelBuilder.Entity("CRM.Models.OpportunityCallLogMappingDAO", b =>
                {
                    b.HasOne("CRM.Models.CallLogDAO", "CallLog")
                        .WithMany("OpportunityCallLogMappings")
                        .HasForeignKey("CallLogId")
                        .HasConstraintName("FK_OpportunityCallLogMapping_CallLog")
                        .IsRequired();

                    b.HasOne("CRM.Models.OpportunityDAO", "Opportunity")
                        .WithMany("OpportunityCallLogMappings")
                        .HasForeignKey("OpportunityId")
                        .HasConstraintName("FK_OpportunityCallLogMapping_Opportunity")
                        .IsRequired();
                });

            modelBuilder.Entity("CRM.Models.OpportunityContactMappingDAO", b =>
                {
                    b.HasOne("CRM.Models.ContactDAO", "Contact")
                        .WithMany("OpportunityContactMappings")
                        .HasForeignKey("ContactId")
                        .HasConstraintName("FK_OpportunityContactMapping_Contact")
                        .IsRequired();

                    b.HasOne("CRM.Models.OpportunityDAO", "Opportunity")
                        .WithMany("OpportunityContactMappings")
                        .HasForeignKey("OpportunityId")
                        .HasConstraintName("FK_OpportunityContactMapping_Opportunity")
                        .IsRequired();
                });

            modelBuilder.Entity("CRM.Models.OpportunityDAO", b =>
                {
                    b.HasOne("CRM.Models.AppUserDAO", "AppUser")
                        .WithMany("OpportunityAppUsers")
                        .HasForeignKey("AppUserId")
                        .HasConstraintName("FK_Opportunity_AppUser")
                        .IsRequired();

                    b.HasOne("CRM.Models.CompanyDAO", "Company")
                        .WithMany("Opportunities")
                        .HasForeignKey("CompanyId")
                        .HasConstraintName("FK_Opportunity_Company");

                    b.HasOne("CRM.Models.AppUserDAO", "Creator")
                        .WithMany("OpportunityCreators")
                        .HasForeignKey("CreatorId")
                        .HasConstraintName("FK_Opportunity_AppUser1")
                        .IsRequired();

                    b.HasOne("CRM.Models.CurrencyDAO", "Currency")
                        .WithMany("Opportunities")
                        .HasForeignKey("CurrencyId")
                        .HasConstraintName("FK_Opportunity_Currency");

                    b.HasOne("CRM.Models.CustomerLeadDAO", "CustomerLead")
                        .WithMany("Opportunities")
                        .HasForeignKey("CustomerLeadId")
                        .HasConstraintName("FK_Opportunity_CustomerLead");

                    b.HasOne("CRM.Models.CustomerLeadSourceDAO", "LeadSource")
                        .WithMany("Opportunities")
                        .HasForeignKey("LeadSourceId")
                        .HasConstraintName("FK_Opportunity_CustomerLeadSource");

                    b.HasOne("CRM.Models.OpportunityResultTypeDAO", "OpportunityResultType")
                        .WithMany("Opportunities")
                        .HasForeignKey("OpportunityResultTypeId")
                        .HasConstraintName("FK_Opportunity_OpportunityResultType");

                    b.HasOne("CRM.Models.PotentialResultDAO", "PotentialResult")
                        .WithMany("Opportunities")
                        .HasForeignKey("PotentialResultId")
                        .HasConstraintName("FK_Opportunity_PotentialResult");

                    b.HasOne("CRM.Models.ProbabilityDAO", "Probability")
                        .WithMany("Opportunities")
                        .HasForeignKey("ProbabilityId")
                        .HasConstraintName("FK_Opportunity_Probability")
                        .IsRequired();

                    b.HasOne("CRM.Models.SaleStageDAO", "SaleStage")
                        .WithMany("Opportunities")
                        .HasForeignKey("SaleStageId")
                        .HasConstraintName("FK_Opportunity_SaleStage");
                });

            modelBuilder.Entity("CRM.Models.OpportunityEmailCCMappingDAO", b =>
                {
                    b.HasOne("CRM.Models.AppUserDAO", "AppUser")
                        .WithMany("OpportunityEmailCCMappings")
                        .HasForeignKey("AppUserId")
                        .HasConstraintName("FK_OpportunityEmailCCMapping_AppUser")
                        .IsRequired();

                    b.HasOne("CRM.Models.OpportunityEmailDAO", "OpportunityEmail")
                        .WithMany("OpportunityEmailCCMappings")
                        .HasForeignKey("OpportunityEmailId")
                        .HasConstraintName("FK_OpportunityEmailCCMapping_OpportunityEmail")
                        .IsRequired();
                });

            modelBuilder.Entity("CRM.Models.OpportunityEmailDAO", b =>
                {
                    b.HasOne("CRM.Models.AppUserDAO", "Creator")
                        .WithMany("OpportunityEmails")
                        .HasForeignKey("CreatorId")
                        .HasConstraintName("FK_OpportunityEmail_AppUser")
                        .IsRequired();

                    b.HasOne("CRM.Models.EmailStatusDAO", "EmailStatus")
                        .WithMany("OpportunityEmails")
                        .HasForeignKey("EmailStatusId")
                        .HasConstraintName("FK_OpportunityEmail_EmailStatus")
                        .IsRequired();

                    b.HasOne("CRM.Models.OpportunityDAO", "Opportunity")
                        .WithMany("OpportunityEmails")
                        .HasForeignKey("OpportunityId")
                        .HasConstraintName("FK_OpportunityEmail_Opportunity")
                        .IsRequired();
                });

            modelBuilder.Entity("CRM.Models.OpportunityFileGroupingDAO", b =>
                {
                    b.HasOne("CRM.Models.AppUserDAO", "Creator")
                        .WithMany("OpportunityFileGroupings")
                        .HasForeignKey("CreatorId")
                        .HasConstraintName("FK_OpportunityFileGrouping_AppUser")
                        .IsRequired();

                    b.HasOne("CRM.Models.FileTypeDAO", "FileType")
                        .WithMany("OpportunityFileGroupings")
                        .HasForeignKey("FileTypeId")
                        .HasConstraintName("FK_OpportunityFileGrouping_FileType")
                        .IsRequired();

                    b.HasOne("CRM.Models.OpportunityDAO", "Opportunity")
                        .WithMany("OpportunityFileGroupings")
                        .HasForeignKey("OpportunityId")
                        .HasConstraintName("FK_OpportunityFileGrouping_Opportunity")
                        .IsRequired();
                });

            modelBuilder.Entity("CRM.Models.OpportunityFileMappingDAO", b =>
                {
                    b.HasOne("CRM.Models.FileDAO", "File")
                        .WithMany("OpportunityFileMappings")
                        .HasForeignKey("FileId")
                        .HasConstraintName("FK_OpportunityFileMapping_File")
                        .IsRequired();

                    b.HasOne("CRM.Models.OpportunityFileGroupingDAO", "OpportunityFileGrouping")
                        .WithMany("OpportunityFileMappings")
                        .HasForeignKey("OpportunityFileGroupingId")
                        .HasConstraintName("FK_OpportunityFileMapping_OpportunityFileGrouping")
                        .IsRequired();
                });

            modelBuilder.Entity("CRM.Models.OpportunityItemMappingDAO", b =>
                {
                    b.HasOne("CRM.Models.ItemDAO", "Item")
                        .WithMany("OpportunityItemMappings")
                        .HasForeignKey("ItemId")
                        .HasConstraintName("FK_OpportunityItemMapping_Item")
                        .IsRequired();

                    b.HasOne("CRM.Models.OpportunityDAO", "Opportunity")
                        .WithMany("OpportunityItemMappings")
                        .HasForeignKey("OpportunityId")
                        .HasConstraintName("FK_OpportunityProductMapping_Opportunity")
                        .IsRequired();

                    b.HasOne("CRM.Models.UnitOfMeasureDAO", "UnitOfMeasure")
                        .WithMany("OpportunityItemMappings")
                        .HasForeignKey("UnitOfMeasureId")
                        .HasConstraintName("FK_OpportunityItemMapping_UnitOfMeasure")
                        .IsRequired();
                });

            modelBuilder.Entity("CRM.Models.OrderQuoteContentDAO", b =>
                {
                    b.HasOne("CRM.Models.EditedPriceStatusDAO", "EditedPriceStatus")
                        .WithMany("OrderQuoteContents")
                        .HasForeignKey("EditedPriceStatusId")
                        .HasConstraintName("FK_OrderQuoteContent_EditedPriceStatus")
                        .IsRequired();

                    b.HasOne("CRM.Models.ItemDAO", "Item")
                        .WithMany("OrderQuoteContents")
                        .HasForeignKey("ItemId")
                        .HasConstraintName("FK_OrderQuoteContent_Item")
                        .IsRequired();

                    b.HasOne("CRM.Models.OrderQuoteDAO", "OrderQuote")
                        .WithMany("OrderQuoteContents")
                        .HasForeignKey("OrderQuoteId")
                        .HasConstraintName("FK_OrderQuoteContent_OrderQuote")
                        .IsRequired();

                    b.HasOne("CRM.Models.UnitOfMeasureDAO", "PrimaryUnitOfMeasure")
                        .WithMany("OrderQuoteContentPrimaryUnitOfMeasures")
                        .HasForeignKey("PrimaryUnitOfMeasureId")
                        .HasConstraintName("FK_OrderQuoteContent_UnitOfMeasure1")
                        .IsRequired();

                    b.HasOne("CRM.Models.TaxTypeDAO", "TaxType")
                        .WithMany("OrderQuoteContents")
                        .HasForeignKey("TaxTypeId")
                        .HasConstraintName("FK_OrderQuoteContent_TaxType")
                        .IsRequired();

                    b.HasOne("CRM.Models.UnitOfMeasureDAO", "UnitOfMeasure")
                        .WithMany("OrderQuoteContentUnitOfMeasures")
                        .HasForeignKey("UnitOfMeasureId")
                        .HasConstraintName("FK_OrderQuoteContent_UnitOfMeasure")
                        .IsRequired();
                });

            modelBuilder.Entity("CRM.Models.OrderQuoteDAO", b =>
                {
                    b.HasOne("CRM.Models.AppUserDAO", "AppUser")
                        .WithMany("OrderQuoteAppUsers")
                        .HasForeignKey("AppUserId")
                        .HasConstraintName("FK_OrderQuote_AppUser")
                        .IsRequired();

                    b.HasOne("CRM.Models.CompanyDAO", "Company")
                        .WithMany("OrderQuotes")
                        .HasForeignKey("CompanyId")
                        .HasConstraintName("FK_OrderQuote_Company")
                        .IsRequired();

                    b.HasOne("CRM.Models.ContactDAO", "Contact")
                        .WithMany("OrderQuotes")
                        .HasForeignKey("ContactId")
                        .HasConstraintName("FK_OrderQuote_Contact")
                        .IsRequired();

                    b.HasOne("CRM.Models.AppUserDAO", "Creator")
                        .WithMany("OrderQuoteCreators")
                        .HasForeignKey("CreatorId")
                        .HasConstraintName("FK_OrderQuote_AppUser1")
                        .IsRequired();

                    b.HasOne("CRM.Models.DistrictDAO", "District")
                        .WithMany("OrderQuoteDistricts")
                        .HasForeignKey("DistrictId")
                        .HasConstraintName("FK_OrderQuote_District1");

                    b.HasOne("CRM.Models.EditedPriceStatusDAO", "EditedPriceStatus")
                        .WithMany("OrderQuotes")
                        .HasForeignKey("EditedPriceStatusId")
                        .HasConstraintName("FK_OrderQuote_EditedPriceStatus")
                        .IsRequired();

                    b.HasOne("CRM.Models.DistrictDAO", "InvoiceDistrict")
                        .WithMany("OrderQuoteInvoiceDistricts")
                        .HasForeignKey("InvoiceDistrictId")
                        .HasConstraintName("FK_OrderQuote_District");

                    b.HasOne("CRM.Models.NationDAO", "InvoiceNation")
                        .WithMany("OrderQuoteInvoiceNations")
                        .HasForeignKey("InvoiceNationId")
                        .HasConstraintName("FK_OrderQuote_Nation1");

                    b.HasOne("CRM.Models.ProvinceDAO", "InvoiceProvince")
                        .WithMany("OrderQuoteInvoiceProvinces")
                        .HasForeignKey("InvoiceProvinceId")
                        .HasConstraintName("FK_OrderQuote_Province1");

                    b.HasOne("CRM.Models.NationDAO", "Nation")
                        .WithMany("OrderQuoteNations")
                        .HasForeignKey("NationId")
                        .HasConstraintName("FK_OrderQuote_Nation");

                    b.HasOne("CRM.Models.OpportunityDAO", "Opportunity")
                        .WithMany("OrderQuotes")
                        .HasForeignKey("OpportunityId")
                        .HasConstraintName("FK_OrderQuote_Opportunity");

                    b.HasOne("CRM.Models.OrderQuoteStatusDAO", "OrderQuoteStatus")
                        .WithMany("OrderQuotes")
                        .HasForeignKey("OrderQuoteStatusId")
                        .HasConstraintName("FK_OrderQuote_OrderQuoteStatus")
                        .IsRequired();

                    b.HasOne("CRM.Models.ProvinceDAO", "Province")
                        .WithMany("OrderQuoteProvinces")
                        .HasForeignKey("ProvinceId")
                        .HasConstraintName("FK_OrderQuote_Province");
                });

            modelBuilder.Entity("CRM.Models.OrganizationDAO", b =>
                {
                    b.HasOne("CRM.Models.OrganizationDAO", "Parent")
                        .WithMany("InverseParent")
                        .HasForeignKey("ParentId")
                        .HasConstraintName("FK_Organization_Organization");

                    b.HasOne("CRM.Models.StatusDAO", "Status")
                        .WithMany("Organizations")
                        .HasForeignKey("StatusId")
                        .HasConstraintName("FK_Organization_Status")
                        .IsRequired();
                });

            modelBuilder.Entity("CRM.Models.PermissionActionMappingDAO", b =>
                {
                    b.HasOne("CRM.Models.ActionDAO", "Action")
                        .WithMany("PermissionActionMappings")
                        .HasForeignKey("ActionId")
                        .HasConstraintName("FK_ActionPermissionMapping_Action")
                        .IsRequired();

                    b.HasOne("CRM.Models.PermissionDAO", "Permission")
                        .WithMany("PermissionActionMappings")
                        .HasForeignKey("PermissionId")
                        .HasConstraintName("FK_ActionPermissionMapping_Permission")
                        .IsRequired();
                });

            modelBuilder.Entity("CRM.Models.PermissionContentDAO", b =>
                {
                    b.HasOne("CRM.Models.FieldDAO", "Field")
                        .WithMany("PermissionContents")
                        .HasForeignKey("FieldId")
                        .HasConstraintName("FK_PermissionContent_Field")
                        .IsRequired();

                    b.HasOne("CRM.Models.PermissionDAO", "Permission")
                        .WithMany("PermissionContents")
                        .HasForeignKey("PermissionId")
                        .HasConstraintName("FK_PermissionContent_Permission")
                        .IsRequired();

                    b.HasOne("CRM.Models.PermissionOperatorDAO", "PermissionOperator")
                        .WithMany("PermissionContents")
                        .HasForeignKey("PermissionOperatorId")
                        .HasConstraintName("FK_PermissionContent_PermissionOperator")
                        .IsRequired();
                });

            modelBuilder.Entity("CRM.Models.PermissionDAO", b =>
                {
                    b.HasOne("CRM.Models.MenuDAO", "Menu")
                        .WithMany("Permissions")
                        .HasForeignKey("MenuId")
                        .HasConstraintName("FK_Permission_Menu")
                        .IsRequired();

                    b.HasOne("CRM.Models.RoleDAO", "Role")
                        .WithMany("Permissions")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK_Permission_Role")
                        .IsRequired();

                    b.HasOne("CRM.Models.StatusDAO", "Status")
                        .WithMany("Permissions")
                        .HasForeignKey("StatusId")
                        .HasConstraintName("FK_Permission_Status")
                        .IsRequired();
                });

            modelBuilder.Entity("CRM.Models.PermissionOperatorDAO", b =>
                {
                    b.HasOne("CRM.Models.FieldTypeDAO", "FieldType")
                        .WithMany("PermissionOperators")
                        .HasForeignKey("FieldTypeId")
                        .HasConstraintName("FK_PermissionOperator_FieldType")
                        .IsRequired();
                });

            modelBuilder.Entity("CRM.Models.PhoneTypeDAO", b =>
                {
                    b.HasOne("CRM.Models.StatusDAO", "Status")
                        .WithMany("PhoneTypes")
                        .HasForeignKey("StatusId")
                        .HasConstraintName("FK_PhoneType_Status")
                        .IsRequired();
                });

            modelBuilder.Entity("CRM.Models.PositionDAO", b =>
                {
                    b.HasOne("CRM.Models.StatusDAO", "Status")
                        .WithMany("Positions")
                        .HasForeignKey("StatusId")
                        .HasConstraintName("FK_Position_Status")
                        .IsRequired();
                });

            modelBuilder.Entity("CRM.Models.ProductDAO", b =>
                {
                    b.HasOne("CRM.Models.BrandDAO", "Brand")
                        .WithMany("Products")
                        .HasForeignKey("BrandId")
                        .HasConstraintName("FK_Product_Brand");

                    b.HasOne("CRM.Models.CategoryDAO", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("FK_Product_Category")
                        .IsRequired();

                    b.HasOne("CRM.Models.ProductTypeDAO", "ProductType")
                        .WithMany("Products")
                        .HasForeignKey("ProductTypeId")
                        .HasConstraintName("FK_Product_ProductType")
                        .IsRequired();

                    b.HasOne("CRM.Models.StatusDAO", "Status")
                        .WithMany("Products")
                        .HasForeignKey("StatusId")
                        .HasConstraintName("FK_Product_Status")
                        .IsRequired();

                    b.HasOne("CRM.Models.TaxTypeDAO", "TaxType")
                        .WithMany("Products")
                        .HasForeignKey("TaxTypeId")
                        .HasConstraintName("FK_Product_TaxType")
                        .IsRequired();

                    b.HasOne("CRM.Models.UnitOfMeasureGroupingDAO", "UnitOfMeasureGrouping")
                        .WithMany("Products")
                        .HasForeignKey("UnitOfMeasureGroupingId")
                        .HasConstraintName("FK_Product_UnitOfMeasureGrouping");

                    b.HasOne("CRM.Models.UnitOfMeasureDAO", "UnitOfMeasure")
                        .WithMany("Products")
                        .HasForeignKey("UnitOfMeasureId")
                        .HasConstraintName("FK_Product_UnitOfMeasure")
                        .IsRequired();

                    b.HasOne("CRM.Models.UsedVariationDAO", "UsedVariation")
                        .WithMany("Products")
                        .HasForeignKey("UsedVariationId")
                        .HasConstraintName("FK_Product_UsedVariation")
                        .IsRequired();
                });

            modelBuilder.Entity("CRM.Models.ProductGroupingDAO", b =>
                {
                    b.HasOne("CRM.Models.ProductGroupingDAO", "Parent")
                        .WithMany("InverseParent")
                        .HasForeignKey("ParentId")
                        .HasConstraintName("FK_ProductGrouping_ProductGrouping");
                });

            modelBuilder.Entity("CRM.Models.ProductImageMappingDAO", b =>
                {
                    b.HasOne("CRM.Models.ImageDAO", "Image")
                        .WithMany("ProductImageMappings")
                        .HasForeignKey("ImageId")
                        .HasConstraintName("FK_ProductImageMapping_Image")
                        .IsRequired();

                    b.HasOne("CRM.Models.ProductDAO", "Product")
                        .WithMany("ProductImageMappings")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK_ProductImageMapping_Product")
                        .IsRequired();
                });

            modelBuilder.Entity("CRM.Models.ProductProductGroupingMappingDAO", b =>
                {
                    b.HasOne("CRM.Models.ProductGroupingDAO", "ProductGrouping")
                        .WithMany("ProductProductGroupingMappings")
                        .HasForeignKey("ProductGroupingId")
                        .HasConstraintName("FK_ProductProductGroupingMapping_ProductGrouping")
                        .IsRequired();

                    b.HasOne("CRM.Models.ProductDAO", "Product")
                        .WithMany("ProductProductGroupingMappings")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK_ProductProductGroupingMapping_Product")
                        .IsRequired();
                });

            modelBuilder.Entity("CRM.Models.ProductTypeDAO", b =>
                {
                    b.HasOne("CRM.Models.StatusDAO", "Status")
                        .WithMany("ProductTypes")
                        .HasForeignKey("StatusId")
                        .HasConstraintName("FK_ProductType_Status")
                        .IsRequired();
                });

            modelBuilder.Entity("CRM.Models.ProfessionDAO", b =>
                {
                    b.HasOne("CRM.Models.StatusDAO", "Status")
                        .WithMany("Professions")
                        .HasForeignKey("StatusId")
                        .HasConstraintName("FK_Profession_Status")
                        .IsRequired();
                });

            modelBuilder.Entity("CRM.Models.ProvinceDAO", b =>
                {
                    b.HasOne("CRM.Models.StatusDAO", "Status")
                        .WithMany("Provinces")
                        .HasForeignKey("StatusId")
                        .HasConstraintName("FK_Province_Status")
                        .IsRequired();
                });

            modelBuilder.Entity("CRM.Models.RepairTicketDAO", b =>
                {
                    b.HasOne("CRM.Models.AppUserDAO", "Creator")
                        .WithMany("RepairTickets")
                        .HasForeignKey("CreatorId")
                        .HasConstraintName("FK_RepairTicket_AppUser")
                        .IsRequired();

                    b.HasOne("CRM.Models.CustomerDAO", "Customer")
                        .WithMany("RepairTickets")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("FK_RepairTicket_Customer")
                        .IsRequired();

                    b.HasOne("CRM.Models.ItemDAO", "Item")
                        .WithMany("RepairTickets")
                        .HasForeignKey("ItemId")
                        .HasConstraintName("FK_RepairTicket_Item");

                    b.HasOne("CRM.Models.OrderCategoryDAO", "OrderCategory")
                        .WithMany("RepairTickets")
                        .HasForeignKey("OrderCategoryId")
                        .HasConstraintName("FK_RepairTicket_OrderCategory")
                        .IsRequired();

                    b.HasOne("CRM.Models.PaymentStatusDAO", "PaymentStatus")
                        .WithMany("RepairTickets")
                        .HasForeignKey("PaymentStatusId")
                        .HasConstraintName("FK_RepairTicket_PaymentStatus");

                    b.HasOne("CRM.Models.RepairStatusDAO", "RepairStatus")
                        .WithMany("RepairTickets")
                        .HasForeignKey("RepairStatusId")
                        .HasConstraintName("FK_RepairTicket_RepairStatus");
                });

            modelBuilder.Entity("CRM.Models.RequestWorkflowDefinitionMappingDAO", b =>
                {
                    b.HasOne("CRM.Models.RequestStateDAO", "RequestState")
                        .WithMany("RequestWorkflowDefinitionMappings")
                        .HasForeignKey("RequestStateId")
                        .HasConstraintName("FK_RequestWorkflowDefinitionMapping_RequestState")
                        .IsRequired();

                    b.HasOne("CRM.Models.WorkflowDefinitionDAO", "WorkflowDefinition")
                        .WithMany("RequestWorkflowDefinitionMappings")
                        .HasForeignKey("WorkflowDefinitionId")
                        .HasConstraintName("FK_RequestWorkflowDefinitionMapping_WorkflowDefinition")
                        .IsRequired();
                });

            modelBuilder.Entity("CRM.Models.RequestWorkflowParameterMappingDAO", b =>
                {
                    b.HasOne("CRM.Models.WorkflowParameterDAO", "WorkflowParameter")
                        .WithMany("RequestWorkflowParameterMappings")
                        .HasForeignKey("WorkflowParameterId")
                        .HasConstraintName("FK_StoreWorkflowParameterMapping_WorkflowParameter")
                        .IsRequired();
                });

            modelBuilder.Entity("CRM.Models.RequestWorkflowStepMappingDAO", b =>
                {
                    b.HasOne("CRM.Models.AppUserDAO", "AppUser")
                        .WithMany("RequestWorkflowStepMappings")
                        .HasForeignKey("AppUserId")
                        .HasConstraintName("FK_StoreWorkflow_AppUser");

                    b.HasOne("CRM.Models.WorkflowStateDAO", "WorkflowState")
                        .WithMany("RequestWorkflowStepMappings")
                        .HasForeignKey("WorkflowStateId")
                        .HasConstraintName("FK_StoreWorkflow_WorkflowState")
                        .IsRequired();

                    b.HasOne("CRM.Models.WorkflowStepDAO", "WorkflowStep")
                        .WithMany("RequestWorkflowStepMappings")
                        .HasForeignKey("WorkflowStepId")
                        .HasConstraintName("FK_StoreWorkflow_WorkflowStep")
                        .IsRequired();
                });

            modelBuilder.Entity("CRM.Models.RoleDAO", b =>
                {
                    b.HasOne("CRM.Models.StatusDAO", "Status")
                        .WithMany("Roles")
                        .HasForeignKey("StatusId")
                        .HasConstraintName("FK_Role_Status")
                        .IsRequired();
                });

            modelBuilder.Entity("CRM.Models.SLAAlertDAO", b =>
                {
                    b.HasOne("CRM.Models.MailTemplateDAO", "MailTemplate")
                        .WithMany("SLAAlerts")
                        .HasForeignKey("MailTemplateId")
                        .HasConstraintName("FK_SLAAlert_MailTemplate");

                    b.HasOne("CRM.Models.SmsTemplateDAO", "SmsTemplate")
                        .WithMany("SLAAlerts")
                        .HasForeignKey("SmsTemplateId")
                        .HasConstraintName("FK_SLAAlert_SmsTemplate");

                    b.HasOne("CRM.Models.TicketIssueLevelDAO", "TicketIssueLevel")
                        .WithMany("SLAAlerts")
                        .HasForeignKey("TicketIssueLevelId")
                        .HasConstraintName("FK_SLAAlert_TicketIssueLevel");

                    b.HasOne("CRM.Models.SLATimeUnitDAO", "TimeUnit")
                        .WithMany("SLAAlerts")
                        .HasForeignKey("TimeUnitId")
                        .HasConstraintName("FK_SLAAlert_SLATimeUnit");
                });

            modelBuilder.Entity("CRM.Models.SLAAlertFRTDAO", b =>
                {
                    b.HasOne("CRM.Models.MailTemplateDAO", "MailTemplate")
                        .WithMany("SLAAlertFRTs")
                        .HasForeignKey("MailTemplateId")
                        .HasConstraintName("FK_SLAAlertFRT_MailTemplate");

                    b.HasOne("CRM.Models.SmsTemplateDAO", "SmsTemplate")
                        .WithMany("SLAAlertFRTs")
                        .HasForeignKey("SmsTemplateId")
                        .HasConstraintName("FK_SLAAlertFRT_SmsTemplate");

                    b.HasOne("CRM.Models.TicketIssueLevelDAO", "TicketIssueLevel")
                        .WithMany("SLAAlertFRTs")
                        .HasForeignKey("TicketIssueLevelId")
                        .HasConstraintName("FK_SLAAlertFRT_TicketIssueLevel");

                    b.HasOne("CRM.Models.SLATimeUnitDAO", "TimeUnit")
                        .WithMany("SLAAlertFRTs")
                        .HasForeignKey("TimeUnitId")
                        .HasConstraintName("FK_SLAAlertFRT_SLATimeUnit");
                });

            modelBuilder.Entity("CRM.Models.SLAAlertFRTMailDAO", b =>
                {
                    b.HasOne("CRM.Models.SLAAlertFRTDAO", "SLAAlertFRT")
                        .WithMany("SLAAlertFRTMails")
                        .HasForeignKey("SLAAlertFRTId")
                        .HasConstraintName("FK_SLAAlertFRTMail_SLAAlertFRT");
                });

            modelBuilder.Entity("CRM.Models.SLAAlertFRTPhoneDAO", b =>
                {
                    b.HasOne("CRM.Models.SLAAlertFRTDAO", "SLAAlertFRT")
                        .WithMany("SLAAlertFRTPhones")
                        .HasForeignKey("SLAAlertFRTId")
                        .HasConstraintName("FK_SLAAlertFRTPhone_SLAAlertFRT");
                });

            modelBuilder.Entity("CRM.Models.SLAAlertFRTUserDAO", b =>
                {
                    b.HasOne("CRM.Models.AppUserDAO", "AppUser")
                        .WithMany("SLAAlertFRTUsers")
                        .HasForeignKey("AppUserId")
                        .HasConstraintName("FK_SLAAlertFRTUser_AppUser");

                    b.HasOne("CRM.Models.SLAAlertFRTDAO", "SLAAlertFRT")
                        .WithMany("SLAAlertFRTUsers")
                        .HasForeignKey("SLAAlertFRTId")
                        .HasConstraintName("FK_SLAAlertFRTUser_SLAAlertFRT");
                });

            modelBuilder.Entity("CRM.Models.SLAAlertMailDAO", b =>
                {
                    b.HasOne("CRM.Models.SLAAlertDAO", "SLAAlert")
                        .WithMany("SLAAlertMails")
                        .HasForeignKey("SLAAlertId")
                        .HasConstraintName("FK_SLAAlertMail_SLAAlert");
                });

            modelBuilder.Entity("CRM.Models.SLAAlertPhoneDAO", b =>
                {
                    b.HasOne("CRM.Models.SLAAlertDAO", "SLAAlert")
                        .WithMany("SLAAlertPhones")
                        .HasForeignKey("SLAAlertId")
                        .HasConstraintName("FK_SLAAlertPhone_SLAAlert");
                });

            modelBuilder.Entity("CRM.Models.SLAAlertUserDAO", b =>
                {
                    b.HasOne("CRM.Models.AppUserDAO", "AppUser")
                        .WithMany("SLAAlertUsers")
                        .HasForeignKey("AppUserId")
                        .HasConstraintName("FK_SLAAlertUser_AppUser");

                    b.HasOne("CRM.Models.SLAAlertDAO", "SLAAlert")
                        .WithMany("SLAAlertUsers")
                        .HasForeignKey("SLAAlertId")
                        .HasConstraintName("FK_SLAAlertUser_SLAAlert");
                });

            modelBuilder.Entity("CRM.Models.SLAEscalationDAO", b =>
                {
                    b.HasOne("CRM.Models.MailTemplateDAO", "MailTemplate")
                        .WithMany("SLAEscalations")
                        .HasForeignKey("MailTemplateId")
                        .HasConstraintName("FK_SLAEscalation_MailTemplate");

                    b.HasOne("CRM.Models.SmsTemplateDAO", "SmsTemplate")
                        .WithMany("SLAEscalations")
                        .HasForeignKey("SmsTemplateId")
                        .HasConstraintName("FK_SLAEscalation_SmsTemplate");

                    b.HasOne("CRM.Models.TicketIssueLevelDAO", "TicketIssueLevel")
                        .WithMany("SLAEscalations")
                        .HasForeignKey("TicketIssueLevelId")
                        .HasConstraintName("FK_SLAEscalation_TicketIssueLevel");

                    b.HasOne("CRM.Models.SLATimeUnitDAO", "TimeUnit")
                        .WithMany("SLAEscalations")
                        .HasForeignKey("TimeUnitId")
                        .HasConstraintName("FK_SLAEscalation_SLATimeUnit");
                });

            modelBuilder.Entity("CRM.Models.SLAEscalationFRTDAO", b =>
                {
                    b.HasOne("CRM.Models.MailTemplateDAO", "MailTemplate")
                        .WithMany("SLAEscalationFRTs")
                        .HasForeignKey("MailTemplateId")
                        .HasConstraintName("FK_SLAEscalationFRT_MailTemplate");

                    b.HasOne("CRM.Models.SmsTemplateDAO", "SmsTemplate")
                        .WithMany("SLAEscalationFRTs")
                        .HasForeignKey("SmsTemplateId")
                        .HasConstraintName("FK_SLAEscalationFRT_SmsTemplate");

                    b.HasOne("CRM.Models.TicketIssueLevelDAO", "TicketIssueLevel")
                        .WithMany("SLAEscalationFRTs")
                        .HasForeignKey("TicketIssueLevelId")
                        .HasConstraintName("FK_SLAEscalationFRT_TicketIssueLevel");

                    b.HasOne("CRM.Models.SLATimeUnitDAO", "TimeUnit")
                        .WithMany("SLAEscalationFRTs")
                        .HasForeignKey("TimeUnitId")
                        .HasConstraintName("FK_SLAEscalationFRT_SLATimeUnit");
                });

            modelBuilder.Entity("CRM.Models.SLAEscalationFRTMailDAO", b =>
                {
                    b.HasOne("CRM.Models.SLAEscalationFRTDAO", "SLAEscalationFRT")
                        .WithMany("SLAEscalationFRTMails")
                        .HasForeignKey("SLAEscalationFRTId")
                        .HasConstraintName("FK_SLAEscalationFRTMail_SLAEscalationFRT");
                });

            modelBuilder.Entity("CRM.Models.SLAEscalationFRTPhoneDAO", b =>
                {
                    b.HasOne("CRM.Models.SLAEscalationFRTDAO", "SLAEscalationFRT")
                        .WithMany("SLAEscalationFRTPhones")
                        .HasForeignKey("SLAEscalationFRTId")
                        .HasConstraintName("FK_SLAEscalationFRTPhone_SLAEscalationFRT");
                });

            modelBuilder.Entity("CRM.Models.SLAEscalationFRTUserDAO", b =>
                {
                    b.HasOne("CRM.Models.AppUserDAO", "AppUser")
                        .WithMany("SLAEscalationFRTUsers")
                        .HasForeignKey("AppUserId")
                        .HasConstraintName("FK_SLAEscalationFRTUser_AppUser");

                    b.HasOne("CRM.Models.SLAEscalationFRTDAO", "SLAEscalationFRT")
                        .WithMany("SLAEscalationFRTUsers")
                        .HasForeignKey("SLAEscalationFRTId")
                        .HasConstraintName("FK_SLAEscalationFRTUser_SLAEscalationFRT");
                });

            modelBuilder.Entity("CRM.Models.SLAEscalationMailDAO", b =>
                {
                    b.HasOne("CRM.Models.SLAEscalationDAO", "SLAEscalation")
                        .WithMany("SLAEscalationMails")
                        .HasForeignKey("SLAEscalationId")
                        .HasConstraintName("FK_SLAEscalationMail_SLAEscalation");
                });

            modelBuilder.Entity("CRM.Models.SLAEscalationUserDAO", b =>
                {
                    b.HasOne("CRM.Models.AppUserDAO", "AppUser")
                        .WithMany("SLAEscalationUsers")
                        .HasForeignKey("AppUserId")
                        .HasConstraintName("FK_SLAEscalationUser_AppUser");

                    b.HasOne("CRM.Models.SLAEscalationDAO", "SLAEscalation")
                        .WithMany("SLAEscalationUsers")
                        .HasForeignKey("SLAEscalationId")
                        .HasConstraintName("FK_SLAEscalationUser_SLAEscalation");
                });

            modelBuilder.Entity("CRM.Models.SLAPolicyDAO", b =>
                {
                    b.HasOne("CRM.Models.SLATimeUnitDAO", "FirstResponseUnit")
                        .WithMany("SLAPolicyFirstResponseUnits")
                        .HasForeignKey("FirstResponseUnitId")
                        .HasConstraintName("FK_SLAPolicy_SLATimeUnit");

                    b.HasOne("CRM.Models.SLATimeUnitDAO", "ResolveUnit")
                        .WithMany("SLAPolicyResolveUnits")
                        .HasForeignKey("ResolveUnitId")
                        .HasConstraintName("FK_SLAPolicy_SLATimeUnit1");

                    b.HasOne("CRM.Models.TicketIssueLevelDAO", "TicketIssueLevel")
                        .WithMany("SLAPolicies")
                        .HasForeignKey("TicketIssueLevelId")
                        .HasConstraintName("FK_SLAPolicy_TicketIssueLevel");

                    b.HasOne("CRM.Models.TicketPriorityDAO", "TicketPriority")
                        .WithMany("SLAPolicies")
                        .HasForeignKey("TicketPriorityId")
                        .HasConstraintName("FK_SLAPolicy_TicketPriority");
                });

            modelBuilder.Entity("CRM.Models.ScheduleMasterDAO", b =>
                {
                    b.HasOne("CRM.Models.AppUserDAO", "Manager")
                        .WithMany("ScheduleMasterManagers")
                        .HasForeignKey("ManagerId")
                        .HasConstraintName("FK_ScheduleMaster_AppUser2");

                    b.HasOne("CRM.Models.AppUserDAO", "Saler")
                        .WithMany("ScheduleMasterSalers")
                        .HasForeignKey("SalerId")
                        .HasConstraintName("FK_ScheduleMaster_AppUser3");

                    b.HasOne("CRM.Models.StatusDAO", "Status")
                        .WithMany("ScheduleMasters")
                        .HasForeignKey("StatusId")
                        .HasConstraintName("FK_ScheduleMaster_Status");
                });

            modelBuilder.Entity("CRM.Models.SmsQueueDAO", b =>
                {
                    b.HasOne("CRM.Models.EntityReferenceDAO", "EntityReference")
                        .WithMany("SmsQueues")
                        .HasForeignKey("EntityReferenceId")
                        .HasConstraintName("FK_SmsQueue_SmsQueueReference");

                    b.HasOne("CRM.Models.AppUserDAO", "SentByAppUser")
                        .WithMany("SmsQueues")
                        .HasForeignKey("SentByAppUserId")
                        .HasConstraintName("FK_SmsQueue_AppUser");

                    b.HasOne("CRM.Models.SmsQueueStatusDAO", "SmsQueueStatus")
                        .WithMany("SmsQueues")
                        .HasForeignKey("SmsQueueStatusId")
                        .HasConstraintName("FK_SmsQueue_SmsQueueStatus");
                });

            modelBuilder.Entity("CRM.Models.SmsTemplateDAO", b =>
                {
                    b.HasOne("CRM.Models.StatusDAO", "Status")
                        .WithMany("SmsTemplates")
                        .HasForeignKey("StatusId")
                        .HasConstraintName("FK_SmsTemplate_Status");
                });

            modelBuilder.Entity("CRM.Models.StoreAssetsDAO", b =>
                {
                    b.HasOne("CRM.Models.StoreDAO", "Store")
                        .WithMany("StoreAssets")
                        .HasForeignKey("StoreId")
                        .HasConstraintName("FK_StoreAssets_Store");
                });

            modelBuilder.Entity("CRM.Models.StoreConsultingServiceMappingDAO", b =>
                {
                    b.HasOne("CRM.Models.ConsultingServiceDAO", "ConsultingService")
                        .WithMany("StoreConsultingServiceMappings")
                        .HasForeignKey("ConsultingServiceId")
                        .HasConstraintName("FK_StoreConsultingServiceMapping_ConsultingService")
                        .IsRequired();

                    b.HasOne("CRM.Models.StoreDAO", "Store")
                        .WithMany("StoreConsultingServiceMappings")
                        .HasForeignKey("StoreId")
                        .HasConstraintName("FK_StoreConsultingServiceMapping_Store")
                        .IsRequired();
                });

            modelBuilder.Entity("CRM.Models.StoreCooperativeAttitudeMappingDAO", b =>
                {
                    b.HasOne("CRM.Models.CooperativeAttitudeDAO", "CooperativeAttitude")
                        .WithMany("StoreCooperativeAttitudeMappings")
                        .HasForeignKey("CooperativeAttitudeId")
                        .HasConstraintName("FK_StoreCooperativeAttitudeMapping_CooperativeAttitude")
                        .IsRequired();

                    b.HasOne("CRM.Models.StoreDAO", "Store")
                        .WithMany("StoreCooperativeAttitudeMappings")
                        .HasForeignKey("StoreId")
                        .HasConstraintName("FK_StoreCooperativeAttitudeMapping_Store")
                        .IsRequired();
                });

            modelBuilder.Entity("CRM.Models.StoreCoverageCapacityDAO", b =>
                {
                    b.HasOne("CRM.Models.StoreDAO", "Store")
                        .WithMany("StoreCoverageCapacities")
                        .HasForeignKey("StoreId")
                        .HasConstraintName("FK_StoreCoverageCapacity_Store");
                });

            modelBuilder.Entity("CRM.Models.StoreDAO", b =>
                {
                    b.HasOne("CRM.Models.AppUserDAO", "AppUser")
                        .WithMany("Stores")
                        .HasForeignKey("AppUserId")
                        .HasConstraintName("FK_Store_AppUser");

                    b.HasOne("CRM.Models.CustomerDAO", "Customer")
                        .WithMany("Stores")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("FK_Store_Customer");

                    b.HasOne("CRM.Models.DistrictDAO", "District")
                        .WithMany("Stores")
                        .HasForeignKey("DistrictId")
                        .HasConstraintName("FK_Store_District");

                    b.HasOne("CRM.Models.OrganizationDAO", "Organization")
                        .WithMany("Stores")
                        .HasForeignKey("OrganizationId")
                        .HasConstraintName("FK_Store_Organization")
                        .IsRequired();

                    b.HasOne("CRM.Models.StoreDAO", "ParentStore")
                        .WithMany("InverseParentStore")
                        .HasForeignKey("ParentStoreId")
                        .HasConstraintName("FK_Store_Store");

                    b.HasOne("CRM.Models.ProvinceDAO", "Province")
                        .WithMany("Stores")
                        .HasForeignKey("ProvinceId")
                        .HasConstraintName("FK_Store_Province");

                    b.HasOne("CRM.Models.StatusDAO", "Status")
                        .WithMany("Stores")
                        .HasForeignKey("StatusId")
                        .HasConstraintName("FK_Store_Status")
                        .IsRequired();

                    b.HasOne("CRM.Models.StoreGroupingDAO", "StoreGrouping")
                        .WithMany("Stores")
                        .HasForeignKey("StoreGroupingId")
                        .HasConstraintName("FK_Store_StoreGrouping");

                    b.HasOne("CRM.Models.StoreStatusDAO", "StoreStatus")
                        .WithMany("Stores")
                        .HasForeignKey("StoreStatusId")
                        .HasConstraintName("FK_Store_StoreStatus")
                        .IsRequired();

                    b.HasOne("CRM.Models.StoreTypeDAO", "StoreType")
                        .WithMany("Stores")
                        .HasForeignKey("StoreTypeId")
                        .HasConstraintName("FK_Store_StoreType")
                        .IsRequired();

                    b.HasOne("CRM.Models.WardDAO", "Ward")
                        .WithMany("Stores")
                        .HasForeignKey("WardId")
                        .HasConstraintName("FK_Store_Ward");
                });

            modelBuilder.Entity("CRM.Models.StoreDeliveryTimeMappingDAO", b =>
                {
                    b.HasOne("CRM.Models.StoreDeliveryTimeDAO", "StoreDeliveryTime")
                        .WithMany("StoreDeliveryTimeMappings")
                        .HasForeignKey("StoreDeliveryTimeId")
                        .HasConstraintName("FK_StoreDeliveryTimeMapping_StoreDeliveryTime")
                        .IsRequired();

                    b.HasOne("CRM.Models.StoreDAO", "Store")
                        .WithMany("StoreDeliveryTimeMappings")
                        .HasForeignKey("StoreId")
                        .HasConstraintName("FK_StoreDeliveryTimeMapping_Store")
                        .IsRequired();
                });

            modelBuilder.Entity("CRM.Models.StoreExtendDAO", b =>
                {
                    b.HasOne("CRM.Models.BusinessTypeDAO", "BusinessType")
                        .WithMany("StoreExtends")
                        .HasForeignKey("BusinessTypeId")
                        .HasConstraintName("FK_StoreExtend_BusinessType")
                        .IsRequired();

                    b.HasOne("CRM.Models.CurrencyDAO", "Currency")
                        .WithMany("StoreExtends")
                        .HasForeignKey("CurrencyId")
                        .HasConstraintName("FK_StoreExtend_Currency")
                        .IsRequired();

                    b.HasOne("CRM.Models.StoreDAO", "Store")
                        .WithOne("StoreExtend")
                        .HasForeignKey("CRM.Models.StoreExtendDAO", "StoreId")
                        .HasConstraintName("FK_StoreExtend_Store")
                        .IsRequired();
                });

            modelBuilder.Entity("CRM.Models.StoreGroupingDAO", b =>
                {
                    b.HasOne("CRM.Models.StoreGroupingDAO", "Parent")
                        .WithMany("InverseParent")
                        .HasForeignKey("ParentId")
                        .HasConstraintName("FK_StoreGrouping_StoreGrouping");

                    b.HasOne("CRM.Models.StatusDAO", "Status")
                        .WithMany("StoreGroupings")
                        .HasForeignKey("StatusId")
                        .HasConstraintName("FK_StoreGrouping_Status")
                        .IsRequired();
                });

            modelBuilder.Entity("CRM.Models.StoreImageMappingDAO", b =>
                {
                    b.HasOne("CRM.Models.ImageDAO", "Image")
                        .WithMany("StoreImageMappings")
                        .HasForeignKey("ImageId")
                        .HasConstraintName("FK_StoreImageMapping_Image")
                        .IsRequired();

                    b.HasOne("CRM.Models.StoreDAO", "Store")
                        .WithMany("StoreImageMappings")
                        .HasForeignKey("StoreId")
                        .HasConstraintName("FK_StoreImageMapping_Store")
                        .IsRequired();
                });

            modelBuilder.Entity("CRM.Models.StoreInfulenceLevelMarketMappingDAO", b =>
                {
                    b.HasOne("CRM.Models.InfulenceLevelMarketDAO", "InfulenceLevelMarket")
                        .WithMany("StoreInfulenceLevelMarketMappings")
                        .HasForeignKey("InfulenceLevelMarketId")
                        .HasConstraintName("FK_StoreInfulenceLevelMarketMapping_InfulenceLevelMarket")
                        .IsRequired();

                    b.HasOne("CRM.Models.StoreDAO", "Store")
                        .WithMany("StoreInfulenceLevelMarketMappings")
                        .HasForeignKey("StoreId")
                        .HasConstraintName("FK_StoreInfulenceLevelMarketMapping_Store")
                        .IsRequired();
                });

            modelBuilder.Entity("CRM.Models.StoreMarketPriceMappingDAO", b =>
                {
                    b.HasOne("CRM.Models.MarketPriceDAO", "MarketPrice")
                        .WithMany("StoreMarketPriceMappings")
                        .HasForeignKey("MarketPriceId")
                        .HasConstraintName("FK_StoreMarketPriceMapping_MarketPrice")
                        .IsRequired();

                    b.HasOne("CRM.Models.StoreDAO", "Store")
                        .WithMany("StoreMarketPriceMappings")
                        .HasForeignKey("StoreId")
                        .HasConstraintName("FK_StoreMarketPriceMapping_Store")
                        .IsRequired();
                });

            modelBuilder.Entity("CRM.Models.StoreMeansOfDeliveryDAO", b =>
                {
                    b.HasOne("CRM.Models.StoreDAO", "Store")
                        .WithMany("StoreMeansOfDeliveries")
                        .HasForeignKey("StoreId")
                        .HasConstraintName("FK_StoreMeansOfDelivery_Store");
                });

            modelBuilder.Entity("CRM.Models.StorePersonnelDAO", b =>
                {
                    b.HasOne("CRM.Models.StoreDAO", "Store")
                        .WithMany("StorePersonnels")
                        .HasForeignKey("StoreId")
                        .HasConstraintName("FK_StorePersonnel_Store");
                });

            modelBuilder.Entity("CRM.Models.StoreRelationshipCustomerMappingDAO", b =>
                {
                    b.HasOne("CRM.Models.RelationshipCustomerTypeDAO", "RelationshipCustomerType")
                        .WithMany("StoreRelationshipCustomerMappings")
                        .HasForeignKey("RelationshipCustomerTypeId")
                        .HasConstraintName("FK_StoreRelationshipCustomerMapping_RelationshipCustomerType")
                        .IsRequired();

                    b.HasOne("CRM.Models.StoreDAO", "Store")
                        .WithMany("StoreRelationshipCustomerMappings")
                        .HasForeignKey("StoreId")
                        .HasConstraintName("FK_StoreRelationshipCustomerMapping_Store")
                        .IsRequired();
                });

            modelBuilder.Entity("CRM.Models.StoreRepresentDAO", b =>
                {
                    b.HasOne("CRM.Models.PositionDAO", "Position")
                        .WithMany("StoreRepresents")
                        .HasForeignKey("PositionId")
                        .HasConstraintName("FK_StoreRepresent_Position");

                    b.HasOne("CRM.Models.StoreDAO", "Store")
                        .WithMany("StoreRepresents")
                        .HasForeignKey("StoreId")
                        .HasConstraintName("FK_StoreRepresent_Store")
                        .IsRequired();
                });

            modelBuilder.Entity("CRM.Models.StoreTypeDAO", b =>
                {
                    b.HasOne("CRM.Models.ColorDAO", "Color")
                        .WithMany("StoreTypes")
                        .HasForeignKey("ColorId")
                        .HasConstraintName("FK_StoreType_Color");

                    b.HasOne("CRM.Models.StatusDAO", "Status")
                        .WithMany("StoreTypes")
                        .HasForeignKey("StatusId")
                        .HasConstraintName("FK_StoreType_Status")
                        .IsRequired();
                });

            modelBuilder.Entity("CRM.Models.StoreWarrantyServiceDAO", b =>
                {
                    b.HasOne("CRM.Models.StoreDAO", "Store")
                        .WithMany("StoreWarrantyServices")
                        .HasForeignKey("StoreId")
                        .HasConstraintName("FK_StoreWarrantyService_Store")
                        .IsRequired();
                });

            modelBuilder.Entity("CRM.Models.SupplierDAO", b =>
                {
                    b.HasOne("CRM.Models.DistrictDAO", "District")
                        .WithMany("Suppliers")
                        .HasForeignKey("DistrictId")
                        .HasConstraintName("FK_Supplier_District");

                    b.HasOne("CRM.Models.NationDAO", "Nation")
                        .WithMany("Suppliers")
                        .HasForeignKey("NationId")
                        .HasConstraintName("FK_Supplier_Nation");

                    b.HasOne("CRM.Models.AppUserDAO", "PersonInCharge")
                        .WithMany("Suppliers")
                        .HasForeignKey("PersonInChargeId")
                        .HasConstraintName("FK_Supplier_AppUser");

                    b.HasOne("CRM.Models.ProvinceDAO", "Province")
                        .WithMany("Suppliers")
                        .HasForeignKey("ProvinceId")
                        .HasConstraintName("FK_Supplier_Province");

                    b.HasOne("CRM.Models.StatusDAO", "Status")
                        .WithMany("Suppliers")
                        .HasForeignKey("StatusId")
                        .HasConstraintName("FK_Supplier_Status")
                        .IsRequired();

                    b.HasOne("CRM.Models.WardDAO", "Ward")
                        .WithMany("Suppliers")
                        .HasForeignKey("WardId")
                        .HasConstraintName("FK_Supplier_Ward");
                });

            modelBuilder.Entity("CRM.Models.TaxTypeDAO", b =>
                {
                    b.HasOne("CRM.Models.StatusDAO", "Status")
                        .WithMany("TaxTypes")
                        .HasForeignKey("StatusId")
                        .HasConstraintName("FK_TaxType_Status")
                        .IsRequired();
                });

            modelBuilder.Entity("CRM.Models.TicketDAO", b =>
                {
                    b.HasOne("CRM.Models.AppUserDAO", "AppUserClosed")
                        .WithMany("TicketAppUserCloseds")
                        .HasForeignKey("AppUserClosedId")
                        .HasConstraintName("FK_Ticket_AppUser2");

                    b.HasOne("CRM.Models.AppUserDAO", "AppUserResolved")
                        .WithMany("TicketAppUserResolveds")
                        .HasForeignKey("AppUserResolvedId")
                        .HasConstraintName("FK_Ticket_AppUser3");

                    b.HasOne("CRM.Models.AppUserDAO", "Creator")
                        .WithMany("TicketCreators")
                        .HasForeignKey("CreatorId")
                        .HasConstraintName("FK_Ticket_AppUser1")
                        .IsRequired();

                    b.HasOne("CRM.Models.CustomerDAO", "Customer")
                        .WithMany("Tickets")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("FK_Ticket_Customer")
                        .IsRequired();

                    b.HasOne("CRM.Models.CustomerTypeDAO", "CustomerType")
                        .WithMany("Tickets")
                        .HasForeignKey("CustomerTypeId")
                        .HasConstraintName("FK_Ticket_CustomerType")
                        .IsRequired();

                    b.HasOne("CRM.Models.OrganizationDAO", "Department")
                        .WithMany("Tickets")
                        .HasForeignKey("DepartmentId")
                        .HasConstraintName("FK_Ticket_Organization");

                    b.HasOne("CRM.Models.EntityReferenceDAO", "EntityReference")
                        .WithMany("Tickets")
                        .HasForeignKey("EntityReferenceId")
                        .HasConstraintName("FK_Ticket_TicketReference");

                    b.HasOne("CRM.Models.ProductDAO", "Product")
                        .WithMany("Tickets")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK_Ticket_Product");

                    b.HasOne("CRM.Models.CallLogDAO", "RelatedCallLog")
                        .WithMany("Tickets")
                        .HasForeignKey("RelatedCallLogId")
                        .HasConstraintName("FK_Ticket_CallLog");

                    b.HasOne("CRM.Models.TicketDAO", "RelatedTicket")
                        .WithMany("InverseRelatedTicket")
                        .HasForeignKey("RelatedTicketId")
                        .HasConstraintName("FK_Ticket_Ticket");

                    b.HasOne("CRM.Models.SLAPolicyDAO", "SLAPolicy")
                        .WithMany("Tickets")
                        .HasForeignKey("SLAPolicyId")
                        .HasConstraintName("FK_Ticket_SLAPolicy");

                    b.HasOne("CRM.Models.SLAStatusDAO", "SLAStatus")
                        .WithMany("Tickets")
                        .HasForeignKey("SLAStatusId")
                        .HasConstraintName("FK_Ticket_SLAStatus");

                    b.HasOne("CRM.Models.StatusDAO", "Status")
                        .WithMany("Tickets")
                        .HasForeignKey("StatusId")
                        .HasConstraintName("FK_Ticket_Status")
                        .IsRequired();

                    b.HasOne("CRM.Models.TicketIssueLevelDAO", "TicketIssueLevel")
                        .WithMany("Tickets")
                        .HasForeignKey("TicketIssueLevelId")
                        .HasConstraintName("FK_Ticket_TicketIssueLevel")
                        .IsRequired();

                    b.HasOne("CRM.Models.TicketPriorityDAO", "TicketPriority")
                        .WithMany("Tickets")
                        .HasForeignKey("TicketPriorityId")
                        .HasConstraintName("FK_Ticket_TicketPriority")
                        .IsRequired();

                    b.HasOne("CRM.Models.TicketResolveTypeDAO", "TicketResolveType")
                        .WithMany("Tickets")
                        .HasForeignKey("TicketResolveTypeId")
                        .HasConstraintName("FK_Ticket_TicketResolveType");

                    b.HasOne("CRM.Models.TicketSourceDAO", "TicketSource")
                        .WithMany("Tickets")
                        .HasForeignKey("TicketSourceId")
                        .HasConstraintName("FK_Ticket_TicketSource")
                        .IsRequired();

                    b.HasOne("CRM.Models.TicketStatusDAO", "TicketStatus")
                        .WithMany("Tickets")
                        .HasForeignKey("TicketStatusId")
                        .HasConstraintName("FK_Ticket_TicketStatus")
                        .IsRequired();

                    b.HasOne("CRM.Models.AppUserDAO", "User")
                        .WithMany("TicketUsers")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Ticket_AppUser")
                        .IsRequired();
                });

            modelBuilder.Entity("CRM.Models.TicketGroupDAO", b =>
                {
                    b.HasOne("CRM.Models.StatusDAO", "Status")
                        .WithMany("TicketGroups")
                        .HasForeignKey("StatusId")
                        .HasConstraintName("FK_TicketGroup_Status")
                        .IsRequired();

                    b.HasOne("CRM.Models.TicketTypeDAO", "TicketType")
                        .WithMany("TicketGroups")
                        .HasForeignKey("TicketTypeId")
                        .HasConstraintName("FK_TicketGroup_TicketType")
                        .IsRequired();
                });

            modelBuilder.Entity("CRM.Models.TicketIssueLevelDAO", b =>
                {
                    b.HasOne("CRM.Models.StatusDAO", "Status")
                        .WithMany("TicketIssueLevels")
                        .HasForeignKey("StatusId")
                        .HasConstraintName("FK_TicketIssueLevel_Status")
                        .IsRequired();

                    b.HasOne("CRM.Models.TicketGroupDAO", "TicketGroup")
                        .WithMany("TicketIssueLevels")
                        .HasForeignKey("TicketGroupId")
                        .HasConstraintName("FK_TicketIssueLevel_TicketGroup")
                        .IsRequired();
                });

            modelBuilder.Entity("CRM.Models.TicketOfDepartmentDAO", b =>
                {
                    b.HasOne("CRM.Models.OrganizationDAO", "Department")
                        .WithMany("TicketOfDepartments")
                        .HasForeignKey("DepartmentId")
                        .HasConstraintName("FK_TicketOfDepartment_Organization")
                        .IsRequired();

                    b.HasOne("CRM.Models.TicketDAO", "Ticket")
                        .WithMany("TicketOfDepartments")
                        .HasForeignKey("TicketId")
                        .HasConstraintName("FK_TicketOfDepartment_Ticket")
                        .IsRequired();

                    b.HasOne("CRM.Models.TicketStatusDAO", "TicketStatus")
                        .WithMany("TicketOfDepartments")
                        .HasForeignKey("TicketStatusId")
                        .HasConstraintName("FK_TicketOfDepartment_TicketStatus")
                        .IsRequired();
                });

            modelBuilder.Entity("CRM.Models.TicketOfUserDAO", b =>
                {
                    b.HasOne("CRM.Models.TicketDAO", "Ticket")
                        .WithMany("TicketOfUsers")
                        .HasForeignKey("TicketId")
                        .HasConstraintName("FK_TicketOfUser_Ticket")
                        .IsRequired();

                    b.HasOne("CRM.Models.TicketStatusDAO", "TicketStatus")
                        .WithMany("TicketOfUsers")
                        .HasForeignKey("TicketStatusId")
                        .HasConstraintName("FK_TicketOfUser_TicketStatus")
                        .IsRequired();

                    b.HasOne("CRM.Models.AppUserDAO", "User")
                        .WithMany("TicketOfUsers")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_TicketOfUser_AppUser")
                        .IsRequired();
                });

            modelBuilder.Entity("CRM.Models.TicketPriorityDAO", b =>
                {
                    b.HasOne("CRM.Models.StatusDAO", "Status")
                        .WithMany("TicketPriorities")
                        .HasForeignKey("StatusId")
                        .HasConstraintName("FK_TicketPriority_Status")
                        .IsRequired();
                });

            modelBuilder.Entity("CRM.Models.TicketSourceDAO", b =>
                {
                    b.HasOne("CRM.Models.StatusDAO", "Status")
                        .WithMany("TicketSources")
                        .HasForeignKey("StatusId")
                        .HasConstraintName("FK_TicketSource_Status")
                        .IsRequired();
                });

            modelBuilder.Entity("CRM.Models.TicketStatusDAO", b =>
                {
                    b.HasOne("CRM.Models.StatusDAO", "Status")
                        .WithMany("TicketStatuses")
                        .HasForeignKey("StatusId")
                        .HasConstraintName("FK_TicketStatus_Status")
                        .IsRequired();
                });

            modelBuilder.Entity("CRM.Models.TicketTypeDAO", b =>
                {
                    b.HasOne("CRM.Models.StatusDAO", "Status")
                        .WithMany("TicketTypes")
                        .HasForeignKey("StatusId")
                        .HasConstraintName("FK_TicketType_Status")
                        .IsRequired();
                });

            modelBuilder.Entity("CRM.Models.UnitOfMeasureDAO", b =>
                {
                    b.HasOne("CRM.Models.StatusDAO", "Status")
                        .WithMany("UnitOfMeasures")
                        .HasForeignKey("StatusId")
                        .HasConstraintName("FK_UnitOfMeasure_Status")
                        .IsRequired();
                });

            modelBuilder.Entity("CRM.Models.UnitOfMeasureGroupingContentDAO", b =>
                {
                    b.HasOne("CRM.Models.UnitOfMeasureGroupingDAO", "UnitOfMeasureGrouping")
                        .WithMany("UnitOfMeasureGroupingContents")
                        .HasForeignKey("UnitOfMeasureGroupingId")
                        .HasConstraintName("FK_UnitOfMeasureGroupingContent_UnitOfMeasureGrouping")
                        .IsRequired();

                    b.HasOne("CRM.Models.UnitOfMeasureDAO", "UnitOfMeasure")
                        .WithMany("UnitOfMeasureGroupingContents")
                        .HasForeignKey("UnitOfMeasureId")
                        .HasConstraintName("FK_UnitOfMeasureGroupingContent_UnitOfMeasure")
                        .IsRequired();
                });

            modelBuilder.Entity("CRM.Models.UnitOfMeasureGroupingDAO", b =>
                {
                    b.HasOne("CRM.Models.StatusDAO", "Status")
                        .WithMany("UnitOfMeasureGroupings")
                        .HasForeignKey("StatusId")
                        .HasConstraintName("FK_UnitOfMeasureGrouping_Status")
                        .IsRequired();

                    b.HasOne("CRM.Models.UnitOfMeasureDAO", "UnitOfMeasure")
                        .WithMany("UnitOfMeasureGroupings")
                        .HasForeignKey("UnitOfMeasureId")
                        .HasConstraintName("FK_UnitOfMeasureGrouping_UnitOfMeasure")
                        .IsRequired();
                });

            modelBuilder.Entity("CRM.Models.VariationDAO", b =>
                {
                    b.HasOne("CRM.Models.VariationGroupingDAO", "VariationGrouping")
                        .WithMany("Variations")
                        .HasForeignKey("VariationGroupingId")
                        .HasConstraintName("FK_Variation_VariationGrouping")
                        .IsRequired();
                });

            modelBuilder.Entity("CRM.Models.VariationGroupingDAO", b =>
                {
                    b.HasOne("CRM.Models.ProductDAO", "Product")
                        .WithMany("VariationGroupings")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK_VariationGrouping_Product")
                        .IsRequired();
                });

            modelBuilder.Entity("CRM.Models.WardDAO", b =>
                {
                    b.HasOne("CRM.Models.DistrictDAO", "District")
                        .WithMany("Wards")
                        .HasForeignKey("DistrictId")
                        .HasConstraintName("FK_Ward_District")
                        .IsRequired();

                    b.HasOne("CRM.Models.StatusDAO", "Status")
                        .WithMany("Wards")
                        .HasForeignKey("StatusId")
                        .HasConstraintName("FK_Ward_Status")
                        .IsRequired();
                });

            modelBuilder.Entity("CRM.Models.WarehouseDAO", b =>
                {
                    b.HasOne("CRM.Models.DistrictDAO", "District")
                        .WithMany("Warehouses")
                        .HasForeignKey("DistrictId")
                        .HasConstraintName("FK_Warehouse_District");

                    b.HasOne("CRM.Models.OrganizationDAO", "Organization")
                        .WithMany("Warehouses")
                        .HasForeignKey("OrganizationId")
                        .HasConstraintName("FK_Warehouse_Organization")
                        .IsRequired();

                    b.HasOne("CRM.Models.ProvinceDAO", "Province")
                        .WithMany("Warehouses")
                        .HasForeignKey("ProvinceId")
                        .HasConstraintName("FK_Warehouse_Province");

                    b.HasOne("CRM.Models.StatusDAO", "Status")
                        .WithMany("Warehouses")
                        .HasForeignKey("StatusId")
                        .HasConstraintName("FK_Warehouse_Status")
                        .IsRequired();

                    b.HasOne("CRM.Models.WardDAO", "Ward")
                        .WithMany("Warehouses")
                        .HasForeignKey("WardId")
                        .HasConstraintName("FK_Warehouse_Ward");
                });

            modelBuilder.Entity("CRM.Models.WorkflowDefinitionDAO", b =>
                {
                    b.HasOne("CRM.Models.AppUserDAO", "Creator")
                        .WithMany("WorkflowDefinitionCreators")
                        .HasForeignKey("CreatorId")
                        .HasConstraintName("FK_WorkflowDefinition_AppUser")
                        .IsRequired();

                    b.HasOne("CRM.Models.AppUserDAO", "Modifier")
                        .WithMany("WorkflowDefinitionModifiers")
                        .HasForeignKey("ModifierId")
                        .HasConstraintName("FK_WorkflowDefinition_AppUser1");

                    b.HasOne("CRM.Models.StatusDAO", "Status")
                        .WithMany("WorkflowDefinitions")
                        .HasForeignKey("StatusId")
                        .HasConstraintName("FK_WorkflowDefinition_Status")
                        .IsRequired();

                    b.HasOne("CRM.Models.WorkflowTypeDAO", "WorkflowType")
                        .WithMany("WorkflowDefinitions")
                        .HasForeignKey("WorkflowTypeId")
                        .HasConstraintName("FK_WorkflowDefinition_WorkflowType")
                        .IsRequired();
                });

            modelBuilder.Entity("CRM.Models.WorkflowDirectionDAO", b =>
                {
                    b.HasOne("CRM.Models.WorkflowStepDAO", "FromStep")
                        .WithMany("WorkflowDirectionFromSteps")
                        .HasForeignKey("FromStepId")
                        .HasConstraintName("FK_WorkflowDirection_WorkflowStep")
                        .IsRequired();

                    b.HasOne("CRM.Models.WorkflowStepDAO", "ToStep")
                        .WithMany("WorkflowDirectionToSteps")
                        .HasForeignKey("ToStepId")
                        .HasConstraintName("FK_WorkflowDirection_WorkflowStep1")
                        .IsRequired();

                    b.HasOne("CRM.Models.WorkflowDefinitionDAO", "WorkflowDefinition")
                        .WithMany("WorkflowDirections")
                        .HasForeignKey("WorkflowDefinitionId")
                        .HasConstraintName("FK_WorkflowDirection_WorkflowDefinition")
                        .IsRequired();
                });

            modelBuilder.Entity("CRM.Models.WorkflowParameterDAO", b =>
                {
                    b.HasOne("CRM.Models.WorkflowDefinitionDAO", "WorkflowDefinition")
                        .WithMany("WorkflowParameters")
                        .HasForeignKey("WorkflowDefinitionId")
                        .HasConstraintName("FK_WorkflowParameter_WorkflowDefinition")
                        .IsRequired();
                });

            modelBuilder.Entity("CRM.Models.WorkflowStepDAO", b =>
                {
                    b.HasOne("CRM.Models.RoleDAO", "Role")
                        .WithMany("WorkflowSteps")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK_WorkflowStep_Role")
                        .IsRequired();

                    b.HasOne("CRM.Models.WorkflowDefinitionDAO", "WorkflowDefinition")
                        .WithMany("WorkflowSteps")
                        .HasForeignKey("WorkflowDefinitionId")
                        .HasConstraintName("FK_WorkflowStep_WorkflowDefinition")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
